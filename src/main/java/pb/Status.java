// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/status.proto

package pb;

public final class Status {
  private Status() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code pb.EmcTaskExecStateType}
   *
   * <pre>
   **
   *  Types for EMC task execution state.
   * </pre>
   */
  public enum EmcTaskExecStateType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_TASK_EXEC_ERROR = 1;</code>
     *
     * <pre>
     *&#47; Error during task execution.
     * </pre>
     */
    EMC_TASK_EXEC_ERROR(0, 1),
    /**
     * <code>EMC_TASK_EXEC_DONE = 2;</code>
     *
     * <pre>
     *&#47; Task execution has bee completed.
     * </pre>
     */
    EMC_TASK_EXEC_DONE(1, 2),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_MOTION = 3;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for Motion.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_MOTION(2, 3),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE = 4;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for Motion queue.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE(3, 4),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_IO = 5;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for IO.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_IO(4, 5),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO = 7;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for Motion and IO.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO(5, 7),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_DELAY = 8;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for a delay.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_DELAY(6, 8),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD = 9;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for a system command.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD(7, 9),
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED = 10;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for spindle orientation to complete.
     * </pre>
     */
    EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED(8, 10),
    ;

    /**
     * <code>EMC_TASK_EXEC_ERROR = 1;</code>
     *
     * <pre>
     *&#47; Error during task execution.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_ERROR_VALUE = 1;
    /**
     * <code>EMC_TASK_EXEC_DONE = 2;</code>
     *
     * <pre>
     *&#47; Task execution has bee completed.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_DONE_VALUE = 2;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_MOTION = 3;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for Motion.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_MOTION_VALUE = 3;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE = 4;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for Motion queue.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE_VALUE = 4;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_IO = 5;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for IO.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_IO_VALUE = 5;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO = 7;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for Motion and IO.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO_VALUE = 7;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_DELAY = 8;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for a delay.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_DELAY_VALUE = 8;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD = 9;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for a system command.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD_VALUE = 9;
    /**
     * <code>EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED = 10;</code>
     *
     * <pre>
     *&#47; Task execution is waiting for spindle orientation to complete.
     * </pre>
     */
    public static final int EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED_VALUE = 10;


    public final int getNumber() { return value; }

    public static EmcTaskExecStateType valueOf(int value) {
      switch (value) {
        case 1: return EMC_TASK_EXEC_ERROR;
        case 2: return EMC_TASK_EXEC_DONE;
        case 3: return EMC_TASK_EXEC_WAITING_FOR_MOTION;
        case 4: return EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE;
        case 5: return EMC_TASK_EXEC_WAITING_FOR_IO;
        case 7: return EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO;
        case 8: return EMC_TASK_EXEC_WAITING_FOR_DELAY;
        case 9: return EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD;
        case 10: return EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcTaskExecStateType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcTaskExecStateType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcTaskExecStateType>() {
            public EmcTaskExecStateType findValueByNumber(int number) {
              return EmcTaskExecStateType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(0);
    }

    private static final EmcTaskExecStateType[] VALUES = values();

    public static EmcTaskExecStateType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcTaskExecStateType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcTaskExecStateType)
  }

  /**
   * Protobuf enum {@code pb.EmcInterpStateType}
   *
   * <pre>
   **
   * Types for EMC task interpreter state.
   * </pre>
   */
  public enum EmcInterpStateType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_TASK_INTERP_IDLE = 1;</code>
     *
     * <pre>
     *&#47; Task interpreter is idling.
     * </pre>
     */
    EMC_TASK_INTERP_IDLE(0, 1),
    /**
     * <code>EMC_TASK_INTERP_READING = 2;</code>
     *
     * <pre>
     *&#47; Task interpreter is reading.
     * </pre>
     */
    EMC_TASK_INTERP_READING(1, 2),
    /**
     * <code>EMC_TASK_INTERP_PAUSED = 3;</code>
     *
     * <pre>
     *&#47; Task interpreter is paused.
     * </pre>
     */
    EMC_TASK_INTERP_PAUSED(2, 3),
    /**
     * <code>EMC_TASK_INTERP_WAITING = 4;</code>
     *
     * <pre>
     *&#47; Task interpreter is waiting.
     * </pre>
     */
    EMC_TASK_INTERP_WAITING(3, 4),
    ;

    /**
     * <code>EMC_TASK_INTERP_IDLE = 1;</code>
     *
     * <pre>
     *&#47; Task interpreter is idling.
     * </pre>
     */
    public static final int EMC_TASK_INTERP_IDLE_VALUE = 1;
    /**
     * <code>EMC_TASK_INTERP_READING = 2;</code>
     *
     * <pre>
     *&#47; Task interpreter is reading.
     * </pre>
     */
    public static final int EMC_TASK_INTERP_READING_VALUE = 2;
    /**
     * <code>EMC_TASK_INTERP_PAUSED = 3;</code>
     *
     * <pre>
     *&#47; Task interpreter is paused.
     * </pre>
     */
    public static final int EMC_TASK_INTERP_PAUSED_VALUE = 3;
    /**
     * <code>EMC_TASK_INTERP_WAITING = 4;</code>
     *
     * <pre>
     *&#47; Task interpreter is waiting.
     * </pre>
     */
    public static final int EMC_TASK_INTERP_WAITING_VALUE = 4;


    public final int getNumber() { return value; }

    public static EmcInterpStateType valueOf(int value) {
      switch (value) {
        case 1: return EMC_TASK_INTERP_IDLE;
        case 2: return EMC_TASK_INTERP_READING;
        case 3: return EMC_TASK_INTERP_PAUSED;
        case 4: return EMC_TASK_INTERP_WAITING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcInterpStateType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcInterpStateType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcInterpStateType>() {
            public EmcInterpStateType findValueByNumber(int number) {
              return EmcInterpStateType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(1);
    }

    private static final EmcInterpStateType[] VALUES = values();

    public static EmcInterpStateType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcInterpStateType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcInterpStateType)
  }

  /**
   * Protobuf enum {@code pb.EmcInterpExitCodeType}
   *
   * <pre>
   **
   * Types for EMC interpreter exit codes.
   * </pre>
   */
  public enum EmcInterpExitCodeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_INTERP_EXIT_OK = 0;</code>
     *
     * <pre>
     *&#47; Interpreter exited successfully.
     * </pre>
     */
    EMC_INTERP_EXIT_OK(0, 0),
    /**
     * <code>EMC_INTERP_EXIT_EXIT = 1;</code>
     *
     * <pre>
     *&#47; Interpreter exited with no status information.
     * </pre>
     */
    EMC_INTERP_EXIT_EXIT(1, 1),
    /**
     * <code>EMC_INTERP_EXIT_EXECUTE_FINISH = 2;</code>
     *
     * <pre>
     *&#47; Interpreter execution finished.
     * </pre>
     */
    EMC_INTERP_EXIT_EXECUTE_FINISH(2, 2),
    /**
     * <code>EMC_INTERP_EXIT_ENDFILE = 3;</code>
     *
     * <pre>
     *&#47; Interpreter has reached end of file.
     * </pre>
     */
    EMC_INTERP_EXIT_ENDFILE(3, 3),
    /**
     * <code>EMC_INTERP_EXIT_FILE_NOT_OPEN = 4;</code>
     *
     * <pre>
     *&#47; Interpreter could not open the file.
     * </pre>
     */
    EMC_INTERP_EXIT_FILE_NOT_OPEN(4, 4),
    /**
     * <code>EMC_INTERP_EXIT_ERROR = 5;</code>
     *
     * <pre>
     *&#47; Interpreter exited with an error.
     * </pre>
     */
    EMC_INTERP_EXIT_ERROR(5, 5),
    ;

    /**
     * <code>EMC_INTERP_EXIT_OK = 0;</code>
     *
     * <pre>
     *&#47; Interpreter exited successfully.
     * </pre>
     */
    public static final int EMC_INTERP_EXIT_OK_VALUE = 0;
    /**
     * <code>EMC_INTERP_EXIT_EXIT = 1;</code>
     *
     * <pre>
     *&#47; Interpreter exited with no status information.
     * </pre>
     */
    public static final int EMC_INTERP_EXIT_EXIT_VALUE = 1;
    /**
     * <code>EMC_INTERP_EXIT_EXECUTE_FINISH = 2;</code>
     *
     * <pre>
     *&#47; Interpreter execution finished.
     * </pre>
     */
    public static final int EMC_INTERP_EXIT_EXECUTE_FINISH_VALUE = 2;
    /**
     * <code>EMC_INTERP_EXIT_ENDFILE = 3;</code>
     *
     * <pre>
     *&#47; Interpreter has reached end of file.
     * </pre>
     */
    public static final int EMC_INTERP_EXIT_ENDFILE_VALUE = 3;
    /**
     * <code>EMC_INTERP_EXIT_FILE_NOT_OPEN = 4;</code>
     *
     * <pre>
     *&#47; Interpreter could not open the file.
     * </pre>
     */
    public static final int EMC_INTERP_EXIT_FILE_NOT_OPEN_VALUE = 4;
    /**
     * <code>EMC_INTERP_EXIT_ERROR = 5;</code>
     *
     * <pre>
     *&#47; Interpreter exited with an error.
     * </pre>
     */
    public static final int EMC_INTERP_EXIT_ERROR_VALUE = 5;


    public final int getNumber() { return value; }

    public static EmcInterpExitCodeType valueOf(int value) {
      switch (value) {
        case 0: return EMC_INTERP_EXIT_OK;
        case 1: return EMC_INTERP_EXIT_EXIT;
        case 2: return EMC_INTERP_EXIT_EXECUTE_FINISH;
        case 3: return EMC_INTERP_EXIT_ENDFILE;
        case 4: return EMC_INTERP_EXIT_FILE_NOT_OPEN;
        case 5: return EMC_INTERP_EXIT_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcInterpExitCodeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcInterpExitCodeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcInterpExitCodeType>() {
            public EmcInterpExitCodeType findValueByNumber(int number) {
              return EmcInterpExitCodeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(2);
    }

    private static final EmcInterpExitCodeType[] VALUES = values();

    public static EmcInterpExitCodeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcInterpExitCodeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcInterpExitCodeType)
  }

  /**
   * Protobuf enum {@code pb.EmcKinematicsType}
   *
   * <pre>
   **
   * EMC kinematics type.
   * </pre>
   */
  public enum EmcKinematicsType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>KINEMATICS_IDENTITY = 1;</code>
     *
     * <pre>
     *&#47; Identity kinematics.
     * </pre>
     */
    KINEMATICS_IDENTITY(0, 1),
    /**
     * <code>KINEMATICS_FORWARD_ONLY = 2;</code>
     *
     * <pre>
     *&#47; Forward only kinematics.
     * </pre>
     */
    KINEMATICS_FORWARD_ONLY(1, 2),
    /**
     * <code>KINEMATICS_INVERSE_ONLY = 3;</code>
     *
     * <pre>
     *&#47; Inverse only kinematics.
     * </pre>
     */
    KINEMATICS_INVERSE_ONLY(2, 3),
    /**
     * <code>KINEMATICS_BOTH = 4;</code>
     *
     * <pre>
     *&#47; Forward and inverse kinematics.
     * </pre>
     */
    KINEMATICS_BOTH(3, 4),
    ;

    /**
     * <code>KINEMATICS_IDENTITY = 1;</code>
     *
     * <pre>
     *&#47; Identity kinematics.
     * </pre>
     */
    public static final int KINEMATICS_IDENTITY_VALUE = 1;
    /**
     * <code>KINEMATICS_FORWARD_ONLY = 2;</code>
     *
     * <pre>
     *&#47; Forward only kinematics.
     * </pre>
     */
    public static final int KINEMATICS_FORWARD_ONLY_VALUE = 2;
    /**
     * <code>KINEMATICS_INVERSE_ONLY = 3;</code>
     *
     * <pre>
     *&#47; Inverse only kinematics.
     * </pre>
     */
    public static final int KINEMATICS_INVERSE_ONLY_VALUE = 3;
    /**
     * <code>KINEMATICS_BOTH = 4;</code>
     *
     * <pre>
     *&#47; Forward and inverse kinematics.
     * </pre>
     */
    public static final int KINEMATICS_BOTH_VALUE = 4;


    public final int getNumber() { return value; }

    public static EmcKinematicsType valueOf(int value) {
      switch (value) {
        case 1: return KINEMATICS_IDENTITY;
        case 2: return KINEMATICS_FORWARD_ONLY;
        case 3: return KINEMATICS_INVERSE_ONLY;
        case 4: return KINEMATICS_BOTH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcKinematicsType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcKinematicsType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcKinematicsType>() {
            public EmcKinematicsType findValueByNumber(int number) {
              return EmcKinematicsType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(3);
    }

    private static final EmcKinematicsType[] VALUES = values();

    public static EmcKinematicsType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcKinematicsType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcKinematicsType)
  }

  /**
   * Protobuf enum {@code pb.EmcTrajectoryModeType}
   *
   * <pre>
   **
   * Types for trajectory motion control.
   * </pre>
   */
  public enum EmcTrajectoryModeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_TRAJ_MODE_FREE = 1;</code>
     *
     * <pre>
     *&#47; Independent axis motion.
     * </pre>
     */
    EMC_TRAJ_MODE_FREE(0, 1),
    /**
     * <code>EMC_TRAJ_MODE_COORD = 2;</code>
     *
     * <pre>
     *&#47; Coordinated axis motion.
     * </pre>
     */
    EMC_TRAJ_MODE_COORD(1, 2),
    /**
     * <code>EMC_TRAJ_MODE_TELEOP = 3;</code>
     *
     * <pre>
     *&#47; Velocity based world coordinates motion.
     * </pre>
     */
    EMC_TRAJ_MODE_TELEOP(2, 3),
    ;

    /**
     * <code>EMC_TRAJ_MODE_FREE = 1;</code>
     *
     * <pre>
     *&#47; Independent axis motion.
     * </pre>
     */
    public static final int EMC_TRAJ_MODE_FREE_VALUE = 1;
    /**
     * <code>EMC_TRAJ_MODE_COORD = 2;</code>
     *
     * <pre>
     *&#47; Coordinated axis motion.
     * </pre>
     */
    public static final int EMC_TRAJ_MODE_COORD_VALUE = 2;
    /**
     * <code>EMC_TRAJ_MODE_TELEOP = 3;</code>
     *
     * <pre>
     *&#47; Velocity based world coordinates motion.
     * </pre>
     */
    public static final int EMC_TRAJ_MODE_TELEOP_VALUE = 3;


    public final int getNumber() { return value; }

    public static EmcTrajectoryModeType valueOf(int value) {
      switch (value) {
        case 1: return EMC_TRAJ_MODE_FREE;
        case 2: return EMC_TRAJ_MODE_COORD;
        case 3: return EMC_TRAJ_MODE_TELEOP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcTrajectoryModeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcTrajectoryModeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcTrajectoryModeType>() {
            public EmcTrajectoryModeType findValueByNumber(int number) {
              return EmcTrajectoryModeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(4);
    }

    private static final EmcTrajectoryModeType[] VALUES = values();

    public static EmcTrajectoryModeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcTrajectoryModeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcTrajectoryModeType)
  }

  /**
   * Protobuf enum {@code pb.EmcCanonUnitsType}
   *
   * <pre>
   **
   * Types for EMC Canon units.
   * </pre>
   */
  public enum EmcCanonUnitsType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CANON_UNITS_INCHES = 1;</code>
     *
     * <pre>
     *&#47; Inches.
     * </pre>
     */
    CANON_UNITS_INCHES(0, 1),
    /**
     * <code>CANON_UNITS_MM = 2;</code>
     *
     * <pre>
     *&#47; Millimeters.
     * </pre>
     */
    CANON_UNITS_MM(1, 2),
    /**
     * <code>CANON_UNITS_CM = 3;</code>
     *
     * <pre>
     *&#47; Centimeters.
     * </pre>
     */
    CANON_UNITS_CM(2, 3),
    ;

    /**
     * <code>CANON_UNITS_INCHES = 1;</code>
     *
     * <pre>
     *&#47; Inches.
     * </pre>
     */
    public static final int CANON_UNITS_INCHES_VALUE = 1;
    /**
     * <code>CANON_UNITS_MM = 2;</code>
     *
     * <pre>
     *&#47; Millimeters.
     * </pre>
     */
    public static final int CANON_UNITS_MM_VALUE = 2;
    /**
     * <code>CANON_UNITS_CM = 3;</code>
     *
     * <pre>
     *&#47; Centimeters.
     * </pre>
     */
    public static final int CANON_UNITS_CM_VALUE = 3;


    public final int getNumber() { return value; }

    public static EmcCanonUnitsType valueOf(int value) {
      switch (value) {
        case 1: return CANON_UNITS_INCHES;
        case 2: return CANON_UNITS_MM;
        case 3: return CANON_UNITS_CM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcCanonUnitsType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcCanonUnitsType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcCanonUnitsType>() {
            public EmcCanonUnitsType findValueByNumber(int number) {
              return EmcCanonUnitsType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(5);
    }

    private static final EmcCanonUnitsType[] VALUES = values();

    public static EmcCanonUnitsType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcCanonUnitsType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcCanonUnitsType)
  }

  /**
   * Protobuf enum {@code pb.EmcLinearUnitsType}
   *
   * <pre>
   **
   * Types for EMC linear units.
   * </pre>
   */
  public enum EmcLinearUnitsType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LINEAR_UNITS_INCHES = 1;</code>
     *
     * <pre>
     *&#47; Inches.
     * </pre>
     */
    LINEAR_UNITS_INCHES(0, 1),
    /**
     * <code>LINEAR_UNITS_MM = 2;</code>
     *
     * <pre>
     *&#47; Millimeters.
     * </pre>
     */
    LINEAR_UNITS_MM(1, 2),
    /**
     * <code>LINEAR_UNITS_CM = 3;</code>
     *
     * <pre>
     *&#47; Centimeters.
     * </pre>
     */
    LINEAR_UNITS_CM(2, 3),
    ;

    /**
     * <code>LINEAR_UNITS_INCHES = 1;</code>
     *
     * <pre>
     *&#47; Inches.
     * </pre>
     */
    public static final int LINEAR_UNITS_INCHES_VALUE = 1;
    /**
     * <code>LINEAR_UNITS_MM = 2;</code>
     *
     * <pre>
     *&#47; Millimeters.
     * </pre>
     */
    public static final int LINEAR_UNITS_MM_VALUE = 2;
    /**
     * <code>LINEAR_UNITS_CM = 3;</code>
     *
     * <pre>
     *&#47; Centimeters.
     * </pre>
     */
    public static final int LINEAR_UNITS_CM_VALUE = 3;


    public final int getNumber() { return value; }

    public static EmcLinearUnitsType valueOf(int value) {
      switch (value) {
        case 1: return LINEAR_UNITS_INCHES;
        case 2: return LINEAR_UNITS_MM;
        case 3: return LINEAR_UNITS_CM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcLinearUnitsType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcLinearUnitsType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcLinearUnitsType>() {
            public EmcLinearUnitsType findValueByNumber(int number) {
              return EmcLinearUnitsType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(6);
    }

    private static final EmcLinearUnitsType[] VALUES = values();

    public static EmcLinearUnitsType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcLinearUnitsType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcLinearUnitsType)
  }

  /**
   * Protobuf enum {@code pb.EmcAngularUnitsType}
   *
   * <pre>
   **
   * Types for EMC angular units.
   * </pre>
   */
  public enum EmcAngularUnitsType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ANGULAR_UNITS_DEGREES = 1;</code>
     *
     * <pre>
     *&#47; Degrees.
     * </pre>
     */
    ANGULAR_UNITS_DEGREES(0, 1),
    /**
     * <code>ANGULAR_UNITS_RADIAN = 2;</code>
     *
     * <pre>
     *&#47; Radian.
     * </pre>
     */
    ANGULAR_UNITS_RADIAN(1, 2),
    /**
     * <code>ANGULAR_UNITS_GRAD = 3;</code>
     *
     * <pre>
     *&#47; Grad.
     * </pre>
     */
    ANGULAR_UNITS_GRAD(2, 3),
    ;

    /**
     * <code>ANGULAR_UNITS_DEGREES = 1;</code>
     *
     * <pre>
     *&#47; Degrees.
     * </pre>
     */
    public static final int ANGULAR_UNITS_DEGREES_VALUE = 1;
    /**
     * <code>ANGULAR_UNITS_RADIAN = 2;</code>
     *
     * <pre>
     *&#47; Radian.
     * </pre>
     */
    public static final int ANGULAR_UNITS_RADIAN_VALUE = 2;
    /**
     * <code>ANGULAR_UNITS_GRAD = 3;</code>
     *
     * <pre>
     *&#47; Grad.
     * </pre>
     */
    public static final int ANGULAR_UNITS_GRAD_VALUE = 3;


    public final int getNumber() { return value; }

    public static EmcAngularUnitsType valueOf(int value) {
      switch (value) {
        case 1: return ANGULAR_UNITS_DEGREES;
        case 2: return ANGULAR_UNITS_RADIAN;
        case 3: return ANGULAR_UNITS_GRAD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcAngularUnitsType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcAngularUnitsType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcAngularUnitsType>() {
            public EmcAngularUnitsType findValueByNumber(int number) {
              return EmcAngularUnitsType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(7);
    }

    private static final EmcAngularUnitsType[] VALUES = values();

    public static EmcAngularUnitsType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcAngularUnitsType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcAngularUnitsType)
  }

  /**
   * Protobuf enum {@code pb.EmcTimeUnitsType}
   *
   * <pre>
   **
   * Types for EMC time units.
   * </pre>
   */
  public enum EmcTimeUnitsType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TIME_UNITS_MINUTE = 1;</code>
     *
     * <pre>
     *&#47; Minutes.
     * </pre>
     */
    TIME_UNITS_MINUTE(0, 1),
    /**
     * <code>TIME_UNITS_SECOND = 2;</code>
     *
     * <pre>
     *&#47; Seconds.
     * </pre>
     */
    TIME_UNITS_SECOND(1, 2),
    ;

    /**
     * <code>TIME_UNITS_MINUTE = 1;</code>
     *
     * <pre>
     *&#47; Minutes.
     * </pre>
     */
    public static final int TIME_UNITS_MINUTE_VALUE = 1;
    /**
     * <code>TIME_UNITS_SECOND = 2;</code>
     *
     * <pre>
     *&#47; Seconds.
     * </pre>
     */
    public static final int TIME_UNITS_SECOND_VALUE = 2;


    public final int getNumber() { return value; }

    public static EmcTimeUnitsType valueOf(int value) {
      switch (value) {
        case 1: return TIME_UNITS_MINUTE;
        case 2: return TIME_UNITS_SECOND;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcTimeUnitsType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcTimeUnitsType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcTimeUnitsType>() {
            public EmcTimeUnitsType findValueByNumber(int number) {
              return EmcTimeUnitsType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(8);
    }

    private static final EmcTimeUnitsType[] VALUES = values();

    public static EmcTimeUnitsType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcTimeUnitsType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcTimeUnitsType)
  }

  /**
   * Protobuf enum {@code pb.EmcTaskModeType}
   *
   * <pre>
   **
   * Types for EMC task modes.
   * </pre>
   */
  public enum EmcTaskModeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_TASK_MODE_MANUAL = 1;</code>
     *
     * <pre>
     *&#47; Manual task mode. For example jogging.
     * </pre>
     */
    EMC_TASK_MODE_MANUAL(0, 1),
    /**
     * <code>EMC_TASK_MODE_AUTO = 2;</code>
     *
     * <pre>
     *&#47; Automatic task mode. For example program execution.
     * </pre>
     */
    EMC_TASK_MODE_AUTO(1, 2),
    /**
     * <code>EMC_TASK_MODE_MDI = 3;</code>
     *
     * <pre>
     *&#47; MDI task mode. MDI commands only.
     * </pre>
     */
    EMC_TASK_MODE_MDI(2, 3),
    ;

    /**
     * <code>EMC_TASK_MODE_MANUAL = 1;</code>
     *
     * <pre>
     *&#47; Manual task mode. For example jogging.
     * </pre>
     */
    public static final int EMC_TASK_MODE_MANUAL_VALUE = 1;
    /**
     * <code>EMC_TASK_MODE_AUTO = 2;</code>
     *
     * <pre>
     *&#47; Automatic task mode. For example program execution.
     * </pre>
     */
    public static final int EMC_TASK_MODE_AUTO_VALUE = 2;
    /**
     * <code>EMC_TASK_MODE_MDI = 3;</code>
     *
     * <pre>
     *&#47; MDI task mode. MDI commands only.
     * </pre>
     */
    public static final int EMC_TASK_MODE_MDI_VALUE = 3;


    public final int getNumber() { return value; }

    public static EmcTaskModeType valueOf(int value) {
      switch (value) {
        case 1: return EMC_TASK_MODE_MANUAL;
        case 2: return EMC_TASK_MODE_AUTO;
        case 3: return EMC_TASK_MODE_MDI;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcTaskModeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcTaskModeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcTaskModeType>() {
            public EmcTaskModeType findValueByNumber(int number) {
              return EmcTaskModeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(9);
    }

    private static final EmcTaskModeType[] VALUES = values();

    public static EmcTaskModeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcTaskModeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcTaskModeType)
  }

  /**
   * Protobuf enum {@code pb.EmcTaskStateType}
   *
   * <pre>
   **
   * Types for EMC task state.
   * </pre>
   */
  public enum EmcTaskStateType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_TASK_STATE_ESTOP = 1;</code>
     *
     * <pre>
     *&#47; Task is in ESTOP.
     * </pre>
     */
    EMC_TASK_STATE_ESTOP(0, 1),
    /**
     * <code>EMC_TASK_STATE_ESTOP_RESET = 2;</code>
     *
     * <pre>
     *&#47; Task is trying to reset an ESTOP.
     * </pre>
     */
    EMC_TASK_STATE_ESTOP_RESET(1, 2),
    /**
     * <code>EMC_TASK_STATE_OFF = 3;</code>
     *
     * <pre>
     *&#47; Task is turned off (no ESTOP)
     * </pre>
     */
    EMC_TASK_STATE_OFF(2, 3),
    /**
     * <code>EMC_TASK_STATE_ON = 4;</code>
     *
     * <pre>
     *&#47; Task is turned on.
     * </pre>
     */
    EMC_TASK_STATE_ON(3, 4),
    ;

    /**
     * <code>EMC_TASK_STATE_ESTOP = 1;</code>
     *
     * <pre>
     *&#47; Task is in ESTOP.
     * </pre>
     */
    public static final int EMC_TASK_STATE_ESTOP_VALUE = 1;
    /**
     * <code>EMC_TASK_STATE_ESTOP_RESET = 2;</code>
     *
     * <pre>
     *&#47; Task is trying to reset an ESTOP.
     * </pre>
     */
    public static final int EMC_TASK_STATE_ESTOP_RESET_VALUE = 2;
    /**
     * <code>EMC_TASK_STATE_OFF = 3;</code>
     *
     * <pre>
     *&#47; Task is turned off (no ESTOP)
     * </pre>
     */
    public static final int EMC_TASK_STATE_OFF_VALUE = 3;
    /**
     * <code>EMC_TASK_STATE_ON = 4;</code>
     *
     * <pre>
     *&#47; Task is turned on.
     * </pre>
     */
    public static final int EMC_TASK_STATE_ON_VALUE = 4;


    public final int getNumber() { return value; }

    public static EmcTaskStateType valueOf(int value) {
      switch (value) {
        case 1: return EMC_TASK_STATE_ESTOP;
        case 2: return EMC_TASK_STATE_ESTOP_RESET;
        case 3: return EMC_TASK_STATE_OFF;
        case 4: return EMC_TASK_STATE_ON;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcTaskStateType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcTaskStateType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcTaskStateType>() {
            public EmcTaskStateType findValueByNumber(int number) {
              return EmcTaskStateType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(10);
    }

    private static final EmcTaskStateType[] VALUES = values();

    public static EmcTaskStateType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcTaskStateType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcTaskStateType)
  }

  /**
   * Protobuf enum {@code pb.EmcAxisType}
   *
   * <pre>
   **
   * Axis types.
   * </pre>
   */
  public enum EmcAxisType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_AXIS_LINEAR = 1;</code>
     *
     * <pre>
     *&#47; Axis is using linear units.
     * </pre>
     */
    EMC_AXIS_LINEAR(0, 1),
    /**
     * <code>EMC_AXIS_ANGULAR = 2;</code>
     *
     * <pre>
     *&#47; Axis is using angular units.
     * </pre>
     */
    EMC_AXIS_ANGULAR(1, 2),
    ;

    /**
     * <code>EMC_AXIS_LINEAR = 1;</code>
     *
     * <pre>
     *&#47; Axis is using linear units.
     * </pre>
     */
    public static final int EMC_AXIS_LINEAR_VALUE = 1;
    /**
     * <code>EMC_AXIS_ANGULAR = 2;</code>
     *
     * <pre>
     *&#47; Axis is using angular units.
     * </pre>
     */
    public static final int EMC_AXIS_ANGULAR_VALUE = 2;


    public final int getNumber() { return value; }

    public static EmcAxisType valueOf(int value) {
      switch (value) {
        case 1: return EMC_AXIS_LINEAR;
        case 2: return EMC_AXIS_ANGULAR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcAxisType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcAxisType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcAxisType>() {
            public EmcAxisType findValueByNumber(int number) {
              return EmcAxisType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(11);
    }

    private static final EmcAxisType[] VALUES = values();

    public static EmcAxisType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcAxisType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcAxisType)
  }

  /**
   * Protobuf enum {@code pb.EmcPositionOffsetType}
   *
   * <pre>
   **
   * Position offset types.
   * </pre>
   */
  public enum EmcPositionOffsetType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_CONFIG_RELATIVE_OFFSET = 1;</code>
     *
     * <pre>
     *&#47; Offset in relative coordinates.
     * </pre>
     */
    EMC_CONFIG_RELATIVE_OFFSET(0, 1),
    /**
     * <code>EMC_CONFIG_MACHINE_OFFSET = 2;</code>
     *
     * <pre>
     *&#47; Offset in machine coordinates.
     * </pre>
     */
    EMC_CONFIG_MACHINE_OFFSET(1, 2),
    ;

    /**
     * <code>EMC_CONFIG_RELATIVE_OFFSET = 1;</code>
     *
     * <pre>
     *&#47; Offset in relative coordinates.
     * </pre>
     */
    public static final int EMC_CONFIG_RELATIVE_OFFSET_VALUE = 1;
    /**
     * <code>EMC_CONFIG_MACHINE_OFFSET = 2;</code>
     *
     * <pre>
     *&#47; Offset in machine coordinates.
     * </pre>
     */
    public static final int EMC_CONFIG_MACHINE_OFFSET_VALUE = 2;


    public final int getNumber() { return value; }

    public static EmcPositionOffsetType valueOf(int value) {
      switch (value) {
        case 1: return EMC_CONFIG_RELATIVE_OFFSET;
        case 2: return EMC_CONFIG_MACHINE_OFFSET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcPositionOffsetType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcPositionOffsetType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcPositionOffsetType>() {
            public EmcPositionOffsetType findValueByNumber(int number) {
              return EmcPositionOffsetType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(12);
    }

    private static final EmcPositionOffsetType[] VALUES = values();

    public static EmcPositionOffsetType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcPositionOffsetType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcPositionOffsetType)
  }

  /**
   * Protobuf enum {@code pb.EmcPositionFeedbackType}
   *
   * <pre>
   **
   * Position feedback types.
   * </pre>
   */
  public enum EmcPositionFeedbackType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EMC_CONFIG_ACTUAL_FEEDBACK = 1;</code>
     *
     * <pre>
     *&#47; Feed back current position.
     * </pre>
     */
    EMC_CONFIG_ACTUAL_FEEDBACK(0, 1),
    /**
     * <code>EMC_CONFIG_COMMANDED_FEEDBACK = 2;</code>
     *
     * <pre>
     *&#47; Feed back commanded position.
     * </pre>
     */
    EMC_CONFIG_COMMANDED_FEEDBACK(1, 2),
    ;

    /**
     * <code>EMC_CONFIG_ACTUAL_FEEDBACK = 1;</code>
     *
     * <pre>
     *&#47; Feed back current position.
     * </pre>
     */
    public static final int EMC_CONFIG_ACTUAL_FEEDBACK_VALUE = 1;
    /**
     * <code>EMC_CONFIG_COMMANDED_FEEDBACK = 2;</code>
     *
     * <pre>
     *&#47; Feed back commanded position.
     * </pre>
     */
    public static final int EMC_CONFIG_COMMANDED_FEEDBACK_VALUE = 2;


    public final int getNumber() { return value; }

    public static EmcPositionFeedbackType valueOf(int value) {
      switch (value) {
        case 1: return EMC_CONFIG_ACTUAL_FEEDBACK;
        case 2: return EMC_CONFIG_COMMANDED_FEEDBACK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EmcPositionFeedbackType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EmcPositionFeedbackType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EmcPositionFeedbackType>() {
            public EmcPositionFeedbackType findValueByNumber(int number) {
              return EmcPositionFeedbackType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return pb.Status.getDescriptor().getEnumTypes().get(13);
    }

    private static final EmcPositionFeedbackType[] VALUES = values();

    public static EmcPositionFeedbackType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EmcPositionFeedbackType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.EmcPositionFeedbackType)
  }

  public interface EmcToolDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcToolData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Tool table index (not tool id).
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Tool table index (not tool id).
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     *&#47; ID/number of the tool.
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     *&#47; ID/number of the tool.
     * </pre>
     */
    int getId();

    /**
     * <code>optional double diameter = 12;</code>
     *
     * <pre>
     *optional double         xOffset     = 3; offsets replaced by Position message
     *optional double         yOffset     = 4;
     *optional double         zOffset     = 5;
     *optional double         aOffset     = 6;
     *optional double         bOffset     = 7;
     *optional double         cOffset     = 8;
     *optional double         uOffset     = 9;
     *optional double         vOffset     = 10;
     *optional double         wOffset     = 11;
     * </pre>
     */
    boolean hasDiameter();
    /**
     * <code>optional double diameter = 12;</code>
     *
     * <pre>
     *optional double         xOffset     = 3; offsets replaced by Position message
     *optional double         yOffset     = 4;
     *optional double         zOffset     = 5;
     *optional double         aOffset     = 6;
     *optional double         bOffset     = 7;
     *optional double         cOffset     = 8;
     *optional double         uOffset     = 9;
     *optional double         vOffset     = 10;
     *optional double         wOffset     = 11;
     * </pre>
     */
    double getDiameter();

    /**
     * <code>optional double frontangle = 13;</code>
     *
     * <pre>
     *&#47; Front angle of the tool (only on lathe).
     * </pre>
     */
    boolean hasFrontangle();
    /**
     * <code>optional double frontangle = 13;</code>
     *
     * <pre>
     *&#47; Front angle of the tool (only on lathe).
     * </pre>
     */
    double getFrontangle();

    /**
     * <code>optional double backangle = 14;</code>
     *
     * <pre>
     *&#47; Back angle of the tool (only on lathe).
     * </pre>
     */
    boolean hasBackangle();
    /**
     * <code>optional double backangle = 14;</code>
     *
     * <pre>
     *&#47; Back angle of the tool (only on lathe).
     * </pre>
     */
    double getBackangle();

    /**
     * <code>optional int32 orientation = 15;</code>
     *
     * <pre>
     *&#47; Orientation of the tool (lathe only, 0-9).
     * </pre>
     */
    boolean hasOrientation();
    /**
     * <code>optional int32 orientation = 15;</code>
     *
     * <pre>
     *&#47; Orientation of the tool (lathe only, 0-9).
     * </pre>
     */
    int getOrientation();

    /**
     * <code>optional .pb.Position offset = 16;</code>
     *
     * <pre>
     *&#47; Position offset of the tool.
     * </pre>
     */
    boolean hasOffset();
    /**
     * <code>optional .pb.Position offset = 16;</code>
     *
     * <pre>
     *&#47; Position offset of the tool.
     * </pre>
     */
    pb.PreviewOuterClass.Position getOffset();
    /**
     * <code>optional .pb.Position offset = 16;</code>
     *
     * <pre>
     *&#47; Position offset of the tool.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getOffsetOrBuilder();
  }
  /**
   * Protobuf type {@code pb.EmcToolData}
   *
   * <pre>
   **
   * Tool table data.
   * </pre>
   */
  public static final class EmcToolData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcToolData)
      EmcToolDataOrBuilder {
    // Use EmcToolData.newBuilder() to construct.
    private EmcToolData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcToolData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcToolData defaultInstance;
    public static EmcToolData getDefaultInstance() {
      return defaultInstance;
    }

    public EmcToolData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcToolData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              id_ = input.readInt32();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000004;
              diameter_ = input.readDouble();
              break;
            }
            case 105: {
              bitField0_ |= 0x00000008;
              frontangle_ = input.readDouble();
              break;
            }
            case 113: {
              bitField0_ |= 0x00000010;
              backangle_ = input.readDouble();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000020;
              orientation_ = input.readInt32();
              break;
            }
            case 130: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = offset_.toBuilder();
              }
              offset_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(offset_);
                offset_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcToolData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcToolData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcToolData.class, pb.Status.EmcToolData.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcToolData> PARSER =
        new com.google.protobuf.AbstractParser<EmcToolData>() {
      public EmcToolData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcToolData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcToolData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Tool table index (not tool id).
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Tool table index (not tool id).
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     *&#47; ID/number of the tool.
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 id = 2;</code>
     *
     * <pre>
     *&#47; ID/number of the tool.
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int DIAMETER_FIELD_NUMBER = 12;
    private double diameter_;
    /**
     * <code>optional double diameter = 12;</code>
     *
     * <pre>
     *optional double         xOffset     = 3; offsets replaced by Position message
     *optional double         yOffset     = 4;
     *optional double         zOffset     = 5;
     *optional double         aOffset     = 6;
     *optional double         bOffset     = 7;
     *optional double         cOffset     = 8;
     *optional double         uOffset     = 9;
     *optional double         vOffset     = 10;
     *optional double         wOffset     = 11;
     * </pre>
     */
    public boolean hasDiameter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double diameter = 12;</code>
     *
     * <pre>
     *optional double         xOffset     = 3; offsets replaced by Position message
     *optional double         yOffset     = 4;
     *optional double         zOffset     = 5;
     *optional double         aOffset     = 6;
     *optional double         bOffset     = 7;
     *optional double         cOffset     = 8;
     *optional double         uOffset     = 9;
     *optional double         vOffset     = 10;
     *optional double         wOffset     = 11;
     * </pre>
     */
    public double getDiameter() {
      return diameter_;
    }

    public static final int FRONTANGLE_FIELD_NUMBER = 13;
    private double frontangle_;
    /**
     * <code>optional double frontangle = 13;</code>
     *
     * <pre>
     *&#47; Front angle of the tool (only on lathe).
     * </pre>
     */
    public boolean hasFrontangle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double frontangle = 13;</code>
     *
     * <pre>
     *&#47; Front angle of the tool (only on lathe).
     * </pre>
     */
    public double getFrontangle() {
      return frontangle_;
    }

    public static final int BACKANGLE_FIELD_NUMBER = 14;
    private double backangle_;
    /**
     * <code>optional double backangle = 14;</code>
     *
     * <pre>
     *&#47; Back angle of the tool (only on lathe).
     * </pre>
     */
    public boolean hasBackangle() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double backangle = 14;</code>
     *
     * <pre>
     *&#47; Back angle of the tool (only on lathe).
     * </pre>
     */
    public double getBackangle() {
      return backangle_;
    }

    public static final int ORIENTATION_FIELD_NUMBER = 15;
    private int orientation_;
    /**
     * <code>optional int32 orientation = 15;</code>
     *
     * <pre>
     *&#47; Orientation of the tool (lathe only, 0-9).
     * </pre>
     */
    public boolean hasOrientation() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 orientation = 15;</code>
     *
     * <pre>
     *&#47; Orientation of the tool (lathe only, 0-9).
     * </pre>
     */
    public int getOrientation() {
      return orientation_;
    }

    public static final int OFFSET_FIELD_NUMBER = 16;
    private pb.PreviewOuterClass.Position offset_;
    /**
     * <code>optional .pb.Position offset = 16;</code>
     *
     * <pre>
     *&#47; Position offset of the tool.
     * </pre>
     */
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .pb.Position offset = 16;</code>
     *
     * <pre>
     *&#47; Position offset of the tool.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getOffset() {
      return offset_;
    }
    /**
     * <code>optional .pb.Position offset = 16;</code>
     *
     * <pre>
     *&#47; Position offset of the tool.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getOffsetOrBuilder() {
      return offset_;
    }

    private void initFields() {
      index_ = 0;
      id_ = 0;
      diameter_ = 0D;
      frontangle_ = 0D;
      backangle_ = 0D;
      orientation_ = 0;
      offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(12, diameter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(13, frontangle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(14, backangle_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(15, orientation_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(16, offset_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, diameter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, frontangle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, backangle_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, orientation_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, offset_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcToolData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcToolData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcToolData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcToolData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcToolData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcToolData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcToolData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcToolData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcToolData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcToolData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcToolData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcToolData}
     *
     * <pre>
     **
     * Tool table data.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcToolData)
        pb.Status.EmcToolDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcToolData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcToolData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcToolData.class, pb.Status.EmcToolData.Builder.class);
      }

      // Construct using pb.Status.EmcToolData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOffsetFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        diameter_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        frontangle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        backangle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        orientation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (offsetBuilder_ == null) {
          offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          offsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcToolData_descriptor;
      }

      public pb.Status.EmcToolData getDefaultInstanceForType() {
        return pb.Status.EmcToolData.getDefaultInstance();
      }

      public pb.Status.EmcToolData build() {
        pb.Status.EmcToolData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcToolData buildPartial() {
        pb.Status.EmcToolData result = new pb.Status.EmcToolData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.diameter_ = diameter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.frontangle_ = frontangle_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.backangle_ = backangle_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.orientation_ = orientation_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (offsetBuilder_ == null) {
          result.offset_ = offset_;
        } else {
          result.offset_ = offsetBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcToolData) {
          return mergeFrom((pb.Status.EmcToolData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcToolData other) {
        if (other == pb.Status.EmcToolData.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasDiameter()) {
          setDiameter(other.getDiameter());
        }
        if (other.hasFrontangle()) {
          setFrontangle(other.getFrontangle());
        }
        if (other.hasBackangle()) {
          setBackangle(other.getBackangle());
        }
        if (other.hasOrientation()) {
          setOrientation(other.getOrientation());
        }
        if (other.hasOffset()) {
          mergeOffset(other.getOffset());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcToolData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcToolData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Tool table index (not tool id).
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Tool table index (not tool id).
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Tool table index (not tool id).
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Tool table index (not tool id).
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       *&#47; ID/number of the tool.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       *&#47; ID/number of the tool.
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       *&#47; ID/number of the tool.
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000002;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 2;</code>
       *
       * <pre>
       *&#47; ID/number of the tool.
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        onChanged();
        return this;
      }

      private double diameter_ ;
      /**
       * <code>optional double diameter = 12;</code>
       *
       * <pre>
       *optional double         xOffset     = 3; offsets replaced by Position message
       *optional double         yOffset     = 4;
       *optional double         zOffset     = 5;
       *optional double         aOffset     = 6;
       *optional double         bOffset     = 7;
       *optional double         cOffset     = 8;
       *optional double         uOffset     = 9;
       *optional double         vOffset     = 10;
       *optional double         wOffset     = 11;
       * </pre>
       */
      public boolean hasDiameter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double diameter = 12;</code>
       *
       * <pre>
       *optional double         xOffset     = 3; offsets replaced by Position message
       *optional double         yOffset     = 4;
       *optional double         zOffset     = 5;
       *optional double         aOffset     = 6;
       *optional double         bOffset     = 7;
       *optional double         cOffset     = 8;
       *optional double         uOffset     = 9;
       *optional double         vOffset     = 10;
       *optional double         wOffset     = 11;
       * </pre>
       */
      public double getDiameter() {
        return diameter_;
      }
      /**
       * <code>optional double diameter = 12;</code>
       *
       * <pre>
       *optional double         xOffset     = 3; offsets replaced by Position message
       *optional double         yOffset     = 4;
       *optional double         zOffset     = 5;
       *optional double         aOffset     = 6;
       *optional double         bOffset     = 7;
       *optional double         cOffset     = 8;
       *optional double         uOffset     = 9;
       *optional double         vOffset     = 10;
       *optional double         wOffset     = 11;
       * </pre>
       */
      public Builder setDiameter(double value) {
        bitField0_ |= 0x00000004;
        diameter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double diameter = 12;</code>
       *
       * <pre>
       *optional double         xOffset     = 3; offsets replaced by Position message
       *optional double         yOffset     = 4;
       *optional double         zOffset     = 5;
       *optional double         aOffset     = 6;
       *optional double         bOffset     = 7;
       *optional double         cOffset     = 8;
       *optional double         uOffset     = 9;
       *optional double         vOffset     = 10;
       *optional double         wOffset     = 11;
       * </pre>
       */
      public Builder clearDiameter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        diameter_ = 0D;
        onChanged();
        return this;
      }

      private double frontangle_ ;
      /**
       * <code>optional double frontangle = 13;</code>
       *
       * <pre>
       *&#47; Front angle of the tool (only on lathe).
       * </pre>
       */
      public boolean hasFrontangle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double frontangle = 13;</code>
       *
       * <pre>
       *&#47; Front angle of the tool (only on lathe).
       * </pre>
       */
      public double getFrontangle() {
        return frontangle_;
      }
      /**
       * <code>optional double frontangle = 13;</code>
       *
       * <pre>
       *&#47; Front angle of the tool (only on lathe).
       * </pre>
       */
      public Builder setFrontangle(double value) {
        bitField0_ |= 0x00000008;
        frontangle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double frontangle = 13;</code>
       *
       * <pre>
       *&#47; Front angle of the tool (only on lathe).
       * </pre>
       */
      public Builder clearFrontangle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        frontangle_ = 0D;
        onChanged();
        return this;
      }

      private double backangle_ ;
      /**
       * <code>optional double backangle = 14;</code>
       *
       * <pre>
       *&#47; Back angle of the tool (only on lathe).
       * </pre>
       */
      public boolean hasBackangle() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double backangle = 14;</code>
       *
       * <pre>
       *&#47; Back angle of the tool (only on lathe).
       * </pre>
       */
      public double getBackangle() {
        return backangle_;
      }
      /**
       * <code>optional double backangle = 14;</code>
       *
       * <pre>
       *&#47; Back angle of the tool (only on lathe).
       * </pre>
       */
      public Builder setBackangle(double value) {
        bitField0_ |= 0x00000010;
        backangle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double backangle = 14;</code>
       *
       * <pre>
       *&#47; Back angle of the tool (only on lathe).
       * </pre>
       */
      public Builder clearBackangle() {
        bitField0_ = (bitField0_ & ~0x00000010);
        backangle_ = 0D;
        onChanged();
        return this;
      }

      private int orientation_ ;
      /**
       * <code>optional int32 orientation = 15;</code>
       *
       * <pre>
       *&#47; Orientation of the tool (lathe only, 0-9).
       * </pre>
       */
      public boolean hasOrientation() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 orientation = 15;</code>
       *
       * <pre>
       *&#47; Orientation of the tool (lathe only, 0-9).
       * </pre>
       */
      public int getOrientation() {
        return orientation_;
      }
      /**
       * <code>optional int32 orientation = 15;</code>
       *
       * <pre>
       *&#47; Orientation of the tool (lathe only, 0-9).
       * </pre>
       */
      public Builder setOrientation(int value) {
        bitField0_ |= 0x00000020;
        orientation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 orientation = 15;</code>
       *
       * <pre>
       *&#47; Orientation of the tool (lathe only, 0-9).
       * </pre>
       */
      public Builder clearOrientation() {
        bitField0_ = (bitField0_ & ~0x00000020);
        orientation_ = 0;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> offsetBuilder_;
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public boolean hasOffset() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getOffset() {
        if (offsetBuilder_ == null) {
          return offset_;
        } else {
          return offsetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public Builder setOffset(pb.PreviewOuterClass.Position value) {
        if (offsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          offset_ = value;
          onChanged();
        } else {
          offsetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public Builder setOffset(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (offsetBuilder_ == null) {
          offset_ = builderForValue.build();
          onChanged();
        } else {
          offsetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public Builder mergeOffset(pb.PreviewOuterClass.Position value) {
        if (offsetBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              offset_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            offset_ =
              pb.PreviewOuterClass.Position.newBuilder(offset_).mergeFrom(value).buildPartial();
          } else {
            offset_ = value;
          }
          onChanged();
        } else {
          offsetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public Builder clearOffset() {
        if (offsetBuilder_ == null) {
          offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          offsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getOffsetBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getOffsetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getOffsetOrBuilder() {
        if (offsetBuilder_ != null) {
          return offsetBuilder_.getMessageOrBuilder();
        } else {
          return offset_;
        }
      }
      /**
       * <code>optional .pb.Position offset = 16;</code>
       *
       * <pre>
       *&#47; Position offset of the tool.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getOffsetFieldBuilder() {
        if (offsetBuilder_ == null) {
          offsetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getOffset(),
                  getParentForChildren(),
                  isClean());
          offset_ = null;
        }
        return offsetBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcToolData)
    }

    static {
      defaultInstance = new EmcToolData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcToolData)
  }

  public interface EmcStatusMotionAxisOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusMotionAxis)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional bool enabled = 2;</code>
     *
     * <pre>
     *&#47; Axis is enabled.
     * </pre>
     */
    boolean hasEnabled();
    /**
     * <code>optional bool enabled = 2;</code>
     *
     * <pre>
     *&#47; Axis is enabled.
     * </pre>
     */
    boolean getEnabled();

    /**
     * <code>optional bool fault = 3;</code>
     *
     * <pre>
     *&#47; Axis amp fault.
     * </pre>
     */
    boolean hasFault();
    /**
     * <code>optional bool fault = 3;</code>
     *
     * <pre>
     *&#47; Axis amp fault.
     * </pre>
     */
    boolean getFault();

    /**
     * <code>optional double ferror_current = 4;</code>
     *
     * <pre>
     *&#47; Current following error.
     * </pre>
     */
    boolean hasFerrorCurrent();
    /**
     * <code>optional double ferror_current = 4;</code>
     *
     * <pre>
     *&#47; Current following error.
     * </pre>
     */
    double getFerrorCurrent();

    /**
     * <code>optional double ferror_highmark = 5;</code>
     *
     * <pre>
     *&#47; Magnitude of maximum following error.
     * </pre>
     */
    boolean hasFerrorHighmark();
    /**
     * <code>optional double ferror_highmark = 5;</code>
     *
     * <pre>
     *&#47; Magnitude of maximum following error.
     * </pre>
     */
    double getFerrorHighmark();

    /**
     * <code>optional bool homed = 6;</code>
     *
     * <pre>
     *&#47; Axis has been homed.
     * </pre>
     */
    boolean hasHomed();
    /**
     * <code>optional bool homed = 6;</code>
     *
     * <pre>
     *&#47; Axis has been homed.
     * </pre>
     */
    boolean getHomed();

    /**
     * <code>optional bool homing = 7;</code>
     *
     * <pre>
     *&#47; Homing currently progress.
     * </pre>
     */
    boolean hasHoming();
    /**
     * <code>optional bool homing = 7;</code>
     *
     * <pre>
     *&#47; Homing currently progress.
     * </pre>
     */
    boolean getHoming();

    /**
     * <code>optional bool inpos = 8;</code>
     *
     * <pre>
     *&#47; Axis is in position.
     * </pre>
     */
    boolean hasInpos();
    /**
     * <code>optional bool inpos = 8;</code>
     *
     * <pre>
     *&#47; Axis is in position.
     * </pre>
     */
    boolean getInpos();

    /**
     * <code>optional double input = 9;</code>
     *
     * <pre>
     *&#47; Current input position.
     * </pre>
     */
    boolean hasInput();
    /**
     * <code>optional double input = 9;</code>
     *
     * <pre>
     *&#47; Current input position.
     * </pre>
     */
    double getInput();

    /**
     * <code>optional bool max_hard_limit = 10;</code>
     *
     * <pre>
     *&#47; Maximum hard limit exceeded.
     * </pre>
     */
    boolean hasMaxHardLimit();
    /**
     * <code>optional bool max_hard_limit = 10;</code>
     *
     * <pre>
     *&#47; Maximum hard limit exceeded.
     * </pre>
     */
    boolean getMaxHardLimit();

    /**
     * <code>optional bool max_soft_limit = 11;</code>
     *
     * <pre>
     *&#47; Maximum position limit was exceeded.
     * </pre>
     */
    boolean hasMaxSoftLimit();
    /**
     * <code>optional bool max_soft_limit = 11;</code>
     *
     * <pre>
     *&#47; Maximum position limit was exceeded.
     * </pre>
     */
    boolean getMaxSoftLimit();

    /**
     * <code>optional bool min_hard_limit = 12;</code>
     *
     * <pre>
     *&#47; Minimum hard limit was exceeded.
     * </pre>
     */
    boolean hasMinHardLimit();
    /**
     * <code>optional bool min_hard_limit = 12;</code>
     *
     * <pre>
     *&#47; Minimum hard limit was exceeded.
     * </pre>
     */
    boolean getMinHardLimit();

    /**
     * <code>optional bool min_soft_limit = 13;</code>
     *
     * <pre>
     *&#47; Minimum position limit was exceeded.
     * </pre>
     */
    boolean hasMinSoftLimit();
    /**
     * <code>optional bool min_soft_limit = 13;</code>
     *
     * <pre>
     *&#47; Minimum position limit was exceeded.
     * </pre>
     */
    boolean getMinSoftLimit();

    /**
     * <code>optional double output = 14;</code>
     *
     * <pre>
     *&#47; Commanded output position.
     * </pre>
     */
    boolean hasOutput();
    /**
     * <code>optional double output = 14;</code>
     *
     * <pre>
     *&#47; Commanded output position.
     * </pre>
     */
    double getOutput();

    /**
     * <code>optional bool override_limits = 15;</code>
     *
     * <pre>
     *&#47; Limits are overridden.
     * </pre>
     */
    boolean hasOverrideLimits();
    /**
     * <code>optional bool override_limits = 15;</code>
     *
     * <pre>
     *&#47; Limits are overridden.
     * </pre>
     */
    boolean getOverrideLimits();

    /**
     * <code>optional double velocity = 16;</code>
     *
     * <pre>
     *&#47; Current velocity.
     * </pre>
     */
    boolean hasVelocity();
    /**
     * <code>optional double velocity = 16;</code>
     *
     * <pre>
     *&#47; Current velocity.
     * </pre>
     */
    double getVelocity();
  }
  /**
   * Protobuf type {@code pb.EmcStatusMotionAxis}
   *
   * <pre>
   **
   * Stores per axis information from motion.
   * </pre>
   */
  public static final class EmcStatusMotionAxis extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusMotionAxis)
      EmcStatusMotionAxisOrBuilder {
    // Use EmcStatusMotionAxis.newBuilder() to construct.
    private EmcStatusMotionAxis(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusMotionAxis(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusMotionAxis defaultInstance;
    public static EmcStatusMotionAxis getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusMotionAxis getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusMotionAxis(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              enabled_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              fault_ = input.readBool();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              ferrorCurrent_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              ferrorHighmark_ = input.readDouble();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              homed_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              homing_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              inpos_ = input.readBool();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              input_ = input.readDouble();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              maxHardLimit_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              maxSoftLimit_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              minHardLimit_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              minSoftLimit_ = input.readBool();
              break;
            }
            case 113: {
              bitField0_ |= 0x00002000;
              output_ = input.readDouble();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              overrideLimits_ = input.readBool();
              break;
            }
            case 129: {
              bitField0_ |= 0x00008000;
              velocity_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusMotionAxis_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusMotionAxis_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusMotionAxis.class, pb.Status.EmcStatusMotionAxis.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusMotionAxis> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusMotionAxis>() {
      public EmcStatusMotionAxis parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusMotionAxis(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusMotionAxis> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int ENABLED_FIELD_NUMBER = 2;
    private boolean enabled_;
    /**
     * <code>optional bool enabled = 2;</code>
     *
     * <pre>
     *&#47; Axis is enabled.
     * </pre>
     */
    public boolean hasEnabled() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool enabled = 2;</code>
     *
     * <pre>
     *&#47; Axis is enabled.
     * </pre>
     */
    public boolean getEnabled() {
      return enabled_;
    }

    public static final int FAULT_FIELD_NUMBER = 3;
    private boolean fault_;
    /**
     * <code>optional bool fault = 3;</code>
     *
     * <pre>
     *&#47; Axis amp fault.
     * </pre>
     */
    public boolean hasFault() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool fault = 3;</code>
     *
     * <pre>
     *&#47; Axis amp fault.
     * </pre>
     */
    public boolean getFault() {
      return fault_;
    }

    public static final int FERROR_CURRENT_FIELD_NUMBER = 4;
    private double ferrorCurrent_;
    /**
     * <code>optional double ferror_current = 4;</code>
     *
     * <pre>
     *&#47; Current following error.
     * </pre>
     */
    public boolean hasFerrorCurrent() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double ferror_current = 4;</code>
     *
     * <pre>
     *&#47; Current following error.
     * </pre>
     */
    public double getFerrorCurrent() {
      return ferrorCurrent_;
    }

    public static final int FERROR_HIGHMARK_FIELD_NUMBER = 5;
    private double ferrorHighmark_;
    /**
     * <code>optional double ferror_highmark = 5;</code>
     *
     * <pre>
     *&#47; Magnitude of maximum following error.
     * </pre>
     */
    public boolean hasFerrorHighmark() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double ferror_highmark = 5;</code>
     *
     * <pre>
     *&#47; Magnitude of maximum following error.
     * </pre>
     */
    public double getFerrorHighmark() {
      return ferrorHighmark_;
    }

    public static final int HOMED_FIELD_NUMBER = 6;
    private boolean homed_;
    /**
     * <code>optional bool homed = 6;</code>
     *
     * <pre>
     *&#47; Axis has been homed.
     * </pre>
     */
    public boolean hasHomed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool homed = 6;</code>
     *
     * <pre>
     *&#47; Axis has been homed.
     * </pre>
     */
    public boolean getHomed() {
      return homed_;
    }

    public static final int HOMING_FIELD_NUMBER = 7;
    private boolean homing_;
    /**
     * <code>optional bool homing = 7;</code>
     *
     * <pre>
     *&#47; Homing currently progress.
     * </pre>
     */
    public boolean hasHoming() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool homing = 7;</code>
     *
     * <pre>
     *&#47; Homing currently progress.
     * </pre>
     */
    public boolean getHoming() {
      return homing_;
    }

    public static final int INPOS_FIELD_NUMBER = 8;
    private boolean inpos_;
    /**
     * <code>optional bool inpos = 8;</code>
     *
     * <pre>
     *&#47; Axis is in position.
     * </pre>
     */
    public boolean hasInpos() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool inpos = 8;</code>
     *
     * <pre>
     *&#47; Axis is in position.
     * </pre>
     */
    public boolean getInpos() {
      return inpos_;
    }

    public static final int INPUT_FIELD_NUMBER = 9;
    private double input_;
    /**
     * <code>optional double input = 9;</code>
     *
     * <pre>
     *&#47; Current input position.
     * </pre>
     */
    public boolean hasInput() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double input = 9;</code>
     *
     * <pre>
     *&#47; Current input position.
     * </pre>
     */
    public double getInput() {
      return input_;
    }

    public static final int MAX_HARD_LIMIT_FIELD_NUMBER = 10;
    private boolean maxHardLimit_;
    /**
     * <code>optional bool max_hard_limit = 10;</code>
     *
     * <pre>
     *&#47; Maximum hard limit exceeded.
     * </pre>
     */
    public boolean hasMaxHardLimit() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool max_hard_limit = 10;</code>
     *
     * <pre>
     *&#47; Maximum hard limit exceeded.
     * </pre>
     */
    public boolean getMaxHardLimit() {
      return maxHardLimit_;
    }

    public static final int MAX_SOFT_LIMIT_FIELD_NUMBER = 11;
    private boolean maxSoftLimit_;
    /**
     * <code>optional bool max_soft_limit = 11;</code>
     *
     * <pre>
     *&#47; Maximum position limit was exceeded.
     * </pre>
     */
    public boolean hasMaxSoftLimit() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool max_soft_limit = 11;</code>
     *
     * <pre>
     *&#47; Maximum position limit was exceeded.
     * </pre>
     */
    public boolean getMaxSoftLimit() {
      return maxSoftLimit_;
    }

    public static final int MIN_HARD_LIMIT_FIELD_NUMBER = 12;
    private boolean minHardLimit_;
    /**
     * <code>optional bool min_hard_limit = 12;</code>
     *
     * <pre>
     *&#47; Minimum hard limit was exceeded.
     * </pre>
     */
    public boolean hasMinHardLimit() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool min_hard_limit = 12;</code>
     *
     * <pre>
     *&#47; Minimum hard limit was exceeded.
     * </pre>
     */
    public boolean getMinHardLimit() {
      return minHardLimit_;
    }

    public static final int MIN_SOFT_LIMIT_FIELD_NUMBER = 13;
    private boolean minSoftLimit_;
    /**
     * <code>optional bool min_soft_limit = 13;</code>
     *
     * <pre>
     *&#47; Minimum position limit was exceeded.
     * </pre>
     */
    public boolean hasMinSoftLimit() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool min_soft_limit = 13;</code>
     *
     * <pre>
     *&#47; Minimum position limit was exceeded.
     * </pre>
     */
    public boolean getMinSoftLimit() {
      return minSoftLimit_;
    }

    public static final int OUTPUT_FIELD_NUMBER = 14;
    private double output_;
    /**
     * <code>optional double output = 14;</code>
     *
     * <pre>
     *&#47; Commanded output position.
     * </pre>
     */
    public boolean hasOutput() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional double output = 14;</code>
     *
     * <pre>
     *&#47; Commanded output position.
     * </pre>
     */
    public double getOutput() {
      return output_;
    }

    public static final int OVERRIDE_LIMITS_FIELD_NUMBER = 15;
    private boolean overrideLimits_;
    /**
     * <code>optional bool override_limits = 15;</code>
     *
     * <pre>
     *&#47; Limits are overridden.
     * </pre>
     */
    public boolean hasOverrideLimits() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bool override_limits = 15;</code>
     *
     * <pre>
     *&#47; Limits are overridden.
     * </pre>
     */
    public boolean getOverrideLimits() {
      return overrideLimits_;
    }

    public static final int VELOCITY_FIELD_NUMBER = 16;
    private double velocity_;
    /**
     * <code>optional double velocity = 16;</code>
     *
     * <pre>
     *&#47; Current velocity.
     * </pre>
     */
    public boolean hasVelocity() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional double velocity = 16;</code>
     *
     * <pre>
     *&#47; Current velocity.
     * </pre>
     */
    public double getVelocity() {
      return velocity_;
    }

    private void initFields() {
      index_ = 0;
      enabled_ = false;
      fault_ = false;
      ferrorCurrent_ = 0D;
      ferrorHighmark_ = 0D;
      homed_ = false;
      homing_ = false;
      inpos_ = false;
      input_ = 0D;
      maxHardLimit_ = false;
      maxSoftLimit_ = false;
      minHardLimit_ = false;
      minSoftLimit_ = false;
      output_ = 0D;
      overrideLimits_ = false;
      velocity_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, enabled_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, fault_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, ferrorCurrent_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, ferrorHighmark_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, homed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, homing_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, inpos_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, input_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, maxHardLimit_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, maxSoftLimit_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, minHardLimit_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(13, minSoftLimit_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(14, output_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, overrideLimits_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeDouble(16, velocity_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, enabled_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, fault_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, ferrorCurrent_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, ferrorHighmark_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, homed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, homing_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, inpos_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, input_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, maxHardLimit_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, maxSoftLimit_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, minHardLimit_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, minSoftLimit_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, output_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, overrideLimits_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, velocity_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusMotionAxis parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotionAxis parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusMotionAxis parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusMotionAxis parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusMotionAxis prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusMotionAxis}
     *
     * <pre>
     **
     * Stores per axis information from motion.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusMotionAxis)
        pb.Status.EmcStatusMotionAxisOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusMotionAxis_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusMotionAxis_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusMotionAxis.class, pb.Status.EmcStatusMotionAxis.Builder.class);
      }

      // Construct using pb.Status.EmcStatusMotionAxis.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        enabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        fault_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        ferrorCurrent_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        ferrorHighmark_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        homed_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        homing_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        inpos_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        input_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        maxHardLimit_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        maxSoftLimit_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        minHardLimit_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        minSoftLimit_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        output_ = 0D;
        bitField0_ = (bitField0_ & ~0x00002000);
        overrideLimits_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        velocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusMotionAxis_descriptor;
      }

      public pb.Status.EmcStatusMotionAxis getDefaultInstanceForType() {
        return pb.Status.EmcStatusMotionAxis.getDefaultInstance();
      }

      public pb.Status.EmcStatusMotionAxis build() {
        pb.Status.EmcStatusMotionAxis result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusMotionAxis buildPartial() {
        pb.Status.EmcStatusMotionAxis result = new pb.Status.EmcStatusMotionAxis(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.enabled_ = enabled_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.fault_ = fault_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.ferrorCurrent_ = ferrorCurrent_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ferrorHighmark_ = ferrorHighmark_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.homed_ = homed_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.homing_ = homing_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.inpos_ = inpos_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.input_ = input_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxHardLimit_ = maxHardLimit_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.maxSoftLimit_ = maxSoftLimit_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.minHardLimit_ = minHardLimit_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.minSoftLimit_ = minSoftLimit_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.output_ = output_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.overrideLimits_ = overrideLimits_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.velocity_ = velocity_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusMotionAxis) {
          return mergeFrom((pb.Status.EmcStatusMotionAxis)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusMotionAxis other) {
        if (other == pb.Status.EmcStatusMotionAxis.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasEnabled()) {
          setEnabled(other.getEnabled());
        }
        if (other.hasFault()) {
          setFault(other.getFault());
        }
        if (other.hasFerrorCurrent()) {
          setFerrorCurrent(other.getFerrorCurrent());
        }
        if (other.hasFerrorHighmark()) {
          setFerrorHighmark(other.getFerrorHighmark());
        }
        if (other.hasHomed()) {
          setHomed(other.getHomed());
        }
        if (other.hasHoming()) {
          setHoming(other.getHoming());
        }
        if (other.hasInpos()) {
          setInpos(other.getInpos());
        }
        if (other.hasInput()) {
          setInput(other.getInput());
        }
        if (other.hasMaxHardLimit()) {
          setMaxHardLimit(other.getMaxHardLimit());
        }
        if (other.hasMaxSoftLimit()) {
          setMaxSoftLimit(other.getMaxSoftLimit());
        }
        if (other.hasMinHardLimit()) {
          setMinHardLimit(other.getMinHardLimit());
        }
        if (other.hasMinSoftLimit()) {
          setMinSoftLimit(other.getMinSoftLimit());
        }
        if (other.hasOutput()) {
          setOutput(other.getOutput());
        }
        if (other.hasOverrideLimits()) {
          setOverrideLimits(other.getOverrideLimits());
        }
        if (other.hasVelocity()) {
          setVelocity(other.getVelocity());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusMotionAxis parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusMotionAxis) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private boolean enabled_ ;
      /**
       * <code>optional bool enabled = 2;</code>
       *
       * <pre>
       *&#47; Axis is enabled.
       * </pre>
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool enabled = 2;</code>
       *
       * <pre>
       *&#47; Axis is enabled.
       * </pre>
       */
      public boolean getEnabled() {
        return enabled_;
      }
      /**
       * <code>optional bool enabled = 2;</code>
       *
       * <pre>
       *&#47; Axis is enabled.
       * </pre>
       */
      public Builder setEnabled(boolean value) {
        bitField0_ |= 0x00000002;
        enabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enabled = 2;</code>
       *
       * <pre>
       *&#47; Axis is enabled.
       * </pre>
       */
      public Builder clearEnabled() {
        bitField0_ = (bitField0_ & ~0x00000002);
        enabled_ = false;
        onChanged();
        return this;
      }

      private boolean fault_ ;
      /**
       * <code>optional bool fault = 3;</code>
       *
       * <pre>
       *&#47; Axis amp fault.
       * </pre>
       */
      public boolean hasFault() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool fault = 3;</code>
       *
       * <pre>
       *&#47; Axis amp fault.
       * </pre>
       */
      public boolean getFault() {
        return fault_;
      }
      /**
       * <code>optional bool fault = 3;</code>
       *
       * <pre>
       *&#47; Axis amp fault.
       * </pre>
       */
      public Builder setFault(boolean value) {
        bitField0_ |= 0x00000004;
        fault_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool fault = 3;</code>
       *
       * <pre>
       *&#47; Axis amp fault.
       * </pre>
       */
      public Builder clearFault() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fault_ = false;
        onChanged();
        return this;
      }

      private double ferrorCurrent_ ;
      /**
       * <code>optional double ferror_current = 4;</code>
       *
       * <pre>
       *&#47; Current following error.
       * </pre>
       */
      public boolean hasFerrorCurrent() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double ferror_current = 4;</code>
       *
       * <pre>
       *&#47; Current following error.
       * </pre>
       */
      public double getFerrorCurrent() {
        return ferrorCurrent_;
      }
      /**
       * <code>optional double ferror_current = 4;</code>
       *
       * <pre>
       *&#47; Current following error.
       * </pre>
       */
      public Builder setFerrorCurrent(double value) {
        bitField0_ |= 0x00000008;
        ferrorCurrent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ferror_current = 4;</code>
       *
       * <pre>
       *&#47; Current following error.
       * </pre>
       */
      public Builder clearFerrorCurrent() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ferrorCurrent_ = 0D;
        onChanged();
        return this;
      }

      private double ferrorHighmark_ ;
      /**
       * <code>optional double ferror_highmark = 5;</code>
       *
       * <pre>
       *&#47; Magnitude of maximum following error.
       * </pre>
       */
      public boolean hasFerrorHighmark() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double ferror_highmark = 5;</code>
       *
       * <pre>
       *&#47; Magnitude of maximum following error.
       * </pre>
       */
      public double getFerrorHighmark() {
        return ferrorHighmark_;
      }
      /**
       * <code>optional double ferror_highmark = 5;</code>
       *
       * <pre>
       *&#47; Magnitude of maximum following error.
       * </pre>
       */
      public Builder setFerrorHighmark(double value) {
        bitField0_ |= 0x00000010;
        ferrorHighmark_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ferror_highmark = 5;</code>
       *
       * <pre>
       *&#47; Magnitude of maximum following error.
       * </pre>
       */
      public Builder clearFerrorHighmark() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ferrorHighmark_ = 0D;
        onChanged();
        return this;
      }

      private boolean homed_ ;
      /**
       * <code>optional bool homed = 6;</code>
       *
       * <pre>
       *&#47; Axis has been homed.
       * </pre>
       */
      public boolean hasHomed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool homed = 6;</code>
       *
       * <pre>
       *&#47; Axis has been homed.
       * </pre>
       */
      public boolean getHomed() {
        return homed_;
      }
      /**
       * <code>optional bool homed = 6;</code>
       *
       * <pre>
       *&#47; Axis has been homed.
       * </pre>
       */
      public Builder setHomed(boolean value) {
        bitField0_ |= 0x00000020;
        homed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool homed = 6;</code>
       *
       * <pre>
       *&#47; Axis has been homed.
       * </pre>
       */
      public Builder clearHomed() {
        bitField0_ = (bitField0_ & ~0x00000020);
        homed_ = false;
        onChanged();
        return this;
      }

      private boolean homing_ ;
      /**
       * <code>optional bool homing = 7;</code>
       *
       * <pre>
       *&#47; Homing currently progress.
       * </pre>
       */
      public boolean hasHoming() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool homing = 7;</code>
       *
       * <pre>
       *&#47; Homing currently progress.
       * </pre>
       */
      public boolean getHoming() {
        return homing_;
      }
      /**
       * <code>optional bool homing = 7;</code>
       *
       * <pre>
       *&#47; Homing currently progress.
       * </pre>
       */
      public Builder setHoming(boolean value) {
        bitField0_ |= 0x00000040;
        homing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool homing = 7;</code>
       *
       * <pre>
       *&#47; Homing currently progress.
       * </pre>
       */
      public Builder clearHoming() {
        bitField0_ = (bitField0_ & ~0x00000040);
        homing_ = false;
        onChanged();
        return this;
      }

      private boolean inpos_ ;
      /**
       * <code>optional bool inpos = 8;</code>
       *
       * <pre>
       *&#47; Axis is in position.
       * </pre>
       */
      public boolean hasInpos() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool inpos = 8;</code>
       *
       * <pre>
       *&#47; Axis is in position.
       * </pre>
       */
      public boolean getInpos() {
        return inpos_;
      }
      /**
       * <code>optional bool inpos = 8;</code>
       *
       * <pre>
       *&#47; Axis is in position.
       * </pre>
       */
      public Builder setInpos(boolean value) {
        bitField0_ |= 0x00000080;
        inpos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool inpos = 8;</code>
       *
       * <pre>
       *&#47; Axis is in position.
       * </pre>
       */
      public Builder clearInpos() {
        bitField0_ = (bitField0_ & ~0x00000080);
        inpos_ = false;
        onChanged();
        return this;
      }

      private double input_ ;
      /**
       * <code>optional double input = 9;</code>
       *
       * <pre>
       *&#47; Current input position.
       * </pre>
       */
      public boolean hasInput() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double input = 9;</code>
       *
       * <pre>
       *&#47; Current input position.
       * </pre>
       */
      public double getInput() {
        return input_;
      }
      /**
       * <code>optional double input = 9;</code>
       *
       * <pre>
       *&#47; Current input position.
       * </pre>
       */
      public Builder setInput(double value) {
        bitField0_ |= 0x00000100;
        input_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double input = 9;</code>
       *
       * <pre>
       *&#47; Current input position.
       * </pre>
       */
      public Builder clearInput() {
        bitField0_ = (bitField0_ & ~0x00000100);
        input_ = 0D;
        onChanged();
        return this;
      }

      private boolean maxHardLimit_ ;
      /**
       * <code>optional bool max_hard_limit = 10;</code>
       *
       * <pre>
       *&#47; Maximum hard limit exceeded.
       * </pre>
       */
      public boolean hasMaxHardLimit() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool max_hard_limit = 10;</code>
       *
       * <pre>
       *&#47; Maximum hard limit exceeded.
       * </pre>
       */
      public boolean getMaxHardLimit() {
        return maxHardLimit_;
      }
      /**
       * <code>optional bool max_hard_limit = 10;</code>
       *
       * <pre>
       *&#47; Maximum hard limit exceeded.
       * </pre>
       */
      public Builder setMaxHardLimit(boolean value) {
        bitField0_ |= 0x00000200;
        maxHardLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool max_hard_limit = 10;</code>
       *
       * <pre>
       *&#47; Maximum hard limit exceeded.
       * </pre>
       */
      public Builder clearMaxHardLimit() {
        bitField0_ = (bitField0_ & ~0x00000200);
        maxHardLimit_ = false;
        onChanged();
        return this;
      }

      private boolean maxSoftLimit_ ;
      /**
       * <code>optional bool max_soft_limit = 11;</code>
       *
       * <pre>
       *&#47; Maximum position limit was exceeded.
       * </pre>
       */
      public boolean hasMaxSoftLimit() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool max_soft_limit = 11;</code>
       *
       * <pre>
       *&#47; Maximum position limit was exceeded.
       * </pre>
       */
      public boolean getMaxSoftLimit() {
        return maxSoftLimit_;
      }
      /**
       * <code>optional bool max_soft_limit = 11;</code>
       *
       * <pre>
       *&#47; Maximum position limit was exceeded.
       * </pre>
       */
      public Builder setMaxSoftLimit(boolean value) {
        bitField0_ |= 0x00000400;
        maxSoftLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool max_soft_limit = 11;</code>
       *
       * <pre>
       *&#47; Maximum position limit was exceeded.
       * </pre>
       */
      public Builder clearMaxSoftLimit() {
        bitField0_ = (bitField0_ & ~0x00000400);
        maxSoftLimit_ = false;
        onChanged();
        return this;
      }

      private boolean minHardLimit_ ;
      /**
       * <code>optional bool min_hard_limit = 12;</code>
       *
       * <pre>
       *&#47; Minimum hard limit was exceeded.
       * </pre>
       */
      public boolean hasMinHardLimit() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool min_hard_limit = 12;</code>
       *
       * <pre>
       *&#47; Minimum hard limit was exceeded.
       * </pre>
       */
      public boolean getMinHardLimit() {
        return minHardLimit_;
      }
      /**
       * <code>optional bool min_hard_limit = 12;</code>
       *
       * <pre>
       *&#47; Minimum hard limit was exceeded.
       * </pre>
       */
      public Builder setMinHardLimit(boolean value) {
        bitField0_ |= 0x00000800;
        minHardLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool min_hard_limit = 12;</code>
       *
       * <pre>
       *&#47; Minimum hard limit was exceeded.
       * </pre>
       */
      public Builder clearMinHardLimit() {
        bitField0_ = (bitField0_ & ~0x00000800);
        minHardLimit_ = false;
        onChanged();
        return this;
      }

      private boolean minSoftLimit_ ;
      /**
       * <code>optional bool min_soft_limit = 13;</code>
       *
       * <pre>
       *&#47; Minimum position limit was exceeded.
       * </pre>
       */
      public boolean hasMinSoftLimit() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool min_soft_limit = 13;</code>
       *
       * <pre>
       *&#47; Minimum position limit was exceeded.
       * </pre>
       */
      public boolean getMinSoftLimit() {
        return minSoftLimit_;
      }
      /**
       * <code>optional bool min_soft_limit = 13;</code>
       *
       * <pre>
       *&#47; Minimum position limit was exceeded.
       * </pre>
       */
      public Builder setMinSoftLimit(boolean value) {
        bitField0_ |= 0x00001000;
        minSoftLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool min_soft_limit = 13;</code>
       *
       * <pre>
       *&#47; Minimum position limit was exceeded.
       * </pre>
       */
      public Builder clearMinSoftLimit() {
        bitField0_ = (bitField0_ & ~0x00001000);
        minSoftLimit_ = false;
        onChanged();
        return this;
      }

      private double output_ ;
      /**
       * <code>optional double output = 14;</code>
       *
       * <pre>
       *&#47; Commanded output position.
       * </pre>
       */
      public boolean hasOutput() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional double output = 14;</code>
       *
       * <pre>
       *&#47; Commanded output position.
       * </pre>
       */
      public double getOutput() {
        return output_;
      }
      /**
       * <code>optional double output = 14;</code>
       *
       * <pre>
       *&#47; Commanded output position.
       * </pre>
       */
      public Builder setOutput(double value) {
        bitField0_ |= 0x00002000;
        output_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double output = 14;</code>
       *
       * <pre>
       *&#47; Commanded output position.
       * </pre>
       */
      public Builder clearOutput() {
        bitField0_ = (bitField0_ & ~0x00002000);
        output_ = 0D;
        onChanged();
        return this;
      }

      private boolean overrideLimits_ ;
      /**
       * <code>optional bool override_limits = 15;</code>
       *
       * <pre>
       *&#47; Limits are overridden.
       * </pre>
       */
      public boolean hasOverrideLimits() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool override_limits = 15;</code>
       *
       * <pre>
       *&#47; Limits are overridden.
       * </pre>
       */
      public boolean getOverrideLimits() {
        return overrideLimits_;
      }
      /**
       * <code>optional bool override_limits = 15;</code>
       *
       * <pre>
       *&#47; Limits are overridden.
       * </pre>
       */
      public Builder setOverrideLimits(boolean value) {
        bitField0_ |= 0x00004000;
        overrideLimits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool override_limits = 15;</code>
       *
       * <pre>
       *&#47; Limits are overridden.
       * </pre>
       */
      public Builder clearOverrideLimits() {
        bitField0_ = (bitField0_ & ~0x00004000);
        overrideLimits_ = false;
        onChanged();
        return this;
      }

      private double velocity_ ;
      /**
       * <code>optional double velocity = 16;</code>
       *
       * <pre>
       *&#47; Current velocity.
       * </pre>
       */
      public boolean hasVelocity() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional double velocity = 16;</code>
       *
       * <pre>
       *&#47; Current velocity.
       * </pre>
       */
      public double getVelocity() {
        return velocity_;
      }
      /**
       * <code>optional double velocity = 16;</code>
       *
       * <pre>
       *&#47; Current velocity.
       * </pre>
       */
      public Builder setVelocity(double value) {
        bitField0_ |= 0x00008000;
        velocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double velocity = 16;</code>
       *
       * <pre>
       *&#47; Current velocity.
       * </pre>
       */
      public Builder clearVelocity() {
        bitField0_ = (bitField0_ & ~0x00008000);
        velocity_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusMotionAxis)
    }

    static {
      defaultInstance = new EmcStatusMotionAxis(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusMotionAxis)
  }

  public interface EmcStatusConfigAxisOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusConfigAxis)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional .pb.EmcAxisType axisType = 2;</code>
     *
     * <pre>
     *&#47; Type of axis. Reflects [AXIS_N]TYPE
     * </pre>
     */
    boolean hasAxisType();
    /**
     * <code>optional .pb.EmcAxisType axisType = 2;</code>
     *
     * <pre>
     *&#47; Type of axis. Reflects [AXIS_N]TYPE
     * </pre>
     */
    pb.Status.EmcAxisType getAxisType();

    /**
     * <code>optional double backlash = 3;</code>
     *
     * <pre>
     *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
     * </pre>
     */
    boolean hasBacklash();
    /**
     * <code>optional double backlash = 3;</code>
     *
     * <pre>
     *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
     * </pre>
     */
    double getBacklash();

    /**
     * <code>optional double max_ferror = 4;</code>
     *
     * <pre>
     *&#47; Maximum following error. Reflects [AXIS_N]FERROR
     * </pre>
     */
    boolean hasMaxFerror();
    /**
     * <code>optional double max_ferror = 4;</code>
     *
     * <pre>
     *&#47; Maximum following error. Reflects [AXIS_N]FERROR
     * </pre>
     */
    double getMaxFerror();

    /**
     * <code>optional double max_position_limit = 5;</code>
     *
     * <pre>
     *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
     * </pre>
     */
    boolean hasMaxPositionLimit();
    /**
     * <code>optional double max_position_limit = 5;</code>
     *
     * <pre>
     *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
     * </pre>
     */
    double getMaxPositionLimit();

    /**
     * <code>optional double min_ferror = 6;</code>
     *
     * <pre>
     *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
     * </pre>
     */
    boolean hasMinFerror();
    /**
     * <code>optional double min_ferror = 6;</code>
     *
     * <pre>
     *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
     * </pre>
     */
    double getMinFerror();

    /**
     * <code>optional double min_position_limit = 7;</code>
     *
     * <pre>
     *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
     * </pre>
     */
    boolean hasMinPositionLimit();
    /**
     * <code>optional double min_position_limit = 7;</code>
     *
     * <pre>
     *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
     * </pre>
     */
    double getMinPositionLimit();

    /**
     * <code>optional int32 home_sequence = 9;</code>
     *
     * <pre>
     *optional double         units               = 8;  // Units per mm. field removed
     * </pre>
     */
    boolean hasHomeSequence();
    /**
     * <code>optional int32 home_sequence = 9;</code>
     *
     * <pre>
     *optional double         units               = 8;  // Units per mm. field removed
     * </pre>
     */
    int getHomeSequence();

    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
     * </pre>
     */
    boolean hasMaxAcceleration();
    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
     * </pre>
     */
    double getMaxAcceleration();

    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
     * </pre>
     */
    boolean hasMaxVelocity();
    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
     * </pre>
     */
    double getMaxVelocity();

    /**
     * <code>optional string increments = 12;</code>
     *
     * <pre>
     *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
     * </pre>
     */
    boolean hasIncrements();
    /**
     * <code>optional string increments = 12;</code>
     *
     * <pre>
     *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
     * </pre>
     */
    java.lang.String getIncrements();
    /**
     * <code>optional string increments = 12;</code>
     *
     * <pre>
     *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
     * </pre>
     */
    com.google.protobuf.ByteString
        getIncrementsBytes();
  }
  /**
   * Protobuf type {@code pb.EmcStatusConfigAxis}
   *
   * <pre>
   **
   * Stores per axis information from configuration.
   * </pre>
   */
  public static final class EmcStatusConfigAxis extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusConfigAxis)
      EmcStatusConfigAxisOrBuilder {
    // Use EmcStatusConfigAxis.newBuilder() to construct.
    private EmcStatusConfigAxis(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusConfigAxis(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusConfigAxis defaultInstance;
    public static EmcStatusConfigAxis getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusConfigAxis getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusConfigAxis(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              pb.Status.EmcAxisType value = pb.Status.EmcAxisType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                axisType_ = value;
              }
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              backlash_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              maxFerror_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              maxPositionLimit_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              minFerror_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              minPositionLimit_ = input.readDouble();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              homeSequence_ = input.readInt32();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000100;
              maxAcceleration_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000200;
              maxVelocity_ = input.readDouble();
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000400;
              increments_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusConfigAxis_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusConfigAxis_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusConfigAxis.class, pb.Status.EmcStatusConfigAxis.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusConfigAxis> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusConfigAxis>() {
      public EmcStatusConfigAxis parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusConfigAxis(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusConfigAxis> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int AXISTYPE_FIELD_NUMBER = 2;
    private pb.Status.EmcAxisType axisType_;
    /**
     * <code>optional .pb.EmcAxisType axisType = 2;</code>
     *
     * <pre>
     *&#47; Type of axis. Reflects [AXIS_N]TYPE
     * </pre>
     */
    public boolean hasAxisType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pb.EmcAxisType axisType = 2;</code>
     *
     * <pre>
     *&#47; Type of axis. Reflects [AXIS_N]TYPE
     * </pre>
     */
    public pb.Status.EmcAxisType getAxisType() {
      return axisType_;
    }

    public static final int BACKLASH_FIELD_NUMBER = 3;
    private double backlash_;
    /**
     * <code>optional double backlash = 3;</code>
     *
     * <pre>
     *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
     * </pre>
     */
    public boolean hasBacklash() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double backlash = 3;</code>
     *
     * <pre>
     *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
     * </pre>
     */
    public double getBacklash() {
      return backlash_;
    }

    public static final int MAX_FERROR_FIELD_NUMBER = 4;
    private double maxFerror_;
    /**
     * <code>optional double max_ferror = 4;</code>
     *
     * <pre>
     *&#47; Maximum following error. Reflects [AXIS_N]FERROR
     * </pre>
     */
    public boolean hasMaxFerror() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double max_ferror = 4;</code>
     *
     * <pre>
     *&#47; Maximum following error. Reflects [AXIS_N]FERROR
     * </pre>
     */
    public double getMaxFerror() {
      return maxFerror_;
    }

    public static final int MAX_POSITION_LIMIT_FIELD_NUMBER = 5;
    private double maxPositionLimit_;
    /**
     * <code>optional double max_position_limit = 5;</code>
     *
     * <pre>
     *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
     * </pre>
     */
    public boolean hasMaxPositionLimit() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double max_position_limit = 5;</code>
     *
     * <pre>
     *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
     * </pre>
     */
    public double getMaxPositionLimit() {
      return maxPositionLimit_;
    }

    public static final int MIN_FERROR_FIELD_NUMBER = 6;
    private double minFerror_;
    /**
     * <code>optional double min_ferror = 6;</code>
     *
     * <pre>
     *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
     * </pre>
     */
    public boolean hasMinFerror() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double min_ferror = 6;</code>
     *
     * <pre>
     *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
     * </pre>
     */
    public double getMinFerror() {
      return minFerror_;
    }

    public static final int MIN_POSITION_LIMIT_FIELD_NUMBER = 7;
    private double minPositionLimit_;
    /**
     * <code>optional double min_position_limit = 7;</code>
     *
     * <pre>
     *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
     * </pre>
     */
    public boolean hasMinPositionLimit() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double min_position_limit = 7;</code>
     *
     * <pre>
     *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
     * </pre>
     */
    public double getMinPositionLimit() {
      return minPositionLimit_;
    }

    public static final int HOME_SEQUENCE_FIELD_NUMBER = 9;
    private int homeSequence_;
    /**
     * <code>optional int32 home_sequence = 9;</code>
     *
     * <pre>
     *optional double         units               = 8;  // Units per mm. field removed
     * </pre>
     */
    public boolean hasHomeSequence() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 home_sequence = 9;</code>
     *
     * <pre>
     *optional double         units               = 8;  // Units per mm. field removed
     * </pre>
     */
    public int getHomeSequence() {
      return homeSequence_;
    }

    public static final int MAX_ACCELERATION_FIELD_NUMBER = 10;
    private double maxAcceleration_;
    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
     * </pre>
     */
    public boolean hasMaxAcceleration() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
     * </pre>
     */
    public double getMaxAcceleration() {
      return maxAcceleration_;
    }

    public static final int MAX_VELOCITY_FIELD_NUMBER = 11;
    private double maxVelocity_;
    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
     * </pre>
     */
    public boolean hasMaxVelocity() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
     * </pre>
     */
    public double getMaxVelocity() {
      return maxVelocity_;
    }

    public static final int INCREMENTS_FIELD_NUMBER = 12;
    private java.lang.Object increments_;
    /**
     * <code>optional string increments = 12;</code>
     *
     * <pre>
     *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
     * </pre>
     */
    public boolean hasIncrements() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string increments = 12;</code>
     *
     * <pre>
     *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
     * </pre>
     */
    public java.lang.String getIncrements() {
      java.lang.Object ref = increments_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          increments_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string increments = 12;</code>
     *
     * <pre>
     *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIncrementsBytes() {
      java.lang.Object ref = increments_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        increments_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      index_ = 0;
      axisType_ = pb.Status.EmcAxisType.EMC_AXIS_LINEAR;
      backlash_ = 0D;
      maxFerror_ = 0D;
      maxPositionLimit_ = 0D;
      minFerror_ = 0D;
      minPositionLimit_ = 0D;
      homeSequence_ = 0;
      maxAcceleration_ = 0D;
      maxVelocity_ = 0D;
      increments_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, axisType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, backlash_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, maxFerror_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, maxPositionLimit_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, minFerror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, minPositionLimit_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(9, homeSequence_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(10, maxAcceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(11, maxVelocity_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(12, getIncrementsBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, axisType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, backlash_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, maxFerror_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, maxPositionLimit_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, minFerror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, minPositionLimit_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, homeSequence_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, maxAcceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, maxVelocity_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getIncrementsBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusConfigAxis parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfigAxis parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusConfigAxis parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusConfigAxis parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusConfigAxis prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusConfigAxis}
     *
     * <pre>
     **
     * Stores per axis information from configuration.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusConfigAxis)
        pb.Status.EmcStatusConfigAxisOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusConfigAxis_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusConfigAxis_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusConfigAxis.class, pb.Status.EmcStatusConfigAxis.Builder.class);
      }

      // Construct using pb.Status.EmcStatusConfigAxis.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        axisType_ = pb.Status.EmcAxisType.EMC_AXIS_LINEAR;
        bitField0_ = (bitField0_ & ~0x00000002);
        backlash_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxFerror_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        maxPositionLimit_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        minFerror_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        minPositionLimit_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        homeSequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxAcceleration_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        maxVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        increments_ = "";
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusConfigAxis_descriptor;
      }

      public pb.Status.EmcStatusConfigAxis getDefaultInstanceForType() {
        return pb.Status.EmcStatusConfigAxis.getDefaultInstance();
      }

      public pb.Status.EmcStatusConfigAxis build() {
        pb.Status.EmcStatusConfigAxis result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusConfigAxis buildPartial() {
        pb.Status.EmcStatusConfigAxis result = new pb.Status.EmcStatusConfigAxis(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.axisType_ = axisType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.backlash_ = backlash_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxFerror_ = maxFerror_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.maxPositionLimit_ = maxPositionLimit_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.minFerror_ = minFerror_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.minPositionLimit_ = minPositionLimit_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.homeSequence_ = homeSequence_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.maxAcceleration_ = maxAcceleration_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxVelocity_ = maxVelocity_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.increments_ = increments_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusConfigAxis) {
          return mergeFrom((pb.Status.EmcStatusConfigAxis)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusConfigAxis other) {
        if (other == pb.Status.EmcStatusConfigAxis.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasAxisType()) {
          setAxisType(other.getAxisType());
        }
        if (other.hasBacklash()) {
          setBacklash(other.getBacklash());
        }
        if (other.hasMaxFerror()) {
          setMaxFerror(other.getMaxFerror());
        }
        if (other.hasMaxPositionLimit()) {
          setMaxPositionLimit(other.getMaxPositionLimit());
        }
        if (other.hasMinFerror()) {
          setMinFerror(other.getMinFerror());
        }
        if (other.hasMinPositionLimit()) {
          setMinPositionLimit(other.getMinPositionLimit());
        }
        if (other.hasHomeSequence()) {
          setHomeSequence(other.getHomeSequence());
        }
        if (other.hasMaxAcceleration()) {
          setMaxAcceleration(other.getMaxAcceleration());
        }
        if (other.hasMaxVelocity()) {
          setMaxVelocity(other.getMaxVelocity());
        }
        if (other.hasIncrements()) {
          bitField0_ |= 0x00000400;
          increments_ = other.increments_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusConfigAxis parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusConfigAxis) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private pb.Status.EmcAxisType axisType_ = pb.Status.EmcAxisType.EMC_AXIS_LINEAR;
      /**
       * <code>optional .pb.EmcAxisType axisType = 2;</code>
       *
       * <pre>
       *&#47; Type of axis. Reflects [AXIS_N]TYPE
       * </pre>
       */
      public boolean hasAxisType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pb.EmcAxisType axisType = 2;</code>
       *
       * <pre>
       *&#47; Type of axis. Reflects [AXIS_N]TYPE
       * </pre>
       */
      public pb.Status.EmcAxisType getAxisType() {
        return axisType_;
      }
      /**
       * <code>optional .pb.EmcAxisType axisType = 2;</code>
       *
       * <pre>
       *&#47; Type of axis. Reflects [AXIS_N]TYPE
       * </pre>
       */
      public Builder setAxisType(pb.Status.EmcAxisType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        axisType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcAxisType axisType = 2;</code>
       *
       * <pre>
       *&#47; Type of axis. Reflects [AXIS_N]TYPE
       * </pre>
       */
      public Builder clearAxisType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        axisType_ = pb.Status.EmcAxisType.EMC_AXIS_LINEAR;
        onChanged();
        return this;
      }

      private double backlash_ ;
      /**
       * <code>optional double backlash = 3;</code>
       *
       * <pre>
       *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
       * </pre>
       */
      public boolean hasBacklash() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double backlash = 3;</code>
       *
       * <pre>
       *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
       * </pre>
       */
      public double getBacklash() {
        return backlash_;
      }
      /**
       * <code>optional double backlash = 3;</code>
       *
       * <pre>
       *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
       * </pre>
       */
      public Builder setBacklash(double value) {
        bitField0_ |= 0x00000004;
        backlash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double backlash = 3;</code>
       *
       * <pre>
       *&#47; Axis backlash. Reflects [AXIS_N]BACKLASH
       * </pre>
       */
      public Builder clearBacklash() {
        bitField0_ = (bitField0_ & ~0x00000004);
        backlash_ = 0D;
        onChanged();
        return this;
      }

      private double maxFerror_ ;
      /**
       * <code>optional double max_ferror = 4;</code>
       *
       * <pre>
       *&#47; Maximum following error. Reflects [AXIS_N]FERROR
       * </pre>
       */
      public boolean hasMaxFerror() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double max_ferror = 4;</code>
       *
       * <pre>
       *&#47; Maximum following error. Reflects [AXIS_N]FERROR
       * </pre>
       */
      public double getMaxFerror() {
        return maxFerror_;
      }
      /**
       * <code>optional double max_ferror = 4;</code>
       *
       * <pre>
       *&#47; Maximum following error. Reflects [AXIS_N]FERROR
       * </pre>
       */
      public Builder setMaxFerror(double value) {
        bitField0_ |= 0x00000008;
        maxFerror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_ferror = 4;</code>
       *
       * <pre>
       *&#47; Maximum following error. Reflects [AXIS_N]FERROR
       * </pre>
       */
      public Builder clearMaxFerror() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxFerror_ = 0D;
        onChanged();
        return this;
      }

      private double maxPositionLimit_ ;
      /**
       * <code>optional double max_position_limit = 5;</code>
       *
       * <pre>
       *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
       * </pre>
       */
      public boolean hasMaxPositionLimit() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double max_position_limit = 5;</code>
       *
       * <pre>
       *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
       * </pre>
       */
      public double getMaxPositionLimit() {
        return maxPositionLimit_;
      }
      /**
       * <code>optional double max_position_limit = 5;</code>
       *
       * <pre>
       *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
       * </pre>
       */
      public Builder setMaxPositionLimit(double value) {
        bitField0_ |= 0x00000010;
        maxPositionLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_position_limit = 5;</code>
       *
       * <pre>
       *&#47; Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
       * </pre>
       */
      public Builder clearMaxPositionLimit() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxPositionLimit_ = 0D;
        onChanged();
        return this;
      }

      private double minFerror_ ;
      /**
       * <code>optional double min_ferror = 6;</code>
       *
       * <pre>
       *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
       * </pre>
       */
      public boolean hasMinFerror() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double min_ferror = 6;</code>
       *
       * <pre>
       *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
       * </pre>
       */
      public double getMinFerror() {
        return minFerror_;
      }
      /**
       * <code>optional double min_ferror = 6;</code>
       *
       * <pre>
       *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
       * </pre>
       */
      public Builder setMinFerror(double value) {
        bitField0_ |= 0x00000020;
        minFerror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_ferror = 6;</code>
       *
       * <pre>
       *&#47; Minimum following error. Reflects [AXIS_N]MIN_FERROR
       * </pre>
       */
      public Builder clearMinFerror() {
        bitField0_ = (bitField0_ & ~0x00000020);
        minFerror_ = 0D;
        onChanged();
        return this;
      }

      private double minPositionLimit_ ;
      /**
       * <code>optional double min_position_limit = 7;</code>
       *
       * <pre>
       *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
       * </pre>
       */
      public boolean hasMinPositionLimit() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double min_position_limit = 7;</code>
       *
       * <pre>
       *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
       * </pre>
       */
      public double getMinPositionLimit() {
        return minPositionLimit_;
      }
      /**
       * <code>optional double min_position_limit = 7;</code>
       *
       * <pre>
       *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
       * </pre>
       */
      public Builder setMinPositionLimit(double value) {
        bitField0_ |= 0x00000040;
        minPositionLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_position_limit = 7;</code>
       *
       * <pre>
       *&#47; Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
       * </pre>
       */
      public Builder clearMinPositionLimit() {
        bitField0_ = (bitField0_ & ~0x00000040);
        minPositionLimit_ = 0D;
        onChanged();
        return this;
      }

      private int homeSequence_ ;
      /**
       * <code>optional int32 home_sequence = 9;</code>
       *
       * <pre>
       *optional double         units               = 8;  // Units per mm. field removed
       * </pre>
       */
      public boolean hasHomeSequence() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 home_sequence = 9;</code>
       *
       * <pre>
       *optional double         units               = 8;  // Units per mm. field removed
       * </pre>
       */
      public int getHomeSequence() {
        return homeSequence_;
      }
      /**
       * <code>optional int32 home_sequence = 9;</code>
       *
       * <pre>
       *optional double         units               = 8;  // Units per mm. field removed
       * </pre>
       */
      public Builder setHomeSequence(int value) {
        bitField0_ |= 0x00000080;
        homeSequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 home_sequence = 9;</code>
       *
       * <pre>
       *optional double         units               = 8;  // Units per mm. field removed
       * </pre>
       */
      public Builder clearHomeSequence() {
        bitField0_ = (bitField0_ & ~0x00000080);
        homeSequence_ = 0;
        onChanged();
        return this;
      }

      private double maxAcceleration_ ;
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
       * </pre>
       */
      public boolean hasMaxAcceleration() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
       * </pre>
       */
      public double getMaxAcceleration() {
        return maxAcceleration_;
      }
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
       * </pre>
       */
      public Builder setMaxAcceleration(double value) {
        bitField0_ |= 0x00000100;
        maxAcceleration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *&#47; Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
       * </pre>
       */
      public Builder clearMaxAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxAcceleration_ = 0D;
        onChanged();
        return this;
      }

      private double maxVelocity_ ;
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
       * </pre>
       */
      public boolean hasMaxVelocity() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
       * </pre>
       */
      public double getMaxVelocity() {
        return maxVelocity_;
      }
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
       * </pre>
       */
      public Builder setMaxVelocity(double value) {
        bitField0_ |= 0x00000200;
        maxVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
       * </pre>
       */
      public Builder clearMaxVelocity() {
        bitField0_ = (bitField0_ & ~0x00000200);
        maxVelocity_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object increments_ = "";
      /**
       * <code>optional string increments = 12;</code>
       *
       * <pre>
       *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
       * </pre>
       */
      public boolean hasIncrements() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string increments = 12;</code>
       *
       * <pre>
       *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
       * </pre>
       */
      public java.lang.String getIncrements() {
        java.lang.Object ref = increments_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            increments_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string increments = 12;</code>
       *
       * <pre>
       *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIncrementsBytes() {
        java.lang.Object ref = increments_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          increments_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string increments = 12;</code>
       *
       * <pre>
       *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
       * </pre>
       */
      public Builder setIncrements(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        increments_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string increments = 12;</code>
       *
       * <pre>
       *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
       * </pre>
       */
      public Builder clearIncrements() {
        bitField0_ = (bitField0_ & ~0x00000400);
        increments_ = getDefaultInstance().getIncrements();
        onChanged();
        return this;
      }
      /**
       * <code>optional string increments = 12;</code>
       *
       * <pre>
       *&#47; Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
       * </pre>
       */
      public Builder setIncrementsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        increments_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusConfigAxis)
    }

    static {
      defaultInstance = new EmcStatusConfigAxis(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusConfigAxis)
  }

  public interface EmcProgramExtensionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcProgramExtension)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the program extension.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the program extension.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional string extension = 2;</code>
     *
     * <pre>
     *&#47; Supported program extension. E.g. .gcode GCode program
     * </pre>
     */
    boolean hasExtension();
    /**
     * <code>optional string extension = 2;</code>
     *
     * <pre>
     *&#47; Supported program extension. E.g. .gcode GCode program
     * </pre>
     */
    java.lang.String getExtension();
    /**
     * <code>optional string extension = 2;</code>
     *
     * <pre>
     *&#47; Supported program extension. E.g. .gcode GCode program
     * </pre>
     */
    com.google.protobuf.ByteString
        getExtensionBytes();
  }
  /**
   * Protobuf type {@code pb.EmcProgramExtension}
   *
   * <pre>
   **
   * Program extension message.
   * </pre>
   */
  public static final class EmcProgramExtension extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcProgramExtension)
      EmcProgramExtensionOrBuilder {
    // Use EmcProgramExtension.newBuilder() to construct.
    private EmcProgramExtension(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcProgramExtension(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcProgramExtension defaultInstance;
    public static EmcProgramExtension getDefaultInstance() {
      return defaultInstance;
    }

    public EmcProgramExtension getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcProgramExtension(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              extension_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcProgramExtension_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcProgramExtension_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcProgramExtension.class, pb.Status.EmcProgramExtension.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcProgramExtension> PARSER =
        new com.google.protobuf.AbstractParser<EmcProgramExtension>() {
      public EmcProgramExtension parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcProgramExtension(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcProgramExtension> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the program extension.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the program extension.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int EXTENSION_FIELD_NUMBER = 2;
    private java.lang.Object extension_;
    /**
     * <code>optional string extension = 2;</code>
     *
     * <pre>
     *&#47; Supported program extension. E.g. .gcode GCode program
     * </pre>
     */
    public boolean hasExtension() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string extension = 2;</code>
     *
     * <pre>
     *&#47; Supported program extension. E.g. .gcode GCode program
     * </pre>
     */
    public java.lang.String getExtension() {
      java.lang.Object ref = extension_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          extension_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string extension = 2;</code>
     *
     * <pre>
     *&#47; Supported program extension. E.g. .gcode GCode program
     * </pre>
     */
    public com.google.protobuf.ByteString
        getExtensionBytes() {
      java.lang.Object ref = extension_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        extension_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      index_ = 0;
      extension_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getExtensionBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getExtensionBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcProgramExtension parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcProgramExtension parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcProgramExtension parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcProgramExtension parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcProgramExtension parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcProgramExtension parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcProgramExtension parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcProgramExtension parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcProgramExtension parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcProgramExtension parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcProgramExtension prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcProgramExtension}
     *
     * <pre>
     **
     * Program extension message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcProgramExtension)
        pb.Status.EmcProgramExtensionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcProgramExtension_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcProgramExtension_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcProgramExtension.class, pb.Status.EmcProgramExtension.Builder.class);
      }

      // Construct using pb.Status.EmcProgramExtension.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        extension_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcProgramExtension_descriptor;
      }

      public pb.Status.EmcProgramExtension getDefaultInstanceForType() {
        return pb.Status.EmcProgramExtension.getDefaultInstance();
      }

      public pb.Status.EmcProgramExtension build() {
        pb.Status.EmcProgramExtension result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcProgramExtension buildPartial() {
        pb.Status.EmcProgramExtension result = new pb.Status.EmcProgramExtension(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.extension_ = extension_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcProgramExtension) {
          return mergeFrom((pb.Status.EmcProgramExtension)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcProgramExtension other) {
        if (other == pb.Status.EmcProgramExtension.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasExtension()) {
          bitField0_ |= 0x00000002;
          extension_ = other.extension_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcProgramExtension parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcProgramExtension) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the program extension.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the program extension.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the program extension.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the program extension.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object extension_ = "";
      /**
       * <code>optional string extension = 2;</code>
       *
       * <pre>
       *&#47; Supported program extension. E.g. .gcode GCode program
       * </pre>
       */
      public boolean hasExtension() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string extension = 2;</code>
       *
       * <pre>
       *&#47; Supported program extension. E.g. .gcode GCode program
       * </pre>
       */
      public java.lang.String getExtension() {
        java.lang.Object ref = extension_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            extension_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string extension = 2;</code>
       *
       * <pre>
       *&#47; Supported program extension. E.g. .gcode GCode program
       * </pre>
       */
      public com.google.protobuf.ByteString
          getExtensionBytes() {
        java.lang.Object ref = extension_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          extension_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string extension = 2;</code>
       *
       * <pre>
       *&#47; Supported program extension. E.g. .gcode GCode program
       * </pre>
       */
      public Builder setExtension(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        extension_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string extension = 2;</code>
       *
       * <pre>
       *&#47; Supported program extension. E.g. .gcode GCode program
       * </pre>
       */
      public Builder clearExtension() {
        bitField0_ = (bitField0_ & ~0x00000002);
        extension_ = getDefaultInstance().getExtension();
        onChanged();
        return this;
      }
      /**
       * <code>optional string extension = 2;</code>
       *
       * <pre>
       *&#47; Supported program extension. E.g. .gcode GCode program
       * </pre>
       */
      public Builder setExtensionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        extension_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcProgramExtension)
    }

    static {
      defaultInstance = new EmcProgramExtension(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcProgramExtension)
  }

  public interface EmcStatusAnalogIOOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusAnalogIO)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of analog IO pin.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of analog IO pin.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Current value of analog IO pin.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Current value of analog IO pin.
     * </pre>
     */
    double getValue();
  }
  /**
   * Protobuf type {@code pb.EmcStatusAnalogIO}
   *
   * <pre>
   **
   * Analog IO pin message.
   * </pre>
   */
  public static final class EmcStatusAnalogIO extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusAnalogIO)
      EmcStatusAnalogIOOrBuilder {
    // Use EmcStatusAnalogIO.newBuilder() to construct.
    private EmcStatusAnalogIO(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusAnalogIO(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusAnalogIO defaultInstance;
    public static EmcStatusAnalogIO getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusAnalogIO getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusAnalogIO(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              value_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusAnalogIO_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusAnalogIO_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusAnalogIO.class, pb.Status.EmcStatusAnalogIO.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusAnalogIO> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusAnalogIO>() {
      public EmcStatusAnalogIO parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusAnalogIO(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusAnalogIO> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of analog IO pin.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of analog IO pin.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private double value_;
    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Current value of analog IO pin.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Current value of analog IO pin.
     * </pre>
     */
    public double getValue() {
      return value_;
    }

    private void initFields() {
      index_ = 0;
      value_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusAnalogIO parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusAnalogIO parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusAnalogIO parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusAnalogIO parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusAnalogIO prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusAnalogIO}
     *
     * <pre>
     **
     * Analog IO pin message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusAnalogIO)
        pb.Status.EmcStatusAnalogIOOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusAnalogIO_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusAnalogIO_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusAnalogIO.class, pb.Status.EmcStatusAnalogIO.Builder.class);
      }

      // Construct using pb.Status.EmcStatusAnalogIO.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusAnalogIO_descriptor;
      }

      public pb.Status.EmcStatusAnalogIO getDefaultInstanceForType() {
        return pb.Status.EmcStatusAnalogIO.getDefaultInstance();
      }

      public pb.Status.EmcStatusAnalogIO build() {
        pb.Status.EmcStatusAnalogIO result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusAnalogIO buildPartial() {
        pb.Status.EmcStatusAnalogIO result = new pb.Status.EmcStatusAnalogIO(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusAnalogIO) {
          return mergeFrom((pb.Status.EmcStatusAnalogIO)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusAnalogIO other) {
        if (other == pb.Status.EmcStatusAnalogIO.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusAnalogIO parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusAnalogIO) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of analog IO pin.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of analog IO pin.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of analog IO pin.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of analog IO pin.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private double value_ ;
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Current value of analog IO pin.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Current value of analog IO pin.
       * </pre>
       */
      public double getValue() {
        return value_;
      }
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Current value of analog IO pin.
       * </pre>
       */
      public Builder setValue(double value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Current value of analog IO pin.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusAnalogIO)
    }

    static {
      defaultInstance = new EmcStatusAnalogIO(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusAnalogIO)
  }

  public interface EmcStatusDigitalIOOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusDigitalIO)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of digital IO pin.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of digital IO pin.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional bool value = 2;</code>
     *
     * <pre>
     *&#47; Current value of digital IO pin.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional bool value = 2;</code>
     *
     * <pre>
     *&#47; Current value of digital IO pin.
     * </pre>
     */
    boolean getValue();
  }
  /**
   * Protobuf type {@code pb.EmcStatusDigitalIO}
   *
   * <pre>
   **
   * Digital IO pin message.
   * </pre>
   */
  public static final class EmcStatusDigitalIO extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusDigitalIO)
      EmcStatusDigitalIOOrBuilder {
    // Use EmcStatusDigitalIO.newBuilder() to construct.
    private EmcStatusDigitalIO(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusDigitalIO(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusDigitalIO defaultInstance;
    public static EmcStatusDigitalIO getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusDigitalIO getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusDigitalIO(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusDigitalIO_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusDigitalIO_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusDigitalIO.class, pb.Status.EmcStatusDigitalIO.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusDigitalIO> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusDigitalIO>() {
      public EmcStatusDigitalIO parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusDigitalIO(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusDigitalIO> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of digital IO pin.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of digital IO pin.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private boolean value_;
    /**
     * <code>optional bool value = 2;</code>
     *
     * <pre>
     *&#47; Current value of digital IO pin.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool value = 2;</code>
     *
     * <pre>
     *&#47; Current value of digital IO pin.
     * </pre>
     */
    public boolean getValue() {
      return value_;
    }

    private void initFields() {
      index_ = 0;
      value_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusDigitalIO parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusDigitalIO parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusDigitalIO parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusDigitalIO parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusDigitalIO prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusDigitalIO}
     *
     * <pre>
     **
     * Digital IO pin message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusDigitalIO)
        pb.Status.EmcStatusDigitalIOOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusDigitalIO_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusDigitalIO_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusDigitalIO.class, pb.Status.EmcStatusDigitalIO.Builder.class);
      }

      // Construct using pb.Status.EmcStatusDigitalIO.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusDigitalIO_descriptor;
      }

      public pb.Status.EmcStatusDigitalIO getDefaultInstanceForType() {
        return pb.Status.EmcStatusDigitalIO.getDefaultInstance();
      }

      public pb.Status.EmcStatusDigitalIO build() {
        pb.Status.EmcStatusDigitalIO result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusDigitalIO buildPartial() {
        pb.Status.EmcStatusDigitalIO result = new pb.Status.EmcStatusDigitalIO(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusDigitalIO) {
          return mergeFrom((pb.Status.EmcStatusDigitalIO)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusDigitalIO other) {
        if (other == pb.Status.EmcStatusDigitalIO.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusDigitalIO parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusDigitalIO) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of digital IO pin.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of digital IO pin.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of digital IO pin.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of digital IO pin.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private boolean value_ ;
      /**
       * <code>optional bool value = 2;</code>
       *
       * <pre>
       *&#47; Current value of digital IO pin.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool value = 2;</code>
       *
       * <pre>
       *&#47; Current value of digital IO pin.
       * </pre>
       */
      public boolean getValue() {
        return value_;
      }
      /**
       * <code>optional bool value = 2;</code>
       *
       * <pre>
       *&#47; Current value of digital IO pin.
       * </pre>
       */
      public Builder setValue(boolean value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool value = 2;</code>
       *
       * <pre>
       *&#47; Current value of digital IO pin.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusDigitalIO)
    }

    static {
      defaultInstance = new EmcStatusDigitalIO(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusDigitalIO)
  }

  public interface EmcStatusLimitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusLimit)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
     * </pre>
     */
    int getValue();
  }
  /**
   * Protobuf type {@code pb.EmcStatusLimit}
   *
   * <pre>
   **
   * Limit mask message.
   * </pre>
   */
  public static final class EmcStatusLimit extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusLimit)
      EmcStatusLimitOrBuilder {
    // Use EmcStatusLimit.newBuilder() to construct.
    private EmcStatusLimit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusLimit(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusLimit defaultInstance;
    public static EmcStatusLimit getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusLimit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusLimit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusLimit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusLimit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusLimit.class, pb.Status.EmcStatusLimit.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusLimit> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusLimit>() {
      public EmcStatusLimit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusLimit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusLimit> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Axis index.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    private void initFields() {
      index_ = 0;
      value_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusLimit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusLimit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusLimit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusLimit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusLimit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusLimit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusLimit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusLimit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusLimit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusLimit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusLimit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusLimit}
     *
     * <pre>
     **
     * Limit mask message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusLimit)
        pb.Status.EmcStatusLimitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusLimit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusLimit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusLimit.class, pb.Status.EmcStatusLimit.Builder.class);
      }

      // Construct using pb.Status.EmcStatusLimit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusLimit_descriptor;
      }

      public pb.Status.EmcStatusLimit getDefaultInstanceForType() {
        return pb.Status.EmcStatusLimit.getDefaultInstance();
      }

      public pb.Status.EmcStatusLimit build() {
        pb.Status.EmcStatusLimit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusLimit buildPartial() {
        pb.Status.EmcStatusLimit result = new pb.Status.EmcStatusLimit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusLimit) {
          return mergeFrom((pb.Status.EmcStatusLimit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusLimit other) {
        if (other == pb.Status.EmcStatusLimit.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusLimit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusLimit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Axis index.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusLimit)
    }

    static {
      defaultInstance = new EmcStatusLimit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusLimit)
  }

  public interface EmcStatusGCodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusGCode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the GCode.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the GCode.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; GCode value. E.g. 210 for G21
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; GCode value. E.g. 210 for G21
     * </pre>
     */
    int getValue();
  }
  /**
   * Protobuf type {@code pb.EmcStatusGCode}
   *
   * <pre>
   **
   * Currently active GCodes message.
   * </pre>
   */
  public static final class EmcStatusGCode extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusGCode)
      EmcStatusGCodeOrBuilder {
    // Use EmcStatusGCode.newBuilder() to construct.
    private EmcStatusGCode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusGCode(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusGCode defaultInstance;
    public static EmcStatusGCode getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusGCode getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusGCode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusGCode_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusGCode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusGCode.class, pb.Status.EmcStatusGCode.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusGCode> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusGCode>() {
      public EmcStatusGCode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusGCode(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusGCode> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the GCode.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of the GCode.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; GCode value. E.g. 210 for G21
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; GCode value. E.g. 210 for G21
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    private void initFields() {
      index_ = 0;
      value_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusGCode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusGCode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusGCode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusGCode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusGCode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusGCode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusGCode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusGCode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusGCode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusGCode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusGCode prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusGCode}
     *
     * <pre>
     **
     * Currently active GCodes message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusGCode)
        pb.Status.EmcStatusGCodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusGCode_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusGCode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusGCode.class, pb.Status.EmcStatusGCode.Builder.class);
      }

      // Construct using pb.Status.EmcStatusGCode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusGCode_descriptor;
      }

      public pb.Status.EmcStatusGCode getDefaultInstanceForType() {
        return pb.Status.EmcStatusGCode.getDefaultInstance();
      }

      public pb.Status.EmcStatusGCode build() {
        pb.Status.EmcStatusGCode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusGCode buildPartial() {
        pb.Status.EmcStatusGCode result = new pb.Status.EmcStatusGCode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusGCode) {
          return mergeFrom((pb.Status.EmcStatusGCode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusGCode other) {
        if (other == pb.Status.EmcStatusGCode.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusGCode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusGCode) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the GCode.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the GCode.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the GCode.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of the GCode.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; GCode value. E.g. 210 for G21
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; GCode value. E.g. 210 for G21
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; GCode value. E.g. 210 for G21
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; GCode value. E.g. 210 for G21
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusGCode)
    }

    static {
      defaultInstance = new EmcStatusGCode(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusGCode)
  }

  public interface EmcStatusMCodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusMCode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of MCode.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of MCode.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; MCode value. E.g. 100 for M100
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; MCode value. E.g. 100 for M100
     * </pre>
     */
    int getValue();
  }
  /**
   * Protobuf type {@code pb.EmcStatusMCode}
   *
   * <pre>
   **
   * Currently active MCodes message.
   * </pre>
   */
  public static final class EmcStatusMCode extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusMCode)
      EmcStatusMCodeOrBuilder {
    // Use EmcStatusMCode.newBuilder() to construct.
    private EmcStatusMCode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusMCode(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusMCode defaultInstance;
    public static EmcStatusMCode getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusMCode getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusMCode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusMCode_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusMCode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusMCode.class, pb.Status.EmcStatusMCode.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusMCode> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusMCode>() {
      public EmcStatusMCode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusMCode(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusMCode> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of MCode.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of MCode.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; MCode value. E.g. 100 for M100
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 value = 2;</code>
     *
     * <pre>
     *&#47; MCode value. E.g. 100 for M100
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    private void initFields() {
      index_ = 0;
      value_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusMCode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusMCode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusMCode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusMCode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusMCode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusMCode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusMCode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusMCode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusMCode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusMCode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusMCode prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusMCode}
     *
     * <pre>
     **
     * Currently active MCodes message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusMCode)
        pb.Status.EmcStatusMCodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusMCode_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusMCode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusMCode.class, pb.Status.EmcStatusMCode.Builder.class);
      }

      // Construct using pb.Status.EmcStatusMCode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusMCode_descriptor;
      }

      public pb.Status.EmcStatusMCode getDefaultInstanceForType() {
        return pb.Status.EmcStatusMCode.getDefaultInstance();
      }

      public pb.Status.EmcStatusMCode build() {
        pb.Status.EmcStatusMCode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusMCode buildPartial() {
        pb.Status.EmcStatusMCode result = new pb.Status.EmcStatusMCode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusMCode) {
          return mergeFrom((pb.Status.EmcStatusMCode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusMCode other) {
        if (other == pb.Status.EmcStatusMCode.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusMCode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusMCode) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of MCode.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of MCode.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of MCode.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of MCode.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; MCode value. E.g. 100 for M100
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; MCode value. E.g. 100 for M100
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; MCode value. E.g. 100 for M100
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 2;</code>
       *
       * <pre>
       *&#47; MCode value. E.g. 100 for M100
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusMCode)
    }

    static {
      defaultInstance = new EmcStatusMCode(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusMCode)
  }

  public interface EmcStatusSettingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusSetting)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of interpreter setting.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of interpreter setting.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Interpreter settings value.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Interpreter settings value.
     * </pre>
     */
    double getValue();
  }
  /**
   * Protobuf type {@code pb.EmcStatusSetting}
   *
   * <pre>
   **
   * Interpreter setting message.
   * </pre>
   */
  public static final class EmcStatusSetting extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusSetting)
      EmcStatusSettingOrBuilder {
    // Use EmcStatusSetting.newBuilder() to construct.
    private EmcStatusSetting(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusSetting(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusSetting defaultInstance;
    public static EmcStatusSetting getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusSetting getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusSetting(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              value_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusSetting_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusSetting_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusSetting.class, pb.Status.EmcStatusSetting.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusSetting> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusSetting>() {
      public EmcStatusSetting parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusSetting(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusSetting> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of interpreter setting.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; Index of interpreter setting.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private double value_;
    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Interpreter settings value.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double value = 2;</code>
     *
     * <pre>
     *&#47; Interpreter settings value.
     * </pre>
     */
    public double getValue() {
      return value_;
    }

    private void initFields() {
      index_ = 0;
      value_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusSetting parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusSetting parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusSetting parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusSetting parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusSetting parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusSetting parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusSetting parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusSetting parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusSetting parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusSetting parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusSetting prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusSetting}
     *
     * <pre>
     **
     * Interpreter setting message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusSetting)
        pb.Status.EmcStatusSettingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusSetting_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusSetting_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusSetting.class, pb.Status.EmcStatusSetting.Builder.class);
      }

      // Construct using pb.Status.EmcStatusSetting.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusSetting_descriptor;
      }

      public pb.Status.EmcStatusSetting getDefaultInstanceForType() {
        return pb.Status.EmcStatusSetting.getDefaultInstance();
      }

      public pb.Status.EmcStatusSetting build() {
        pb.Status.EmcStatusSetting result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusSetting buildPartial() {
        pb.Status.EmcStatusSetting result = new pb.Status.EmcStatusSetting(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusSetting) {
          return mergeFrom((pb.Status.EmcStatusSetting)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusSetting other) {
        if (other == pb.Status.EmcStatusSetting.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusSetting parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusSetting) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of interpreter setting.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of interpreter setting.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of interpreter setting.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; Index of interpreter setting.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private double value_ ;
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Interpreter settings value.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Interpreter settings value.
       * </pre>
       */
      public double getValue() {
        return value_;
      }
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Interpreter settings value.
       * </pre>
       */
      public Builder setValue(double value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double value = 2;</code>
       *
       * <pre>
       *&#47; Interpreter settings value.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusSetting)
    }

    static {
      defaultInstance = new EmcStatusSetting(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusSetting)
  }

  public interface EmcStatusConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double default_acceleration = 1;</code>
     *
     * <pre>
     *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
     * </pre>
     */
    boolean hasDefaultAcceleration();
    /**
     * <code>optional double default_acceleration = 1;</code>
     *
     * <pre>
     *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
     * </pre>
     */
    double getDefaultAcceleration();

    /**
     * <code>optional int32 axes = 3;</code>
     *
     * <pre>
     *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
     * </pre>
     */
    boolean hasAxes();
    /**
     * <code>optional int32 axes = 3;</code>
     *
     * <pre>
     *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
     * </pre>
     */
    int getAxes();

    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusConfigAxis> 
        getAxisList();
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    pb.Status.EmcStatusConfigAxis getAxis(int index);
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    int getAxisCount();
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusConfigAxisOrBuilder> 
        getAxisOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    pb.Status.EmcStatusConfigAxisOrBuilder getAxisOrBuilder(
        int index);

    /**
     * <code>optional int32 axis_mask = 5;</code>
     *
     * <pre>
     *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
     * </pre>
     */
    boolean hasAxisMask();
    /**
     * <code>optional int32 axis_mask = 5;</code>
     *
     * <pre>
     *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
     * </pre>
     */
    int getAxisMask();

    /**
     * <code>optional double cycle_time = 6;</code>
     *
     * <pre>
     *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
     * </pre>
     */
    boolean hasCycleTime();
    /**
     * <code>optional double cycle_time = 6;</code>
     *
     * <pre>
     *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
     * </pre>
     */
    double getCycleTime();

    /**
     * <code>optional int32 debug = 7;</code>
     *
     * <pre>
     *&#47; Debug flag.
     * </pre>
     */
    boolean hasDebug();
    /**
     * <code>optional int32 debug = 7;</code>
     *
     * <pre>
     *&#47; Debug flag.
     * </pre>
     */
    int getDebug();

    /**
     * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
     *
     * <pre>
     *&#47; Kinematics type.
     * </pre>
     */
    boolean hasKinematicsType();
    /**
     * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
     *
     * <pre>
     *&#47; Kinematics type.
     * </pre>
     */
    pb.Status.EmcKinematicsType getKinematicsType();

    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
     * </pre>
     */
    boolean hasMaxAcceleration();
    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
     * </pre>
     */
    double getMaxAcceleration();

    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
     * </pre>
     */
    boolean hasMaxVelocity();
    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
     * </pre>
     */
    double getMaxVelocity();

    /**
     * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
     *
     * <pre>
     *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
     * </pre>
     */
    boolean hasLinearUnits();
    /**
     * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
     *
     * <pre>
     *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
     * </pre>
     */
    pb.Status.EmcLinearUnitsType getLinearUnits();

    /**
     * <code>optional double default_velocity = 13;</code>
     *
     * <pre>
     *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
     * </pre>
     */
    boolean hasDefaultVelocity();
    /**
     * <code>optional double default_velocity = 13;</code>
     *
     * <pre>
     *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
     * </pre>
     */
    double getDefaultVelocity();

    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    java.util.List<pb.Status.EmcProgramExtension> 
        getProgramExtensionList();
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    pb.Status.EmcProgramExtension getProgramExtension(int index);
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    int getProgramExtensionCount();
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcProgramExtensionOrBuilder> 
        getProgramExtensionOrBuilderList();
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    pb.Status.EmcProgramExtensionOrBuilder getProgramExtensionOrBuilder(
        int index);

    /**
     * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
     *
     * <pre>
     *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
     * </pre>
     */
    boolean hasPositionOffset();
    /**
     * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
     *
     * <pre>
     *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
     * </pre>
     */
    pb.Status.EmcPositionOffsetType getPositionOffset();

    /**
     * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
     *
     * <pre>
     *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
     * </pre>
     */
    boolean hasPositionFeedback();
    /**
     * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
     *
     * <pre>
     *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
     * </pre>
     */
    pb.Status.EmcPositionFeedbackType getPositionFeedback();

    /**
     * <code>optional double max_feed_override = 17;</code>
     *
     * <pre>
     *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
     * </pre>
     */
    boolean hasMaxFeedOverride();
    /**
     * <code>optional double max_feed_override = 17;</code>
     *
     * <pre>
     *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
     * </pre>
     */
    double getMaxFeedOverride();

    /**
     * <code>optional double min_feed_override = 18;</code>
     *
     * <pre>
     *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
     * </pre>
     */
    boolean hasMinFeedOverride();
    /**
     * <code>optional double min_feed_override = 18;</code>
     *
     * <pre>
     *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
     * </pre>
     */
    double getMinFeedOverride();

    /**
     * <code>optional double max_spindle_override = 19;</code>
     *
     * <pre>
     *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
     * </pre>
     */
    boolean hasMaxSpindleOverride();
    /**
     * <code>optional double max_spindle_override = 19;</code>
     *
     * <pre>
     *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
     * </pre>
     */
    double getMaxSpindleOverride();

    /**
     * <code>optional double min_spindle_override = 20;</code>
     *
     * <pre>
     *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
     * </pre>
     */
    boolean hasMinSpindleOverride();
    /**
     * <code>optional double min_spindle_override = 20;</code>
     *
     * <pre>
     *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
     * </pre>
     */
    double getMinSpindleOverride();

    /**
     * <code>optional double default_spindle_speed = 21;</code>
     *
     * <pre>
     *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
     * </pre>
     */
    boolean hasDefaultSpindleSpeed();
    /**
     * <code>optional double default_spindle_speed = 21;</code>
     *
     * <pre>
     *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
     * </pre>
     */
    double getDefaultSpindleSpeed();

    /**
     * <code>optional double default_linear_velocity = 22;</code>
     *
     * <pre>
     *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
     * </pre>
     */
    boolean hasDefaultLinearVelocity();
    /**
     * <code>optional double default_linear_velocity = 22;</code>
     *
     * <pre>
     *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
     * </pre>
     */
    double getDefaultLinearVelocity();

    /**
     * <code>optional double min_velocity = 23;</code>
     *
     * <pre>
     *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
     * </pre>
     */
    boolean hasMinVelocity();
    /**
     * <code>optional double min_velocity = 23;</code>
     *
     * <pre>
     *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
     * </pre>
     */
    double getMinVelocity();

    /**
     * <code>optional double max_linear_velocity = 24;</code>
     *
     * <pre>
     *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
     * </pre>
     */
    boolean hasMaxLinearVelocity();
    /**
     * <code>optional double max_linear_velocity = 24;</code>
     *
     * <pre>
     *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
     * </pre>
     */
    double getMaxLinearVelocity();

    /**
     * <code>optional double min_linear_velocity = 25;</code>
     *
     * <pre>
     *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
     * </pre>
     */
    boolean hasMinLinearVelocity();
    /**
     * <code>optional double min_linear_velocity = 25;</code>
     *
     * <pre>
     *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
     * </pre>
     */
    double getMinLinearVelocity();

    /**
     * <code>optional double default_angular_velocity = 26;</code>
     *
     * <pre>
     *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
     * </pre>
     */
    boolean hasDefaultAngularVelocity();
    /**
     * <code>optional double default_angular_velocity = 26;</code>
     *
     * <pre>
     *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
     * </pre>
     */
    double getDefaultAngularVelocity();

    /**
     * <code>optional double max_angular_velocity = 27;</code>
     *
     * <pre>
     *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
     * </pre>
     */
    boolean hasMaxAngularVelocity();
    /**
     * <code>optional double max_angular_velocity = 27;</code>
     *
     * <pre>
     *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
     * </pre>
     */
    double getMaxAngularVelocity();

    /**
     * <code>optional double min_angular_velocity = 28;</code>
     *
     * <pre>
     *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
     * </pre>
     */
    boolean hasMinAngularVelocity();
    /**
     * <code>optional double min_angular_velocity = 28;</code>
     *
     * <pre>
     *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
     * </pre>
     */
    double getMinAngularVelocity();

    /**
     * <code>optional string increments = 29;</code>
     *
     * <pre>
     *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
     * </pre>
     */
    boolean hasIncrements();
    /**
     * <code>optional string increments = 29;</code>
     *
     * <pre>
     *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
     * </pre>
     */
    java.lang.String getIncrements();
    /**
     * <code>optional string increments = 29;</code>
     *
     * <pre>
     *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
     * </pre>
     */
    com.google.protobuf.ByteString
        getIncrementsBytes();

    /**
     * <code>optional string grids = 30;</code>
     *
     * <pre>
     *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
     * </pre>
     */
    boolean hasGrids();
    /**
     * <code>optional string grids = 30;</code>
     *
     * <pre>
     *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
     * </pre>
     */
    java.lang.String getGrids();
    /**
     * <code>optional string grids = 30;</code>
     *
     * <pre>
     *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
     * </pre>
     */
    com.google.protobuf.ByteString
        getGridsBytes();

    /**
     * <code>optional bool lathe = 31;</code>
     *
     * <pre>
     *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
     * </pre>
     */
    boolean hasLathe();
    /**
     * <code>optional bool lathe = 31;</code>
     *
     * <pre>
     *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
     * </pre>
     */
    boolean getLathe();

    /**
     * <code>optional string geometry = 32;</code>
     *
     * <pre>
     *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
     * </pre>
     */
    boolean hasGeometry();
    /**
     * <code>optional string geometry = 32;</code>
     *
     * <pre>
     *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
     * </pre>
     */
    java.lang.String getGeometry();
    /**
     * <code>optional string geometry = 32;</code>
     *
     * <pre>
     *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
     * </pre>
     */
    com.google.protobuf.ByteString
        getGeometryBytes();

    /**
     * <code>optional uint32 arcdivision = 33;</code>
     *
     * <pre>
     *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
     * </pre>
     */
    boolean hasArcdivision();
    /**
     * <code>optional uint32 arcdivision = 33;</code>
     *
     * <pre>
     *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
     * </pre>
     */
    int getArcdivision();

    /**
     * <code>optional bool no_force_homing = 34;</code>
     *
     * <pre>
     *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
     * </pre>
     */
    boolean hasNoForceHoming();
    /**
     * <code>optional bool no_force_homing = 34;</code>
     *
     * <pre>
     *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
     * </pre>
     */
    boolean getNoForceHoming();

    /**
     * <code>optional string remote_path = 35;</code>
     *
     * <pre>
     *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
     * </pre>
     */
    boolean hasRemotePath();
    /**
     * <code>optional string remote_path = 35;</code>
     *
     * <pre>
     *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
     * </pre>
     */
    java.lang.String getRemotePath();
    /**
     * <code>optional string remote_path = 35;</code>
     *
     * <pre>
     *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
     * </pre>
     */
    com.google.protobuf.ByteString
        getRemotePathBytes();

    /**
     * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
     *
     * <pre>
     *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
     * </pre>
     */
    boolean hasTimeUnits();
    /**
     * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
     *
     * <pre>
     *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
     * </pre>
     */
    pb.Status.EmcTimeUnitsType getTimeUnits();

    /**
     * <code>optional string name = 37;</code>
     *
     * <pre>
     *&#47; Machine name. Reflects [EMC]MACHINE
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 37;</code>
     *
     * <pre>
     *&#47; Machine name. Reflects [EMC]MACHINE
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 37;</code>
     *
     * <pre>
     *&#47; Machine name. Reflects [EMC]MACHINE
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusUserCommand> 
        getUserCommandList();
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    pb.Status.EmcStatusUserCommand getUserCommand(int index);
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    int getUserCommandCount();
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusUserCommandOrBuilder> 
        getUserCommandOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    pb.Status.EmcStatusUserCommandOrBuilder getUserCommandOrBuilder(
        int index);

    /**
     * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
     *
     * <pre>
     *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
     * </pre>
     */
    boolean hasAngularUnits();
    /**
     * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
     *
     * <pre>
     *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
     * </pre>
     */
    pb.Status.EmcAngularUnitsType getAngularUnits();
  }
  /**
   * Protobuf type {@code pb.EmcStatusConfig}
   *
   * <pre>
   **
   * EMC status configuration message.
   * </pre>
   */
  public static final class EmcStatusConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusConfig)
      EmcStatusConfigOrBuilder {
    // Use EmcStatusConfig.newBuilder() to construct.
    private EmcStatusConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusConfig defaultInstance;
    public static EmcStatusConfig getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              defaultAcceleration_ = input.readDouble();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              axes_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                axis_ = new java.util.ArrayList<pb.Status.EmcStatusConfigAxis>();
                mutable_bitField0_ |= 0x00000004;
              }
              axis_.add(input.readMessage(pb.Status.EmcStatusConfigAxis.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              axisMask_ = input.readInt32();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000008;
              cycleTime_ = input.readDouble();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              debug_ = input.readInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              pb.Status.EmcKinematicsType value = pb.Status.EmcKinematicsType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                kinematicsType_ = value;
              }
              break;
            }
            case 81: {
              bitField0_ |= 0x00000040;
              maxAcceleration_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000080;
              maxVelocity_ = input.readDouble();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              pb.Status.EmcLinearUnitsType value = pb.Status.EmcLinearUnitsType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                linearUnits_ = value;
              }
              break;
            }
            case 105: {
              bitField0_ |= 0x00000200;
              defaultVelocity_ = input.readDouble();
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                programExtension_ = new java.util.ArrayList<pb.Status.EmcProgramExtension>();
                mutable_bitField0_ |= 0x00000800;
              }
              programExtension_.add(input.readMessage(pb.Status.EmcProgramExtension.PARSER, extensionRegistry));
              break;
            }
            case 120: {
              int rawValue = input.readEnum();
              pb.Status.EmcPositionOffsetType value = pb.Status.EmcPositionOffsetType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(15, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                positionOffset_ = value;
              }
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
              pb.Status.EmcPositionFeedbackType value = pb.Status.EmcPositionFeedbackType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                positionFeedback_ = value;
              }
              break;
            }
            case 137: {
              bitField0_ |= 0x00001000;
              maxFeedOverride_ = input.readDouble();
              break;
            }
            case 145: {
              bitField0_ |= 0x00002000;
              minFeedOverride_ = input.readDouble();
              break;
            }
            case 153: {
              bitField0_ |= 0x00004000;
              maxSpindleOverride_ = input.readDouble();
              break;
            }
            case 161: {
              bitField0_ |= 0x00008000;
              minSpindleOverride_ = input.readDouble();
              break;
            }
            case 169: {
              bitField0_ |= 0x00010000;
              defaultSpindleSpeed_ = input.readDouble();
              break;
            }
            case 177: {
              bitField0_ |= 0x00020000;
              defaultLinearVelocity_ = input.readDouble();
              break;
            }
            case 185: {
              bitField0_ |= 0x00040000;
              minVelocity_ = input.readDouble();
              break;
            }
            case 193: {
              bitField0_ |= 0x00080000;
              maxLinearVelocity_ = input.readDouble();
              break;
            }
            case 201: {
              bitField0_ |= 0x00100000;
              minLinearVelocity_ = input.readDouble();
              break;
            }
            case 209: {
              bitField0_ |= 0x00200000;
              defaultAngularVelocity_ = input.readDouble();
              break;
            }
            case 217: {
              bitField0_ |= 0x00400000;
              maxAngularVelocity_ = input.readDouble();
              break;
            }
            case 225: {
              bitField0_ |= 0x00800000;
              minAngularVelocity_ = input.readDouble();
              break;
            }
            case 234: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x01000000;
              increments_ = bs;
              break;
            }
            case 242: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x02000000;
              grids_ = bs;
              break;
            }
            case 248: {
              bitField0_ |= 0x04000000;
              lathe_ = input.readBool();
              break;
            }
            case 258: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x08000000;
              geometry_ = bs;
              break;
            }
            case 264: {
              bitField0_ |= 0x10000000;
              arcdivision_ = input.readUInt32();
              break;
            }
            case 272: {
              bitField0_ |= 0x20000000;
              noForceHoming_ = input.readBool();
              break;
            }
            case 282: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x40000000;
              remotePath_ = bs;
              break;
            }
            case 288: {
              int rawValue = input.readEnum();
              pb.Status.EmcTimeUnitsType value = pb.Status.EmcTimeUnitsType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(36, rawValue);
              } else {
                bitField0_ |= 0x80000000;
                timeUnits_ = value;
              }
              break;
            }
            case 298: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 306: {
              if (!((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
                userCommand_ = new java.util.ArrayList<pb.Status.EmcStatusUserCommand>();
                mutable_bitField1_ |= 0x00000008;
              }
              userCommand_.add(input.readMessage(pb.Status.EmcStatusUserCommand.PARSER, extensionRegistry));
              break;
            }
            case 312: {
              int rawValue = input.readEnum();
              pb.Status.EmcAngularUnitsType value = pb.Status.EmcAngularUnitsType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(39, rawValue);
              } else {
                bitField1_ |= 0x00000002;
                angularUnits_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          axis_ = java.util.Collections.unmodifiableList(axis_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          programExtension_ = java.util.Collections.unmodifiableList(programExtension_);
        }
        if (((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
          userCommand_ = java.util.Collections.unmodifiableList(userCommand_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusConfig.class, pb.Status.EmcStatusConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusConfig> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusConfig>() {
      public EmcStatusConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int DEFAULT_ACCELERATION_FIELD_NUMBER = 1;
    private double defaultAcceleration_;
    /**
     * <code>optional double default_acceleration = 1;</code>
     *
     * <pre>
     *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
     * </pre>
     */
    public boolean hasDefaultAcceleration() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double default_acceleration = 1;</code>
     *
     * <pre>
     *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
     * </pre>
     */
    public double getDefaultAcceleration() {
      return defaultAcceleration_;
    }

    public static final int AXES_FIELD_NUMBER = 3;
    private int axes_;
    /**
     * <code>optional int32 axes = 3;</code>
     *
     * <pre>
     *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
     * </pre>
     */
    public boolean hasAxes() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 axes = 3;</code>
     *
     * <pre>
     *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
     * </pre>
     */
    public int getAxes() {
      return axes_;
    }

    public static final int AXIS_FIELD_NUMBER = 4;
    private java.util.List<pb.Status.EmcStatusConfigAxis> axis_;
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusConfigAxis> getAxisList() {
      return axis_;
    }
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusConfigAxisOrBuilder> 
        getAxisOrBuilderList() {
      return axis_;
    }
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    public int getAxisCount() {
      return axis_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    public pb.Status.EmcStatusConfigAxis getAxis(int index) {
      return axis_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
     *
     * <pre>
     *&#47; Per axis configuration values.
     * </pre>
     */
    public pb.Status.EmcStatusConfigAxisOrBuilder getAxisOrBuilder(
        int index) {
      return axis_.get(index);
    }

    public static final int AXIS_MASK_FIELD_NUMBER = 5;
    private int axisMask_;
    /**
     * <code>optional int32 axis_mask = 5;</code>
     *
     * <pre>
     *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
     * </pre>
     */
    public boolean hasAxisMask() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 axis_mask = 5;</code>
     *
     * <pre>
     *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
     * </pre>
     */
    public int getAxisMask() {
      return axisMask_;
    }

    public static final int CYCLE_TIME_FIELD_NUMBER = 6;
    private double cycleTime_;
    /**
     * <code>optional double cycle_time = 6;</code>
     *
     * <pre>
     *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
     * </pre>
     */
    public boolean hasCycleTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double cycle_time = 6;</code>
     *
     * <pre>
     *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
     * </pre>
     */
    public double getCycleTime() {
      return cycleTime_;
    }

    public static final int DEBUG_FIELD_NUMBER = 7;
    private int debug_;
    /**
     * <code>optional int32 debug = 7;</code>
     *
     * <pre>
     *&#47; Debug flag.
     * </pre>
     */
    public boolean hasDebug() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 debug = 7;</code>
     *
     * <pre>
     *&#47; Debug flag.
     * </pre>
     */
    public int getDebug() {
      return debug_;
    }

    public static final int KINEMATICS_TYPE_FIELD_NUMBER = 8;
    private pb.Status.EmcKinematicsType kinematicsType_;
    /**
     * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
     *
     * <pre>
     *&#47; Kinematics type.
     * </pre>
     */
    public boolean hasKinematicsType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
     *
     * <pre>
     *&#47; Kinematics type.
     * </pre>
     */
    public pb.Status.EmcKinematicsType getKinematicsType() {
      return kinematicsType_;
    }

    public static final int MAX_ACCELERATION_FIELD_NUMBER = 10;
    private double maxAcceleration_;
    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
     * </pre>
     */
    public boolean hasMaxAcceleration() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double max_acceleration = 10;</code>
     *
     * <pre>
     *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
     * </pre>
     */
    public double getMaxAcceleration() {
      return maxAcceleration_;
    }

    public static final int MAX_VELOCITY_FIELD_NUMBER = 11;
    private double maxVelocity_;
    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
     * </pre>
     */
    public boolean hasMaxVelocity() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double max_velocity = 11;</code>
     *
     * <pre>
     *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
     * </pre>
     */
    public double getMaxVelocity() {
      return maxVelocity_;
    }

    public static final int LINEAR_UNITS_FIELD_NUMBER = 12;
    private pb.Status.EmcLinearUnitsType linearUnits_;
    /**
     * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
     *
     * <pre>
     *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
     * </pre>
     */
    public boolean hasLinearUnits() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
     *
     * <pre>
     *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
     * </pre>
     */
    public pb.Status.EmcLinearUnitsType getLinearUnits() {
      return linearUnits_;
    }

    public static final int DEFAULT_VELOCITY_FIELD_NUMBER = 13;
    private double defaultVelocity_;
    /**
     * <code>optional double default_velocity = 13;</code>
     *
     * <pre>
     *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
     * </pre>
     */
    public boolean hasDefaultVelocity() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double default_velocity = 13;</code>
     *
     * <pre>
     *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
     * </pre>
     */
    public double getDefaultVelocity() {
      return defaultVelocity_;
    }

    public static final int PROGRAM_EXTENSION_FIELD_NUMBER = 14;
    private java.util.List<pb.Status.EmcProgramExtension> programExtension_;
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    public java.util.List<pb.Status.EmcProgramExtension> getProgramExtensionList() {
      return programExtension_;
    }
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcProgramExtensionOrBuilder> 
        getProgramExtensionOrBuilderList() {
      return programExtension_;
    }
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    public int getProgramExtensionCount() {
      return programExtension_.size();
    }
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    public pb.Status.EmcProgramExtension getProgramExtension(int index) {
      return programExtension_.get(index);
    }
    /**
     * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
     *
     * <pre>
     *&#47; List if program supported program extensions.
     * </pre>
     */
    public pb.Status.EmcProgramExtensionOrBuilder getProgramExtensionOrBuilder(
        int index) {
      return programExtension_.get(index);
    }

    public static final int POSITION_OFFSET_FIELD_NUMBER = 15;
    private pb.Status.EmcPositionOffsetType positionOffset_;
    /**
     * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
     *
     * <pre>
     *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
     * </pre>
     */
    public boolean hasPositionOffset() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
     *
     * <pre>
     *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
     * </pre>
     */
    public pb.Status.EmcPositionOffsetType getPositionOffset() {
      return positionOffset_;
    }

    public static final int POSITION_FEEDBACK_FIELD_NUMBER = 16;
    private pb.Status.EmcPositionFeedbackType positionFeedback_;
    /**
     * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
     *
     * <pre>
     *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
     * </pre>
     */
    public boolean hasPositionFeedback() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
     *
     * <pre>
     *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
     * </pre>
     */
    public pb.Status.EmcPositionFeedbackType getPositionFeedback() {
      return positionFeedback_;
    }

    public static final int MAX_FEED_OVERRIDE_FIELD_NUMBER = 17;
    private double maxFeedOverride_;
    /**
     * <code>optional double max_feed_override = 17;</code>
     *
     * <pre>
     *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
     * </pre>
     */
    public boolean hasMaxFeedOverride() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional double max_feed_override = 17;</code>
     *
     * <pre>
     *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
     * </pre>
     */
    public double getMaxFeedOverride() {
      return maxFeedOverride_;
    }

    public static final int MIN_FEED_OVERRIDE_FIELD_NUMBER = 18;
    private double minFeedOverride_;
    /**
     * <code>optional double min_feed_override = 18;</code>
     *
     * <pre>
     *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
     * </pre>
     */
    public boolean hasMinFeedOverride() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional double min_feed_override = 18;</code>
     *
     * <pre>
     *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
     * </pre>
     */
    public double getMinFeedOverride() {
      return minFeedOverride_;
    }

    public static final int MAX_SPINDLE_OVERRIDE_FIELD_NUMBER = 19;
    private double maxSpindleOverride_;
    /**
     * <code>optional double max_spindle_override = 19;</code>
     *
     * <pre>
     *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
     * </pre>
     */
    public boolean hasMaxSpindleOverride() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional double max_spindle_override = 19;</code>
     *
     * <pre>
     *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
     * </pre>
     */
    public double getMaxSpindleOverride() {
      return maxSpindleOverride_;
    }

    public static final int MIN_SPINDLE_OVERRIDE_FIELD_NUMBER = 20;
    private double minSpindleOverride_;
    /**
     * <code>optional double min_spindle_override = 20;</code>
     *
     * <pre>
     *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
     * </pre>
     */
    public boolean hasMinSpindleOverride() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional double min_spindle_override = 20;</code>
     *
     * <pre>
     *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
     * </pre>
     */
    public double getMinSpindleOverride() {
      return minSpindleOverride_;
    }

    public static final int DEFAULT_SPINDLE_SPEED_FIELD_NUMBER = 21;
    private double defaultSpindleSpeed_;
    /**
     * <code>optional double default_spindle_speed = 21;</code>
     *
     * <pre>
     *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
     * </pre>
     */
    public boolean hasDefaultSpindleSpeed() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional double default_spindle_speed = 21;</code>
     *
     * <pre>
     *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
     * </pre>
     */
    public double getDefaultSpindleSpeed() {
      return defaultSpindleSpeed_;
    }

    public static final int DEFAULT_LINEAR_VELOCITY_FIELD_NUMBER = 22;
    private double defaultLinearVelocity_;
    /**
     * <code>optional double default_linear_velocity = 22;</code>
     *
     * <pre>
     *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
     * </pre>
     */
    public boolean hasDefaultLinearVelocity() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional double default_linear_velocity = 22;</code>
     *
     * <pre>
     *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
     * </pre>
     */
    public double getDefaultLinearVelocity() {
      return defaultLinearVelocity_;
    }

    public static final int MIN_VELOCITY_FIELD_NUMBER = 23;
    private double minVelocity_;
    /**
     * <code>optional double min_velocity = 23;</code>
     *
     * <pre>
     *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
     * </pre>
     */
    public boolean hasMinVelocity() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional double min_velocity = 23;</code>
     *
     * <pre>
     *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
     * </pre>
     */
    public double getMinVelocity() {
      return minVelocity_;
    }

    public static final int MAX_LINEAR_VELOCITY_FIELD_NUMBER = 24;
    private double maxLinearVelocity_;
    /**
     * <code>optional double max_linear_velocity = 24;</code>
     *
     * <pre>
     *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
     * </pre>
     */
    public boolean hasMaxLinearVelocity() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional double max_linear_velocity = 24;</code>
     *
     * <pre>
     *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
     * </pre>
     */
    public double getMaxLinearVelocity() {
      return maxLinearVelocity_;
    }

    public static final int MIN_LINEAR_VELOCITY_FIELD_NUMBER = 25;
    private double minLinearVelocity_;
    /**
     * <code>optional double min_linear_velocity = 25;</code>
     *
     * <pre>
     *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
     * </pre>
     */
    public boolean hasMinLinearVelocity() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional double min_linear_velocity = 25;</code>
     *
     * <pre>
     *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
     * </pre>
     */
    public double getMinLinearVelocity() {
      return minLinearVelocity_;
    }

    public static final int DEFAULT_ANGULAR_VELOCITY_FIELD_NUMBER = 26;
    private double defaultAngularVelocity_;
    /**
     * <code>optional double default_angular_velocity = 26;</code>
     *
     * <pre>
     *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
     * </pre>
     */
    public boolean hasDefaultAngularVelocity() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional double default_angular_velocity = 26;</code>
     *
     * <pre>
     *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
     * </pre>
     */
    public double getDefaultAngularVelocity() {
      return defaultAngularVelocity_;
    }

    public static final int MAX_ANGULAR_VELOCITY_FIELD_NUMBER = 27;
    private double maxAngularVelocity_;
    /**
     * <code>optional double max_angular_velocity = 27;</code>
     *
     * <pre>
     *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
     * </pre>
     */
    public boolean hasMaxAngularVelocity() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional double max_angular_velocity = 27;</code>
     *
     * <pre>
     *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
     * </pre>
     */
    public double getMaxAngularVelocity() {
      return maxAngularVelocity_;
    }

    public static final int MIN_ANGULAR_VELOCITY_FIELD_NUMBER = 28;
    private double minAngularVelocity_;
    /**
     * <code>optional double min_angular_velocity = 28;</code>
     *
     * <pre>
     *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
     * </pre>
     */
    public boolean hasMinAngularVelocity() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional double min_angular_velocity = 28;</code>
     *
     * <pre>
     *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
     * </pre>
     */
    public double getMinAngularVelocity() {
      return minAngularVelocity_;
    }

    public static final int INCREMENTS_FIELD_NUMBER = 29;
    private java.lang.Object increments_;
    /**
     * <code>optional string increments = 29;</code>
     *
     * <pre>
     *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
     * </pre>
     */
    public boolean hasIncrements() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional string increments = 29;</code>
     *
     * <pre>
     *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
     * </pre>
     */
    public java.lang.String getIncrements() {
      java.lang.Object ref = increments_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          increments_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string increments = 29;</code>
     *
     * <pre>
     *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIncrementsBytes() {
      java.lang.Object ref = increments_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        increments_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GRIDS_FIELD_NUMBER = 30;
    private java.lang.Object grids_;
    /**
     * <code>optional string grids = 30;</code>
     *
     * <pre>
     *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
     * </pre>
     */
    public boolean hasGrids() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional string grids = 30;</code>
     *
     * <pre>
     *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
     * </pre>
     */
    public java.lang.String getGrids() {
      java.lang.Object ref = grids_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          grids_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string grids = 30;</code>
     *
     * <pre>
     *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGridsBytes() {
      java.lang.Object ref = grids_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        grids_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LATHE_FIELD_NUMBER = 31;
    private boolean lathe_;
    /**
     * <code>optional bool lathe = 31;</code>
     *
     * <pre>
     *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
     * </pre>
     */
    public boolean hasLathe() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional bool lathe = 31;</code>
     *
     * <pre>
     *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
     * </pre>
     */
    public boolean getLathe() {
      return lathe_;
    }

    public static final int GEOMETRY_FIELD_NUMBER = 32;
    private java.lang.Object geometry_;
    /**
     * <code>optional string geometry = 32;</code>
     *
     * <pre>
     *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
     * </pre>
     */
    public boolean hasGeometry() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional string geometry = 32;</code>
     *
     * <pre>
     *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
     * </pre>
     */
    public java.lang.String getGeometry() {
      java.lang.Object ref = geometry_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          geometry_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string geometry = 32;</code>
     *
     * <pre>
     *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGeometryBytes() {
      java.lang.Object ref = geometry_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        geometry_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARCDIVISION_FIELD_NUMBER = 33;
    private int arcdivision_;
    /**
     * <code>optional uint32 arcdivision = 33;</code>
     *
     * <pre>
     *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
     * </pre>
     */
    public boolean hasArcdivision() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 arcdivision = 33;</code>
     *
     * <pre>
     *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
     * </pre>
     */
    public int getArcdivision() {
      return arcdivision_;
    }

    public static final int NO_FORCE_HOMING_FIELD_NUMBER = 34;
    private boolean noForceHoming_;
    /**
     * <code>optional bool no_force_homing = 34;</code>
     *
     * <pre>
     *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
     * </pre>
     */
    public boolean hasNoForceHoming() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional bool no_force_homing = 34;</code>
     *
     * <pre>
     *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
     * </pre>
     */
    public boolean getNoForceHoming() {
      return noForceHoming_;
    }

    public static final int REMOTE_PATH_FIELD_NUMBER = 35;
    private java.lang.Object remotePath_;
    /**
     * <code>optional string remote_path = 35;</code>
     *
     * <pre>
     *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
     * </pre>
     */
    public boolean hasRemotePath() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional string remote_path = 35;</code>
     *
     * <pre>
     *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
     * </pre>
     */
    public java.lang.String getRemotePath() {
      java.lang.Object ref = remotePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          remotePath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string remote_path = 35;</code>
     *
     * <pre>
     *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRemotePathBytes() {
      java.lang.Object ref = remotePath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        remotePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIME_UNITS_FIELD_NUMBER = 36;
    private pb.Status.EmcTimeUnitsType timeUnits_;
    /**
     * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
     *
     * <pre>
     *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
     * </pre>
     */
    public boolean hasTimeUnits() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
     *
     * <pre>
     *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
     * </pre>
     */
    public pb.Status.EmcTimeUnitsType getTimeUnits() {
      return timeUnits_;
    }

    public static final int NAME_FIELD_NUMBER = 37;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 37;</code>
     *
     * <pre>
     *&#47; Machine name. Reflects [EMC]MACHINE
     * </pre>
     */
    public boolean hasName() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 37;</code>
     *
     * <pre>
     *&#47; Machine name. Reflects [EMC]MACHINE
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 37;</code>
     *
     * <pre>
     *&#47; Machine name. Reflects [EMC]MACHINE
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USER_COMMAND_FIELD_NUMBER = 38;
    private java.util.List<pb.Status.EmcStatusUserCommand> userCommand_;
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusUserCommand> getUserCommandList() {
      return userCommand_;
    }
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusUserCommandOrBuilder> 
        getUserCommandOrBuilderList() {
      return userCommand_;
    }
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    public int getUserCommandCount() {
      return userCommand_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    public pb.Status.EmcStatusUserCommand getUserCommand(int index) {
      return userCommand_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
     *
     * <pre>
     *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
     * </pre>
     */
    public pb.Status.EmcStatusUserCommandOrBuilder getUserCommandOrBuilder(
        int index) {
      return userCommand_.get(index);
    }

    public static final int ANGULAR_UNITS_FIELD_NUMBER = 39;
    private pb.Status.EmcAngularUnitsType angularUnits_;
    /**
     * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
     *
     * <pre>
     *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
     * </pre>
     */
    public boolean hasAngularUnits() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
     *
     * <pre>
     *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
     * </pre>
     */
    public pb.Status.EmcAngularUnitsType getAngularUnits() {
      return angularUnits_;
    }

    private void initFields() {
      defaultAcceleration_ = 0D;
      axes_ = 0;
      axis_ = java.util.Collections.emptyList();
      axisMask_ = 0;
      cycleTime_ = 0D;
      debug_ = 0;
      kinematicsType_ = pb.Status.EmcKinematicsType.KINEMATICS_IDENTITY;
      maxAcceleration_ = 0D;
      maxVelocity_ = 0D;
      linearUnits_ = pb.Status.EmcLinearUnitsType.LINEAR_UNITS_INCHES;
      defaultVelocity_ = 0D;
      programExtension_ = java.util.Collections.emptyList();
      positionOffset_ = pb.Status.EmcPositionOffsetType.EMC_CONFIG_RELATIVE_OFFSET;
      positionFeedback_ = pb.Status.EmcPositionFeedbackType.EMC_CONFIG_ACTUAL_FEEDBACK;
      maxFeedOverride_ = 0D;
      minFeedOverride_ = 0D;
      maxSpindleOverride_ = 0D;
      minSpindleOverride_ = 0D;
      defaultSpindleSpeed_ = 0D;
      defaultLinearVelocity_ = 0D;
      minVelocity_ = 0D;
      maxLinearVelocity_ = 0D;
      minLinearVelocity_ = 0D;
      defaultAngularVelocity_ = 0D;
      maxAngularVelocity_ = 0D;
      minAngularVelocity_ = 0D;
      increments_ = "";
      grids_ = "";
      lathe_ = false;
      geometry_ = "";
      arcdivision_ = 0;
      noForceHoming_ = false;
      remotePath_ = "";
      timeUnits_ = pb.Status.EmcTimeUnitsType.TIME_UNITS_MINUTE;
      name_ = "";
      userCommand_ = java.util.Collections.emptyList();
      angularUnits_ = pb.Status.EmcAngularUnitsType.ANGULAR_UNITS_DEGREES;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getAxisCount(); i++) {
        if (!getAxis(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getProgramExtensionCount(); i++) {
        if (!getProgramExtension(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getUserCommandCount(); i++) {
        if (!getUserCommand(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, defaultAcceleration_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, axes_);
      }
      for (int i = 0; i < axis_.size(); i++) {
        output.writeMessage(4, axis_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, axisMask_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(6, cycleTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, debug_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(8, kinematicsType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(10, maxAcceleration_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(11, maxVelocity_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(12, linearUnits_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(13, defaultVelocity_);
      }
      for (int i = 0; i < programExtension_.size(); i++) {
        output.writeMessage(14, programExtension_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(15, positionOffset_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(16, positionFeedback_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(17, maxFeedOverride_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(18, minFeedOverride_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeDouble(19, maxSpindleOverride_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeDouble(20, minSpindleOverride_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeDouble(21, defaultSpindleSpeed_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeDouble(22, defaultLinearVelocity_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeDouble(23, minVelocity_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeDouble(24, maxLinearVelocity_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeDouble(25, minLinearVelocity_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeDouble(26, defaultAngularVelocity_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeDouble(27, maxAngularVelocity_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeDouble(28, minAngularVelocity_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeBytes(29, getIncrementsBytes());
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeBytes(30, getGridsBytes());
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeBool(31, lathe_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeBytes(32, getGeometryBytes());
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(33, arcdivision_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeBool(34, noForceHoming_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeBytes(35, getRemotePathBytes());
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeEnum(36, timeUnits_.getNumber());
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(37, getNameBytes());
      }
      for (int i = 0; i < userCommand_.size(); i++) {
        output.writeMessage(38, userCommand_.get(i));
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(39, angularUnits_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, defaultAcceleration_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, axes_);
      }
      for (int i = 0; i < axis_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, axis_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, axisMask_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, cycleTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, debug_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, kinematicsType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, maxAcceleration_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, maxVelocity_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, linearUnits_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, defaultVelocity_);
      }
      for (int i = 0; i < programExtension_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, programExtension_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, positionOffset_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, positionFeedback_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, maxFeedOverride_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, minFeedOverride_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, maxSpindleOverride_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, minSpindleOverride_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, defaultSpindleSpeed_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, defaultLinearVelocity_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(23, minVelocity_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(24, maxLinearVelocity_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, minLinearVelocity_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(26, defaultAngularVelocity_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(27, maxAngularVelocity_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(28, minAngularVelocity_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(29, getIncrementsBytes());
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(30, getGridsBytes());
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(31, lathe_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(32, getGeometryBytes());
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(33, arcdivision_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(34, noForceHoming_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(35, getRemotePathBytes());
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(36, timeUnits_.getNumber());
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(37, getNameBytes());
      }
      for (int i = 0; i < userCommand_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, userCommand_.get(i));
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(39, angularUnits_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusConfig}
     *
     * <pre>
     **
     * EMC status configuration message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusConfig)
        pb.Status.EmcStatusConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusConfig.class, pb.Status.EmcStatusConfig.Builder.class);
      }

      // Construct using pb.Status.EmcStatusConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAxisFieldBuilder();
          getProgramExtensionFieldBuilder();
          getUserCommandFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        defaultAcceleration_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        axes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (axisBuilder_ == null) {
          axis_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          axisBuilder_.clear();
        }
        axisMask_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cycleTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        debug_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        kinematicsType_ = pb.Status.EmcKinematicsType.KINEMATICS_IDENTITY;
        bitField0_ = (bitField0_ & ~0x00000040);
        maxAcceleration_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        linearUnits_ = pb.Status.EmcLinearUnitsType.LINEAR_UNITS_INCHES;
        bitField0_ = (bitField0_ & ~0x00000200);
        defaultVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (programExtensionBuilder_ == null) {
          programExtension_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          programExtensionBuilder_.clear();
        }
        positionOffset_ = pb.Status.EmcPositionOffsetType.EMC_CONFIG_RELATIVE_OFFSET;
        bitField0_ = (bitField0_ & ~0x00001000);
        positionFeedback_ = pb.Status.EmcPositionFeedbackType.EMC_CONFIG_ACTUAL_FEEDBACK;
        bitField0_ = (bitField0_ & ~0x00002000);
        maxFeedOverride_ = 0D;
        bitField0_ = (bitField0_ & ~0x00004000);
        minFeedOverride_ = 0D;
        bitField0_ = (bitField0_ & ~0x00008000);
        maxSpindleOverride_ = 0D;
        bitField0_ = (bitField0_ & ~0x00010000);
        minSpindleOverride_ = 0D;
        bitField0_ = (bitField0_ & ~0x00020000);
        defaultSpindleSpeed_ = 0D;
        bitField0_ = (bitField0_ & ~0x00040000);
        defaultLinearVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00080000);
        minVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00100000);
        maxLinearVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00200000);
        minLinearVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00400000);
        defaultAngularVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00800000);
        maxAngularVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x01000000);
        minAngularVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x02000000);
        increments_ = "";
        bitField0_ = (bitField0_ & ~0x04000000);
        grids_ = "";
        bitField0_ = (bitField0_ & ~0x08000000);
        lathe_ = false;
        bitField0_ = (bitField0_ & ~0x10000000);
        geometry_ = "";
        bitField0_ = (bitField0_ & ~0x20000000);
        arcdivision_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        noForceHoming_ = false;
        bitField0_ = (bitField0_ & ~0x80000000);
        remotePath_ = "";
        bitField1_ = (bitField1_ & ~0x00000001);
        timeUnits_ = pb.Status.EmcTimeUnitsType.TIME_UNITS_MINUTE;
        bitField1_ = (bitField1_ & ~0x00000002);
        name_ = "";
        bitField1_ = (bitField1_ & ~0x00000004);
        if (userCommandBuilder_ == null) {
          userCommand_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000008);
        } else {
          userCommandBuilder_.clear();
        }
        angularUnits_ = pb.Status.EmcAngularUnitsType.ANGULAR_UNITS_DEGREES;
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusConfig_descriptor;
      }

      public pb.Status.EmcStatusConfig getDefaultInstanceForType() {
        return pb.Status.EmcStatusConfig.getDefaultInstance();
      }

      public pb.Status.EmcStatusConfig build() {
        pb.Status.EmcStatusConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusConfig buildPartial() {
        pb.Status.EmcStatusConfig result = new pb.Status.EmcStatusConfig(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.defaultAcceleration_ = defaultAcceleration_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.axes_ = axes_;
        if (axisBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            axis_ = java.util.Collections.unmodifiableList(axis_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.axis_ = axis_;
        } else {
          result.axis_ = axisBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.axisMask_ = axisMask_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cycleTime_ = cycleTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.debug_ = debug_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.kinematicsType_ = kinematicsType_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxAcceleration_ = maxAcceleration_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.maxVelocity_ = maxVelocity_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.linearUnits_ = linearUnits_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.defaultVelocity_ = defaultVelocity_;
        if (programExtensionBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            programExtension_ = java.util.Collections.unmodifiableList(programExtension_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.programExtension_ = programExtension_;
        } else {
          result.programExtension_ = programExtensionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.positionOffset_ = positionOffset_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.positionFeedback_ = positionFeedback_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.maxFeedOverride_ = maxFeedOverride_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.minFeedOverride_ = minFeedOverride_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.maxSpindleOverride_ = maxSpindleOverride_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.minSpindleOverride_ = minSpindleOverride_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.defaultSpindleSpeed_ = defaultSpindleSpeed_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.defaultLinearVelocity_ = defaultLinearVelocity_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.minVelocity_ = minVelocity_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.maxLinearVelocity_ = maxLinearVelocity_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.minLinearVelocity_ = minLinearVelocity_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.defaultAngularVelocity_ = defaultAngularVelocity_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.maxAngularVelocity_ = maxAngularVelocity_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.minAngularVelocity_ = minAngularVelocity_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.increments_ = increments_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.grids_ = grids_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.lathe_ = lathe_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.geometry_ = geometry_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.arcdivision_ = arcdivision_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.noForceHoming_ = noForceHoming_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x40000000;
        }
        result.remotePath_ = remotePath_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x80000000;
        }
        result.timeUnits_ = timeUnits_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000001;
        }
        result.name_ = name_;
        if (userCommandBuilder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008)) {
            userCommand_ = java.util.Collections.unmodifiableList(userCommand_);
            bitField1_ = (bitField1_ & ~0x00000008);
          }
          result.userCommand_ = userCommand_;
        } else {
          result.userCommand_ = userCommandBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000002;
        }
        result.angularUnits_ = angularUnits_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusConfig) {
          return mergeFrom((pb.Status.EmcStatusConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusConfig other) {
        if (other == pb.Status.EmcStatusConfig.getDefaultInstance()) return this;
        if (other.hasDefaultAcceleration()) {
          setDefaultAcceleration(other.getDefaultAcceleration());
        }
        if (other.hasAxes()) {
          setAxes(other.getAxes());
        }
        if (axisBuilder_ == null) {
          if (!other.axis_.isEmpty()) {
            if (axis_.isEmpty()) {
              axis_ = other.axis_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureAxisIsMutable();
              axis_.addAll(other.axis_);
            }
            onChanged();
          }
        } else {
          if (!other.axis_.isEmpty()) {
            if (axisBuilder_.isEmpty()) {
              axisBuilder_.dispose();
              axisBuilder_ = null;
              axis_ = other.axis_;
              bitField0_ = (bitField0_ & ~0x00000004);
              axisBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAxisFieldBuilder() : null;
            } else {
              axisBuilder_.addAllMessages(other.axis_);
            }
          }
        }
        if (other.hasAxisMask()) {
          setAxisMask(other.getAxisMask());
        }
        if (other.hasCycleTime()) {
          setCycleTime(other.getCycleTime());
        }
        if (other.hasDebug()) {
          setDebug(other.getDebug());
        }
        if (other.hasKinematicsType()) {
          setKinematicsType(other.getKinematicsType());
        }
        if (other.hasMaxAcceleration()) {
          setMaxAcceleration(other.getMaxAcceleration());
        }
        if (other.hasMaxVelocity()) {
          setMaxVelocity(other.getMaxVelocity());
        }
        if (other.hasLinearUnits()) {
          setLinearUnits(other.getLinearUnits());
        }
        if (other.hasDefaultVelocity()) {
          setDefaultVelocity(other.getDefaultVelocity());
        }
        if (programExtensionBuilder_ == null) {
          if (!other.programExtension_.isEmpty()) {
            if (programExtension_.isEmpty()) {
              programExtension_ = other.programExtension_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureProgramExtensionIsMutable();
              programExtension_.addAll(other.programExtension_);
            }
            onChanged();
          }
        } else {
          if (!other.programExtension_.isEmpty()) {
            if (programExtensionBuilder_.isEmpty()) {
              programExtensionBuilder_.dispose();
              programExtensionBuilder_ = null;
              programExtension_ = other.programExtension_;
              bitField0_ = (bitField0_ & ~0x00000800);
              programExtensionBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getProgramExtensionFieldBuilder() : null;
            } else {
              programExtensionBuilder_.addAllMessages(other.programExtension_);
            }
          }
        }
        if (other.hasPositionOffset()) {
          setPositionOffset(other.getPositionOffset());
        }
        if (other.hasPositionFeedback()) {
          setPositionFeedback(other.getPositionFeedback());
        }
        if (other.hasMaxFeedOverride()) {
          setMaxFeedOverride(other.getMaxFeedOverride());
        }
        if (other.hasMinFeedOverride()) {
          setMinFeedOverride(other.getMinFeedOverride());
        }
        if (other.hasMaxSpindleOverride()) {
          setMaxSpindleOverride(other.getMaxSpindleOverride());
        }
        if (other.hasMinSpindleOverride()) {
          setMinSpindleOverride(other.getMinSpindleOverride());
        }
        if (other.hasDefaultSpindleSpeed()) {
          setDefaultSpindleSpeed(other.getDefaultSpindleSpeed());
        }
        if (other.hasDefaultLinearVelocity()) {
          setDefaultLinearVelocity(other.getDefaultLinearVelocity());
        }
        if (other.hasMinVelocity()) {
          setMinVelocity(other.getMinVelocity());
        }
        if (other.hasMaxLinearVelocity()) {
          setMaxLinearVelocity(other.getMaxLinearVelocity());
        }
        if (other.hasMinLinearVelocity()) {
          setMinLinearVelocity(other.getMinLinearVelocity());
        }
        if (other.hasDefaultAngularVelocity()) {
          setDefaultAngularVelocity(other.getDefaultAngularVelocity());
        }
        if (other.hasMaxAngularVelocity()) {
          setMaxAngularVelocity(other.getMaxAngularVelocity());
        }
        if (other.hasMinAngularVelocity()) {
          setMinAngularVelocity(other.getMinAngularVelocity());
        }
        if (other.hasIncrements()) {
          bitField0_ |= 0x04000000;
          increments_ = other.increments_;
          onChanged();
        }
        if (other.hasGrids()) {
          bitField0_ |= 0x08000000;
          grids_ = other.grids_;
          onChanged();
        }
        if (other.hasLathe()) {
          setLathe(other.getLathe());
        }
        if (other.hasGeometry()) {
          bitField0_ |= 0x20000000;
          geometry_ = other.geometry_;
          onChanged();
        }
        if (other.hasArcdivision()) {
          setArcdivision(other.getArcdivision());
        }
        if (other.hasNoForceHoming()) {
          setNoForceHoming(other.getNoForceHoming());
        }
        if (other.hasRemotePath()) {
          bitField1_ |= 0x00000001;
          remotePath_ = other.remotePath_;
          onChanged();
        }
        if (other.hasTimeUnits()) {
          setTimeUnits(other.getTimeUnits());
        }
        if (other.hasName()) {
          bitField1_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (userCommandBuilder_ == null) {
          if (!other.userCommand_.isEmpty()) {
            if (userCommand_.isEmpty()) {
              userCommand_ = other.userCommand_;
              bitField1_ = (bitField1_ & ~0x00000008);
            } else {
              ensureUserCommandIsMutable();
              userCommand_.addAll(other.userCommand_);
            }
            onChanged();
          }
        } else {
          if (!other.userCommand_.isEmpty()) {
            if (userCommandBuilder_.isEmpty()) {
              userCommandBuilder_.dispose();
              userCommandBuilder_ = null;
              userCommand_ = other.userCommand_;
              bitField1_ = (bitField1_ & ~0x00000008);
              userCommandBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCommandFieldBuilder() : null;
            } else {
              userCommandBuilder_.addAllMessages(other.userCommand_);
            }
          }
        }
        if (other.hasAngularUnits()) {
          setAngularUnits(other.getAngularUnits());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getAxisCount(); i++) {
          if (!getAxis(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getProgramExtensionCount(); i++) {
          if (!getProgramExtension(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getUserCommandCount(); i++) {
          if (!getUserCommand(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private double defaultAcceleration_ ;
      /**
       * <code>optional double default_acceleration = 1;</code>
       *
       * <pre>
       *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
       * </pre>
       */
      public boolean hasDefaultAcceleration() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double default_acceleration = 1;</code>
       *
       * <pre>
       *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
       * </pre>
       */
      public double getDefaultAcceleration() {
        return defaultAcceleration_;
      }
      /**
       * <code>optional double default_acceleration = 1;</code>
       *
       * <pre>
       *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
       * </pre>
       */
      public Builder setDefaultAcceleration(double value) {
        bitField0_ |= 0x00000001;
        defaultAcceleration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double default_acceleration = 1;</code>
       *
       * <pre>
       *&#47; Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
       * </pre>
       */
      public Builder clearDefaultAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000001);
        defaultAcceleration_ = 0D;
        onChanged();
        return this;
      }

      private int axes_ ;
      /**
       * <code>optional int32 axes = 3;</code>
       *
       * <pre>
       *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
       * </pre>
       */
      public boolean hasAxes() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 axes = 3;</code>
       *
       * <pre>
       *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
       * </pre>
       */
      public int getAxes() {
        return axes_;
      }
      /**
       * <code>optional int32 axes = 3;</code>
       *
       * <pre>
       *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
       * </pre>
       */
      public Builder setAxes(int value) {
        bitField0_ |= 0x00000002;
        axes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axes = 3;</code>
       *
       * <pre>
       *optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
       * </pre>
       */
      public Builder clearAxes() {
        bitField0_ = (bitField0_ & ~0x00000002);
        axes_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusConfigAxis> axis_ =
        java.util.Collections.emptyList();
      private void ensureAxisIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          axis_ = new java.util.ArrayList<pb.Status.EmcStatusConfigAxis>(axis_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusConfigAxis, pb.Status.EmcStatusConfigAxis.Builder, pb.Status.EmcStatusConfigAxisOrBuilder> axisBuilder_;

      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusConfigAxis> getAxisList() {
        if (axisBuilder_ == null) {
          return java.util.Collections.unmodifiableList(axis_);
        } else {
          return axisBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public int getAxisCount() {
        if (axisBuilder_ == null) {
          return axis_.size();
        } else {
          return axisBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public pb.Status.EmcStatusConfigAxis getAxis(int index) {
        if (axisBuilder_ == null) {
          return axis_.get(index);
        } else {
          return axisBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder setAxis(
          int index, pb.Status.EmcStatusConfigAxis value) {
        if (axisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisIsMutable();
          axis_.set(index, value);
          onChanged();
        } else {
          axisBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder setAxis(
          int index, pb.Status.EmcStatusConfigAxis.Builder builderForValue) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.set(index, builderForValue.build());
          onChanged();
        } else {
          axisBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder addAxis(pb.Status.EmcStatusConfigAxis value) {
        if (axisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisIsMutable();
          axis_.add(value);
          onChanged();
        } else {
          axisBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder addAxis(
          int index, pb.Status.EmcStatusConfigAxis value) {
        if (axisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisIsMutable();
          axis_.add(index, value);
          onChanged();
        } else {
          axisBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder addAxis(
          pb.Status.EmcStatusConfigAxis.Builder builderForValue) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.add(builderForValue.build());
          onChanged();
        } else {
          axisBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder addAxis(
          int index, pb.Status.EmcStatusConfigAxis.Builder builderForValue) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.add(index, builderForValue.build());
          onChanged();
        } else {
          axisBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder addAllAxis(
          java.lang.Iterable<? extends pb.Status.EmcStatusConfigAxis> values) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, axis_);
          onChanged();
        } else {
          axisBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder clearAxis() {
        if (axisBuilder_ == null) {
          axis_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          axisBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public Builder removeAxis(int index) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.remove(index);
          onChanged();
        } else {
          axisBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public pb.Status.EmcStatusConfigAxis.Builder getAxisBuilder(
          int index) {
        return getAxisFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public pb.Status.EmcStatusConfigAxisOrBuilder getAxisOrBuilder(
          int index) {
        if (axisBuilder_ == null) {
          return axis_.get(index);  } else {
          return axisBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusConfigAxisOrBuilder> 
           getAxisOrBuilderList() {
        if (axisBuilder_ != null) {
          return axisBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(axis_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public pb.Status.EmcStatusConfigAxis.Builder addAxisBuilder() {
        return getAxisFieldBuilder().addBuilder(
            pb.Status.EmcStatusConfigAxis.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public pb.Status.EmcStatusConfigAxis.Builder addAxisBuilder(
          int index) {
        return getAxisFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusConfigAxis.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusConfigAxis axis = 4;</code>
       *
       * <pre>
       *&#47; Per axis configuration values.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusConfigAxis.Builder> 
           getAxisBuilderList() {
        return getAxisFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusConfigAxis, pb.Status.EmcStatusConfigAxis.Builder, pb.Status.EmcStatusConfigAxisOrBuilder> 
          getAxisFieldBuilder() {
        if (axisBuilder_ == null) {
          axisBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusConfigAxis, pb.Status.EmcStatusConfigAxis.Builder, pb.Status.EmcStatusConfigAxisOrBuilder>(
                  axis_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          axis_ = null;
        }
        return axisBuilder_;
      }

      private int axisMask_ ;
      /**
       * <code>optional int32 axis_mask = 5;</code>
       *
       * <pre>
       *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
       * </pre>
       */
      public boolean hasAxisMask() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 axis_mask = 5;</code>
       *
       * <pre>
       *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
       * </pre>
       */
      public int getAxisMask() {
        return axisMask_;
      }
      /**
       * <code>optional int32 axis_mask = 5;</code>
       *
       * <pre>
       *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
       * </pre>
       */
      public Builder setAxisMask(int value) {
        bitField0_ |= 0x00000008;
        axisMask_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 axis_mask = 5;</code>
       *
       * <pre>
       *&#47; Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
       * </pre>
       */
      public Builder clearAxisMask() {
        bitField0_ = (bitField0_ & ~0x00000008);
        axisMask_ = 0;
        onChanged();
        return this;
      }

      private double cycleTime_ ;
      /**
       * <code>optional double cycle_time = 6;</code>
       *
       * <pre>
       *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
       * </pre>
       */
      public boolean hasCycleTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double cycle_time = 6;</code>
       *
       * <pre>
       *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
       * </pre>
       */
      public double getCycleTime() {
        return cycleTime_;
      }
      /**
       * <code>optional double cycle_time = 6;</code>
       *
       * <pre>
       *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
       * </pre>
       */
      public Builder setCycleTime(double value) {
        bitField0_ |= 0x00000010;
        cycleTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cycle_time = 6;</code>
       *
       * <pre>
       *&#47; Polling cycle time. Reflects [TRAJ]CYCLE_TIME
       * </pre>
       */
      public Builder clearCycleTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cycleTime_ = 0D;
        onChanged();
        return this;
      }

      private int debug_ ;
      /**
       * <code>optional int32 debug = 7;</code>
       *
       * <pre>
       *&#47; Debug flag.
       * </pre>
       */
      public boolean hasDebug() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 debug = 7;</code>
       *
       * <pre>
       *&#47; Debug flag.
       * </pre>
       */
      public int getDebug() {
        return debug_;
      }
      /**
       * <code>optional int32 debug = 7;</code>
       *
       * <pre>
       *&#47; Debug flag.
       * </pre>
       */
      public Builder setDebug(int value) {
        bitField0_ |= 0x00000020;
        debug_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 debug = 7;</code>
       *
       * <pre>
       *&#47; Debug flag.
       * </pre>
       */
      public Builder clearDebug() {
        bitField0_ = (bitField0_ & ~0x00000020);
        debug_ = 0;
        onChanged();
        return this;
      }

      private pb.Status.EmcKinematicsType kinematicsType_ = pb.Status.EmcKinematicsType.KINEMATICS_IDENTITY;
      /**
       * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
       *
       * <pre>
       *&#47; Kinematics type.
       * </pre>
       */
      public boolean hasKinematicsType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
       *
       * <pre>
       *&#47; Kinematics type.
       * </pre>
       */
      public pb.Status.EmcKinematicsType getKinematicsType() {
        return kinematicsType_;
      }
      /**
       * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
       *
       * <pre>
       *&#47; Kinematics type.
       * </pre>
       */
      public Builder setKinematicsType(pb.Status.EmcKinematicsType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        kinematicsType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcKinematicsType kinematics_type = 8;</code>
       *
       * <pre>
       *&#47; Kinematics type.
       * </pre>
       */
      public Builder clearKinematicsType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        kinematicsType_ = pb.Status.EmcKinematicsType.KINEMATICS_IDENTITY;
        onChanged();
        return this;
      }

      private double maxAcceleration_ ;
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
       * </pre>
       */
      public boolean hasMaxAcceleration() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
       * </pre>
       */
      public double getMaxAcceleration() {
        return maxAcceleration_;
      }
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
       * </pre>
       */
      public Builder setMaxAcceleration(double value) {
        bitField0_ |= 0x00000080;
        maxAcceleration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_acceleration = 10;</code>
       *
       * <pre>
       *optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
       * </pre>
       */
      public Builder clearMaxAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000080);
        maxAcceleration_ = 0D;
        onChanged();
        return this;
      }

      private double maxVelocity_ ;
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
       * </pre>
       */
      public boolean hasMaxVelocity() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
       * </pre>
       */
      public double getMaxVelocity() {
        return maxVelocity_;
      }
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
       * </pre>
       */
      public Builder setMaxVelocity(double value) {
        bitField0_ |= 0x00000100;
        maxVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_velocity = 11;</code>
       *
       * <pre>
       *&#47; Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
       * </pre>
       */
      public Builder clearMaxVelocity() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxVelocity_ = 0D;
        onChanged();
        return this;
      }

      private pb.Status.EmcLinearUnitsType linearUnits_ = pb.Status.EmcLinearUnitsType.LINEAR_UNITS_INCHES;
      /**
       * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
       *
       * <pre>
       *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
       * </pre>
       */
      public boolean hasLinearUnits() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
       *
       * <pre>
       *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
       * </pre>
       */
      public pb.Status.EmcLinearUnitsType getLinearUnits() {
        return linearUnits_;
      }
      /**
       * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
       *
       * <pre>
       *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
       * </pre>
       */
      public Builder setLinearUnits(pb.Status.EmcLinearUnitsType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        linearUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcLinearUnitsType linear_units = 12;</code>
       *
       * <pre>
       *&#47; Linear machine units. Reflects [TRAJ]LINEAR_UNITS
       * </pre>
       */
      public Builder clearLinearUnits() {
        bitField0_ = (bitField0_ & ~0x00000200);
        linearUnits_ = pb.Status.EmcLinearUnitsType.LINEAR_UNITS_INCHES;
        onChanged();
        return this;
      }

      private double defaultVelocity_ ;
      /**
       * <code>optional double default_velocity = 13;</code>
       *
       * <pre>
       *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
       * </pre>
       */
      public boolean hasDefaultVelocity() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional double default_velocity = 13;</code>
       *
       * <pre>
       *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
       * </pre>
       */
      public double getDefaultVelocity() {
        return defaultVelocity_;
      }
      /**
       * <code>optional double default_velocity = 13;</code>
       *
       * <pre>
       *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
       * </pre>
       */
      public Builder setDefaultVelocity(double value) {
        bitField0_ |= 0x00000400;
        defaultVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double default_velocity = 13;</code>
       *
       * <pre>
       *&#47; Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
       * </pre>
       */
      public Builder clearDefaultVelocity() {
        bitField0_ = (bitField0_ & ~0x00000400);
        defaultVelocity_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcProgramExtension> programExtension_ =
        java.util.Collections.emptyList();
      private void ensureProgramExtensionIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          programExtension_ = new java.util.ArrayList<pb.Status.EmcProgramExtension>(programExtension_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcProgramExtension, pb.Status.EmcProgramExtension.Builder, pb.Status.EmcProgramExtensionOrBuilder> programExtensionBuilder_;

      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public java.util.List<pb.Status.EmcProgramExtension> getProgramExtensionList() {
        if (programExtensionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(programExtension_);
        } else {
          return programExtensionBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public int getProgramExtensionCount() {
        if (programExtensionBuilder_ == null) {
          return programExtension_.size();
        } else {
          return programExtensionBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public pb.Status.EmcProgramExtension getProgramExtension(int index) {
        if (programExtensionBuilder_ == null) {
          return programExtension_.get(index);
        } else {
          return programExtensionBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder setProgramExtension(
          int index, pb.Status.EmcProgramExtension value) {
        if (programExtensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProgramExtensionIsMutable();
          programExtension_.set(index, value);
          onChanged();
        } else {
          programExtensionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder setProgramExtension(
          int index, pb.Status.EmcProgramExtension.Builder builderForValue) {
        if (programExtensionBuilder_ == null) {
          ensureProgramExtensionIsMutable();
          programExtension_.set(index, builderForValue.build());
          onChanged();
        } else {
          programExtensionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder addProgramExtension(pb.Status.EmcProgramExtension value) {
        if (programExtensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProgramExtensionIsMutable();
          programExtension_.add(value);
          onChanged();
        } else {
          programExtensionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder addProgramExtension(
          int index, pb.Status.EmcProgramExtension value) {
        if (programExtensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProgramExtensionIsMutable();
          programExtension_.add(index, value);
          onChanged();
        } else {
          programExtensionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder addProgramExtension(
          pb.Status.EmcProgramExtension.Builder builderForValue) {
        if (programExtensionBuilder_ == null) {
          ensureProgramExtensionIsMutable();
          programExtension_.add(builderForValue.build());
          onChanged();
        } else {
          programExtensionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder addProgramExtension(
          int index, pb.Status.EmcProgramExtension.Builder builderForValue) {
        if (programExtensionBuilder_ == null) {
          ensureProgramExtensionIsMutable();
          programExtension_.add(index, builderForValue.build());
          onChanged();
        } else {
          programExtensionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder addAllProgramExtension(
          java.lang.Iterable<? extends pb.Status.EmcProgramExtension> values) {
        if (programExtensionBuilder_ == null) {
          ensureProgramExtensionIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, programExtension_);
          onChanged();
        } else {
          programExtensionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder clearProgramExtension() {
        if (programExtensionBuilder_ == null) {
          programExtension_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          programExtensionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public Builder removeProgramExtension(int index) {
        if (programExtensionBuilder_ == null) {
          ensureProgramExtensionIsMutable();
          programExtension_.remove(index);
          onChanged();
        } else {
          programExtensionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public pb.Status.EmcProgramExtension.Builder getProgramExtensionBuilder(
          int index) {
        return getProgramExtensionFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public pb.Status.EmcProgramExtensionOrBuilder getProgramExtensionOrBuilder(
          int index) {
        if (programExtensionBuilder_ == null) {
          return programExtension_.get(index);  } else {
          return programExtensionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcProgramExtensionOrBuilder> 
           getProgramExtensionOrBuilderList() {
        if (programExtensionBuilder_ != null) {
          return programExtensionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(programExtension_);
        }
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public pb.Status.EmcProgramExtension.Builder addProgramExtensionBuilder() {
        return getProgramExtensionFieldBuilder().addBuilder(
            pb.Status.EmcProgramExtension.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public pb.Status.EmcProgramExtension.Builder addProgramExtensionBuilder(
          int index) {
        return getProgramExtensionFieldBuilder().addBuilder(
            index, pb.Status.EmcProgramExtension.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcProgramExtension program_extension = 14;</code>
       *
       * <pre>
       *&#47; List if program supported program extensions.
       * </pre>
       */
      public java.util.List<pb.Status.EmcProgramExtension.Builder> 
           getProgramExtensionBuilderList() {
        return getProgramExtensionFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcProgramExtension, pb.Status.EmcProgramExtension.Builder, pb.Status.EmcProgramExtensionOrBuilder> 
          getProgramExtensionFieldBuilder() {
        if (programExtensionBuilder_ == null) {
          programExtensionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcProgramExtension, pb.Status.EmcProgramExtension.Builder, pb.Status.EmcProgramExtensionOrBuilder>(
                  programExtension_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          programExtension_ = null;
        }
        return programExtensionBuilder_;
      }

      private pb.Status.EmcPositionOffsetType positionOffset_ = pb.Status.EmcPositionOffsetType.EMC_CONFIG_RELATIVE_OFFSET;
      /**
       * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
       *
       * <pre>
       *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
       * </pre>
       */
      public boolean hasPositionOffset() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
       *
       * <pre>
       *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
       * </pre>
       */
      public pb.Status.EmcPositionOffsetType getPositionOffset() {
        return positionOffset_;
      }
      /**
       * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
       *
       * <pre>
       *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
       * </pre>
       */
      public Builder setPositionOffset(pb.Status.EmcPositionOffsetType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        positionOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcPositionOffsetType position_offset = 15;</code>
       *
       * <pre>
       *&#47; Position offset type. Reflects [DISPLAY]POSITION_OFFSET
       * </pre>
       */
      public Builder clearPositionOffset() {
        bitField0_ = (bitField0_ & ~0x00001000);
        positionOffset_ = pb.Status.EmcPositionOffsetType.EMC_CONFIG_RELATIVE_OFFSET;
        onChanged();
        return this;
      }

      private pb.Status.EmcPositionFeedbackType positionFeedback_ = pb.Status.EmcPositionFeedbackType.EMC_CONFIG_ACTUAL_FEEDBACK;
      /**
       * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
       *
       * <pre>
       *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
       * </pre>
       */
      public boolean hasPositionFeedback() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
       *
       * <pre>
       *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
       * </pre>
       */
      public pb.Status.EmcPositionFeedbackType getPositionFeedback() {
        return positionFeedback_;
      }
      /**
       * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
       *
       * <pre>
       *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
       * </pre>
       */
      public Builder setPositionFeedback(pb.Status.EmcPositionFeedbackType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00002000;
        positionFeedback_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcPositionFeedbackType position_feedback = 16;</code>
       *
       * <pre>
       *&#47; Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
       * </pre>
       */
      public Builder clearPositionFeedback() {
        bitField0_ = (bitField0_ & ~0x00002000);
        positionFeedback_ = pb.Status.EmcPositionFeedbackType.EMC_CONFIG_ACTUAL_FEEDBACK;
        onChanged();
        return this;
      }

      private double maxFeedOverride_ ;
      /**
       * <code>optional double max_feed_override = 17;</code>
       *
       * <pre>
       *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
       * </pre>
       */
      public boolean hasMaxFeedOverride() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional double max_feed_override = 17;</code>
       *
       * <pre>
       *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
       * </pre>
       */
      public double getMaxFeedOverride() {
        return maxFeedOverride_;
      }
      /**
       * <code>optional double max_feed_override = 17;</code>
       *
       * <pre>
       *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
       * </pre>
       */
      public Builder setMaxFeedOverride(double value) {
        bitField0_ |= 0x00004000;
        maxFeedOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_feed_override = 17;</code>
       *
       * <pre>
       *&#47; Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
       * </pre>
       */
      public Builder clearMaxFeedOverride() {
        bitField0_ = (bitField0_ & ~0x00004000);
        maxFeedOverride_ = 0D;
        onChanged();
        return this;
      }

      private double minFeedOverride_ ;
      /**
       * <code>optional double min_feed_override = 18;</code>
       *
       * <pre>
       *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
       * </pre>
       */
      public boolean hasMinFeedOverride() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional double min_feed_override = 18;</code>
       *
       * <pre>
       *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
       * </pre>
       */
      public double getMinFeedOverride() {
        return minFeedOverride_;
      }
      /**
       * <code>optional double min_feed_override = 18;</code>
       *
       * <pre>
       *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
       * </pre>
       */
      public Builder setMinFeedOverride(double value) {
        bitField0_ |= 0x00008000;
        minFeedOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_feed_override = 18;</code>
       *
       * <pre>
       *&#47; Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
       * </pre>
       */
      public Builder clearMinFeedOverride() {
        bitField0_ = (bitField0_ & ~0x00008000);
        minFeedOverride_ = 0D;
        onChanged();
        return this;
      }

      private double maxSpindleOverride_ ;
      /**
       * <code>optional double max_spindle_override = 19;</code>
       *
       * <pre>
       *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
       * </pre>
       */
      public boolean hasMaxSpindleOverride() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional double max_spindle_override = 19;</code>
       *
       * <pre>
       *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
       * </pre>
       */
      public double getMaxSpindleOverride() {
        return maxSpindleOverride_;
      }
      /**
       * <code>optional double max_spindle_override = 19;</code>
       *
       * <pre>
       *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
       * </pre>
       */
      public Builder setMaxSpindleOverride(double value) {
        bitField0_ |= 0x00010000;
        maxSpindleOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_spindle_override = 19;</code>
       *
       * <pre>
       *&#47; Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
       * </pre>
       */
      public Builder clearMaxSpindleOverride() {
        bitField0_ = (bitField0_ & ~0x00010000);
        maxSpindleOverride_ = 0D;
        onChanged();
        return this;
      }

      private double minSpindleOverride_ ;
      /**
       * <code>optional double min_spindle_override = 20;</code>
       *
       * <pre>
       *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
       * </pre>
       */
      public boolean hasMinSpindleOverride() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional double min_spindle_override = 20;</code>
       *
       * <pre>
       *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
       * </pre>
       */
      public double getMinSpindleOverride() {
        return minSpindleOverride_;
      }
      /**
       * <code>optional double min_spindle_override = 20;</code>
       *
       * <pre>
       *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
       * </pre>
       */
      public Builder setMinSpindleOverride(double value) {
        bitField0_ |= 0x00020000;
        minSpindleOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_spindle_override = 20;</code>
       *
       * <pre>
       *&#47; Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
       * </pre>
       */
      public Builder clearMinSpindleOverride() {
        bitField0_ = (bitField0_ & ~0x00020000);
        minSpindleOverride_ = 0D;
        onChanged();
        return this;
      }

      private double defaultSpindleSpeed_ ;
      /**
       * <code>optional double default_spindle_speed = 21;</code>
       *
       * <pre>
       *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
       * </pre>
       */
      public boolean hasDefaultSpindleSpeed() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional double default_spindle_speed = 21;</code>
       *
       * <pre>
       *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
       * </pre>
       */
      public double getDefaultSpindleSpeed() {
        return defaultSpindleSpeed_;
      }
      /**
       * <code>optional double default_spindle_speed = 21;</code>
       *
       * <pre>
       *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
       * </pre>
       */
      public Builder setDefaultSpindleSpeed(double value) {
        bitField0_ |= 0x00040000;
        defaultSpindleSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double default_spindle_speed = 21;</code>
       *
       * <pre>
       *&#47; Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
       * </pre>
       */
      public Builder clearDefaultSpindleSpeed() {
        bitField0_ = (bitField0_ & ~0x00040000);
        defaultSpindleSpeed_ = 0D;
        onChanged();
        return this;
      }

      private double defaultLinearVelocity_ ;
      /**
       * <code>optional double default_linear_velocity = 22;</code>
       *
       * <pre>
       *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
       * </pre>
       */
      public boolean hasDefaultLinearVelocity() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional double default_linear_velocity = 22;</code>
       *
       * <pre>
       *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
       * </pre>
       */
      public double getDefaultLinearVelocity() {
        return defaultLinearVelocity_;
      }
      /**
       * <code>optional double default_linear_velocity = 22;</code>
       *
       * <pre>
       *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
       * </pre>
       */
      public Builder setDefaultLinearVelocity(double value) {
        bitField0_ |= 0x00080000;
        defaultLinearVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double default_linear_velocity = 22;</code>
       *
       * <pre>
       *&#47; Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
       * </pre>
       */
      public Builder clearDefaultLinearVelocity() {
        bitField0_ = (bitField0_ & ~0x00080000);
        defaultLinearVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double minVelocity_ ;
      /**
       * <code>optional double min_velocity = 23;</code>
       *
       * <pre>
       *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
       * </pre>
       */
      public boolean hasMinVelocity() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional double min_velocity = 23;</code>
       *
       * <pre>
       *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
       * </pre>
       */
      public double getMinVelocity() {
        return minVelocity_;
      }
      /**
       * <code>optional double min_velocity = 23;</code>
       *
       * <pre>
       *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
       * </pre>
       */
      public Builder setMinVelocity(double value) {
        bitField0_ |= 0x00100000;
        minVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_velocity = 23;</code>
       *
       * <pre>
       *&#47; Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
       * </pre>
       */
      public Builder clearMinVelocity() {
        bitField0_ = (bitField0_ & ~0x00100000);
        minVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double maxLinearVelocity_ ;
      /**
       * <code>optional double max_linear_velocity = 24;</code>
       *
       * <pre>
       *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
       * </pre>
       */
      public boolean hasMaxLinearVelocity() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional double max_linear_velocity = 24;</code>
       *
       * <pre>
       *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
       * </pre>
       */
      public double getMaxLinearVelocity() {
        return maxLinearVelocity_;
      }
      /**
       * <code>optional double max_linear_velocity = 24;</code>
       *
       * <pre>
       *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
       * </pre>
       */
      public Builder setMaxLinearVelocity(double value) {
        bitField0_ |= 0x00200000;
        maxLinearVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_linear_velocity = 24;</code>
       *
       * <pre>
       *&#47; Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
       * </pre>
       */
      public Builder clearMaxLinearVelocity() {
        bitField0_ = (bitField0_ & ~0x00200000);
        maxLinearVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double minLinearVelocity_ ;
      /**
       * <code>optional double min_linear_velocity = 25;</code>
       *
       * <pre>
       *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
       * </pre>
       */
      public boolean hasMinLinearVelocity() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional double min_linear_velocity = 25;</code>
       *
       * <pre>
       *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
       * </pre>
       */
      public double getMinLinearVelocity() {
        return minLinearVelocity_;
      }
      /**
       * <code>optional double min_linear_velocity = 25;</code>
       *
       * <pre>
       *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
       * </pre>
       */
      public Builder setMinLinearVelocity(double value) {
        bitField0_ |= 0x00400000;
        minLinearVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_linear_velocity = 25;</code>
       *
       * <pre>
       *&#47; Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
       * </pre>
       */
      public Builder clearMinLinearVelocity() {
        bitField0_ = (bitField0_ & ~0x00400000);
        minLinearVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double defaultAngularVelocity_ ;
      /**
       * <code>optional double default_angular_velocity = 26;</code>
       *
       * <pre>
       *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
       * </pre>
       */
      public boolean hasDefaultAngularVelocity() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional double default_angular_velocity = 26;</code>
       *
       * <pre>
       *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
       * </pre>
       */
      public double getDefaultAngularVelocity() {
        return defaultAngularVelocity_;
      }
      /**
       * <code>optional double default_angular_velocity = 26;</code>
       *
       * <pre>
       *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
       * </pre>
       */
      public Builder setDefaultAngularVelocity(double value) {
        bitField0_ |= 0x00800000;
        defaultAngularVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double default_angular_velocity = 26;</code>
       *
       * <pre>
       *&#47; Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
       * </pre>
       */
      public Builder clearDefaultAngularVelocity() {
        bitField0_ = (bitField0_ & ~0x00800000);
        defaultAngularVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double maxAngularVelocity_ ;
      /**
       * <code>optional double max_angular_velocity = 27;</code>
       *
       * <pre>
       *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
       * </pre>
       */
      public boolean hasMaxAngularVelocity() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional double max_angular_velocity = 27;</code>
       *
       * <pre>
       *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
       * </pre>
       */
      public double getMaxAngularVelocity() {
        return maxAngularVelocity_;
      }
      /**
       * <code>optional double max_angular_velocity = 27;</code>
       *
       * <pre>
       *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
       * </pre>
       */
      public Builder setMaxAngularVelocity(double value) {
        bitField0_ |= 0x01000000;
        maxAngularVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_angular_velocity = 27;</code>
       *
       * <pre>
       *&#47; Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
       * </pre>
       */
      public Builder clearMaxAngularVelocity() {
        bitField0_ = (bitField0_ & ~0x01000000);
        maxAngularVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double minAngularVelocity_ ;
      /**
       * <code>optional double min_angular_velocity = 28;</code>
       *
       * <pre>
       *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
       * </pre>
       */
      public boolean hasMinAngularVelocity() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional double min_angular_velocity = 28;</code>
       *
       * <pre>
       *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
       * </pre>
       */
      public double getMinAngularVelocity() {
        return minAngularVelocity_;
      }
      /**
       * <code>optional double min_angular_velocity = 28;</code>
       *
       * <pre>
       *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
       * </pre>
       */
      public Builder setMinAngularVelocity(double value) {
        bitField0_ |= 0x02000000;
        minAngularVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double min_angular_velocity = 28;</code>
       *
       * <pre>
       *&#47; Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
       * </pre>
       */
      public Builder clearMinAngularVelocity() {
        bitField0_ = (bitField0_ & ~0x02000000);
        minAngularVelocity_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object increments_ = "";
      /**
       * <code>optional string increments = 29;</code>
       *
       * <pre>
       *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
       * </pre>
       */
      public boolean hasIncrements() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional string increments = 29;</code>
       *
       * <pre>
       *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
       * </pre>
       */
      public java.lang.String getIncrements() {
        java.lang.Object ref = increments_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            increments_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string increments = 29;</code>
       *
       * <pre>
       *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIncrementsBytes() {
        java.lang.Object ref = increments_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          increments_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string increments = 29;</code>
       *
       * <pre>
       *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
       * </pre>
       */
      public Builder setIncrements(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        increments_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string increments = 29;</code>
       *
       * <pre>
       *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
       * </pre>
       */
      public Builder clearIncrements() {
        bitField0_ = (bitField0_ & ~0x04000000);
        increments_ = getDefaultInstance().getIncrements();
        onChanged();
        return this;
      }
      /**
       * <code>optional string increments = 29;</code>
       *
       * <pre>
       *&#47; White space separated jog increments. Reflects [DISPLAY]INCREMENTS
       * </pre>
       */
      public Builder setIncrementsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        increments_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object grids_ = "";
      /**
       * <code>optional string grids = 30;</code>
       *
       * <pre>
       *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
       * </pre>
       */
      public boolean hasGrids() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional string grids = 30;</code>
       *
       * <pre>
       *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
       * </pre>
       */
      public java.lang.String getGrids() {
        java.lang.Object ref = grids_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            grids_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string grids = 30;</code>
       *
       * <pre>
       *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGridsBytes() {
        java.lang.Object ref = grids_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          grids_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string grids = 30;</code>
       *
       * <pre>
       *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
       * </pre>
       */
      public Builder setGrids(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x08000000;
        grids_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string grids = 30;</code>
       *
       * <pre>
       *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
       * </pre>
       */
      public Builder clearGrids() {
        bitField0_ = (bitField0_ & ~0x08000000);
        grids_ = getDefaultInstance().getGrids();
        onChanged();
        return this;
      }
      /**
       * <code>optional string grids = 30;</code>
       *
       * <pre>
       *&#47; Grid intervals. Reflects [DISPLAY]GRIDS
       * </pre>
       */
      public Builder setGridsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x08000000;
        grids_ = value;
        onChanged();
        return this;
      }

      private boolean lathe_ ;
      /**
       * <code>optional bool lathe = 31;</code>
       *
       * <pre>
       *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
       * </pre>
       */
      public boolean hasLathe() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional bool lathe = 31;</code>
       *
       * <pre>
       *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
       * </pre>
       */
      public boolean getLathe() {
        return lathe_;
      }
      /**
       * <code>optional bool lathe = 31;</code>
       *
       * <pre>
       *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
       * </pre>
       */
      public Builder setLathe(boolean value) {
        bitField0_ |= 0x10000000;
        lathe_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool lathe = 31;</code>
       *
       * <pre>
       *&#47; Is machine a lathe. Reflects [DISPLAY]LATHE
       * </pre>
       */
      public Builder clearLathe() {
        bitField0_ = (bitField0_ & ~0x10000000);
        lathe_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object geometry_ = "";
      /**
       * <code>optional string geometry = 32;</code>
       *
       * <pre>
       *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
       * </pre>
       */
      public boolean hasGeometry() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional string geometry = 32;</code>
       *
       * <pre>
       *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
       * </pre>
       */
      public java.lang.String getGeometry() {
        java.lang.Object ref = geometry_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            geometry_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string geometry = 32;</code>
       *
       * <pre>
       *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGeometryBytes() {
        java.lang.Object ref = geometry_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          geometry_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string geometry = 32;</code>
       *
       * <pre>
       *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
       * </pre>
       */
      public Builder setGeometry(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        geometry_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string geometry = 32;</code>
       *
       * <pre>
       *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
       * </pre>
       */
      public Builder clearGeometry() {
        bitField0_ = (bitField0_ & ~0x20000000);
        geometry_ = getDefaultInstance().getGeometry();
        onChanged();
        return this;
      }
      /**
       * <code>optional string geometry = 32;</code>
       *
       * <pre>
       *&#47; Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
       * </pre>
       */
      public Builder setGeometryBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        geometry_ = value;
        onChanged();
        return this;
      }

      private int arcdivision_ ;
      /**
       * <code>optional uint32 arcdivision = 33;</code>
       *
       * <pre>
       *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
       * </pre>
       */
      public boolean hasArcdivision() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 arcdivision = 33;</code>
       *
       * <pre>
       *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
       * </pre>
       */
      public int getArcdivision() {
        return arcdivision_;
      }
      /**
       * <code>optional uint32 arcdivision = 33;</code>
       *
       * <pre>
       *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
       * </pre>
       */
      public Builder setArcdivision(int value) {
        bitField0_ |= 0x40000000;
        arcdivision_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 arcdivision = 33;</code>
       *
       * <pre>
       *&#47; Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
       * </pre>
       */
      public Builder clearArcdivision() {
        bitField0_ = (bitField0_ & ~0x40000000);
        arcdivision_ = 0;
        onChanged();
        return this;
      }

      private boolean noForceHoming_ ;
      /**
       * <code>optional bool no_force_homing = 34;</code>
       *
       * <pre>
       *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
       * </pre>
       */
      public boolean hasNoForceHoming() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional bool no_force_homing = 34;</code>
       *
       * <pre>
       *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
       * </pre>
       */
      public boolean getNoForceHoming() {
        return noForceHoming_;
      }
      /**
       * <code>optional bool no_force_homing = 34;</code>
       *
       * <pre>
       *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
       * </pre>
       */
      public Builder setNoForceHoming(boolean value) {
        bitField0_ |= 0x80000000;
        noForceHoming_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool no_force_homing = 34;</code>
       *
       * <pre>
       *&#47; Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
       * </pre>
       */
      public Builder clearNoForceHoming() {
        bitField0_ = (bitField0_ & ~0x80000000);
        noForceHoming_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object remotePath_ = "";
      /**
       * <code>optional string remote_path = 35;</code>
       *
       * <pre>
       *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
       * </pre>
       */
      public boolean hasRemotePath() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string remote_path = 35;</code>
       *
       * <pre>
       *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
       * </pre>
       */
      public java.lang.String getRemotePath() {
        java.lang.Object ref = remotePath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            remotePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string remote_path = 35;</code>
       *
       * <pre>
       *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRemotePathBytes() {
        java.lang.Object ref = remotePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          remotePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string remote_path = 35;</code>
       *
       * <pre>
       *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
       * </pre>
       */
      public Builder setRemotePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000001;
        remotePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string remote_path = 35;</code>
       *
       * <pre>
       *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
       * </pre>
       */
      public Builder clearRemotePath() {
        bitField1_ = (bitField1_ & ~0x00000001);
        remotePath_ = getDefaultInstance().getRemotePath();
        onChanged();
        return this;
      }
      /**
       * <code>optional string remote_path = 35;</code>
       *
       * <pre>
       *&#47; Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
       * </pre>
       */
      public Builder setRemotePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000001;
        remotePath_ = value;
        onChanged();
        return this;
      }

      private pb.Status.EmcTimeUnitsType timeUnits_ = pb.Status.EmcTimeUnitsType.TIME_UNITS_MINUTE;
      /**
       * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
       *
       * <pre>
       *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
       * </pre>
       */
      public boolean hasTimeUnits() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
       *
       * <pre>
       *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
       * </pre>
       */
      public pb.Status.EmcTimeUnitsType getTimeUnits() {
        return timeUnits_;
      }
      /**
       * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
       *
       * <pre>
       *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
       * </pre>
       */
      public Builder setTimeUnits(pb.Status.EmcTimeUnitsType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField1_ |= 0x00000002;
        timeUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTimeUnitsType time_units = 36;</code>
       *
       * <pre>
       *&#47; Time units type. Reflects [DISPLAY]TIME_UNITS
       * </pre>
       */
      public Builder clearTimeUnits() {
        bitField1_ = (bitField1_ & ~0x00000002);
        timeUnits_ = pb.Status.EmcTimeUnitsType.TIME_UNITS_MINUTE;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 37;</code>
       *
       * <pre>
       *&#47; Machine name. Reflects [EMC]MACHINE
       * </pre>
       */
      public boolean hasName() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 37;</code>
       *
       * <pre>
       *&#47; Machine name. Reflects [EMC]MACHINE
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 37;</code>
       *
       * <pre>
       *&#47; Machine name. Reflects [EMC]MACHINE
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 37;</code>
       *
       * <pre>
       *&#47; Machine name. Reflects [EMC]MACHINE
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 37;</code>
       *
       * <pre>
       *&#47; Machine name. Reflects [EMC]MACHINE
       * </pre>
       */
      public Builder clearName() {
        bitField1_ = (bitField1_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 37;</code>
       *
       * <pre>
       *&#47; Machine name. Reflects [EMC]MACHINE
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusUserCommand> userCommand_ =
        java.util.Collections.emptyList();
      private void ensureUserCommandIsMutable() {
        if (!((bitField1_ & 0x00000008) == 0x00000008)) {
          userCommand_ = new java.util.ArrayList<pb.Status.EmcStatusUserCommand>(userCommand_);
          bitField1_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusUserCommand, pb.Status.EmcStatusUserCommand.Builder, pb.Status.EmcStatusUserCommandOrBuilder> userCommandBuilder_;

      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusUserCommand> getUserCommandList() {
        if (userCommandBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCommand_);
        } else {
          return userCommandBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public int getUserCommandCount() {
        if (userCommandBuilder_ == null) {
          return userCommand_.size();
        } else {
          return userCommandBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public pb.Status.EmcStatusUserCommand getUserCommand(int index) {
        if (userCommandBuilder_ == null) {
          return userCommand_.get(index);
        } else {
          return userCommandBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder setUserCommand(
          int index, pb.Status.EmcStatusUserCommand value) {
        if (userCommandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCommandIsMutable();
          userCommand_.set(index, value);
          onChanged();
        } else {
          userCommandBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder setUserCommand(
          int index, pb.Status.EmcStatusUserCommand.Builder builderForValue) {
        if (userCommandBuilder_ == null) {
          ensureUserCommandIsMutable();
          userCommand_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCommandBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder addUserCommand(pb.Status.EmcStatusUserCommand value) {
        if (userCommandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCommandIsMutable();
          userCommand_.add(value);
          onChanged();
        } else {
          userCommandBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder addUserCommand(
          int index, pb.Status.EmcStatusUserCommand value) {
        if (userCommandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCommandIsMutable();
          userCommand_.add(index, value);
          onChanged();
        } else {
          userCommandBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder addUserCommand(
          pb.Status.EmcStatusUserCommand.Builder builderForValue) {
        if (userCommandBuilder_ == null) {
          ensureUserCommandIsMutable();
          userCommand_.add(builderForValue.build());
          onChanged();
        } else {
          userCommandBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder addUserCommand(
          int index, pb.Status.EmcStatusUserCommand.Builder builderForValue) {
        if (userCommandBuilder_ == null) {
          ensureUserCommandIsMutable();
          userCommand_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCommandBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder addAllUserCommand(
          java.lang.Iterable<? extends pb.Status.EmcStatusUserCommand> values) {
        if (userCommandBuilder_ == null) {
          ensureUserCommandIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, userCommand_);
          onChanged();
        } else {
          userCommandBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder clearUserCommand() {
        if (userCommandBuilder_ == null) {
          userCommand_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000008);
          onChanged();
        } else {
          userCommandBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public Builder removeUserCommand(int index) {
        if (userCommandBuilder_ == null) {
          ensureUserCommandIsMutable();
          userCommand_.remove(index);
          onChanged();
        } else {
          userCommandBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public pb.Status.EmcStatusUserCommand.Builder getUserCommandBuilder(
          int index) {
        return getUserCommandFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public pb.Status.EmcStatusUserCommandOrBuilder getUserCommandOrBuilder(
          int index) {
        if (userCommandBuilder_ == null) {
          return userCommand_.get(index);  } else {
          return userCommandBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusUserCommandOrBuilder> 
           getUserCommandOrBuilderList() {
        if (userCommandBuilder_ != null) {
          return userCommandBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCommand_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public pb.Status.EmcStatusUserCommand.Builder addUserCommandBuilder() {
        return getUserCommandFieldBuilder().addBuilder(
            pb.Status.EmcStatusUserCommand.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public pb.Status.EmcStatusUserCommand.Builder addUserCommandBuilder(
          int index) {
        return getUserCommandFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusUserCommand.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusUserCommand user_command = 38;</code>
       *
       * <pre>
       *&#47; List of user commands. Reflects [DISPLAY]USER_COMMAND
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusUserCommand.Builder> 
           getUserCommandBuilderList() {
        return getUserCommandFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusUserCommand, pb.Status.EmcStatusUserCommand.Builder, pb.Status.EmcStatusUserCommandOrBuilder> 
          getUserCommandFieldBuilder() {
        if (userCommandBuilder_ == null) {
          userCommandBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusUserCommand, pb.Status.EmcStatusUserCommand.Builder, pb.Status.EmcStatusUserCommandOrBuilder>(
                  userCommand_,
                  ((bitField1_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          userCommand_ = null;
        }
        return userCommandBuilder_;
      }

      private pb.Status.EmcAngularUnitsType angularUnits_ = pb.Status.EmcAngularUnitsType.ANGULAR_UNITS_DEGREES;
      /**
       * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
       *
       * <pre>
       *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
       * </pre>
       */
      public boolean hasAngularUnits() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
       *
       * <pre>
       *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
       * </pre>
       */
      public pb.Status.EmcAngularUnitsType getAngularUnits() {
        return angularUnits_;
      }
      /**
       * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
       *
       * <pre>
       *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
       * </pre>
       */
      public Builder setAngularUnits(pb.Status.EmcAngularUnitsType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField1_ |= 0x00000010;
        angularUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcAngularUnitsType angular_units = 39;</code>
       *
       * <pre>
       *&#47; Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
       * </pre>
       */
      public Builder clearAngularUnits() {
        bitField1_ = (bitField1_ & ~0x00000010);
        angularUnits_ = pb.Status.EmcAngularUnitsType.ANGULAR_UNITS_DEGREES;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusConfig)
    }

    static {
      defaultInstance = new EmcStatusConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusConfig)
  }

  public interface EmcStatusMotionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusMotion)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 active_queue = 1;</code>
     *
     * <pre>
     *&#47; Number of motions blending.
     * </pre>
     */
    boolean hasActiveQueue();
    /**
     * <code>optional int32 active_queue = 1;</code>
     *
     * <pre>
     *&#47; Number of motions blending.
     * </pre>
     */
    int getActiveQueue();

    /**
     * <code>optional .pb.Position actual_position = 2;</code>
     *
     * <pre>
     *&#47; Current trajectory position.
     * </pre>
     */
    boolean hasActualPosition();
    /**
     * <code>optional .pb.Position actual_position = 2;</code>
     *
     * <pre>
     *&#47; Current trajectory position.
     * </pre>
     */
    pb.PreviewOuterClass.Position getActualPosition();
    /**
     * <code>optional .pb.Position actual_position = 2;</code>
     *
     * <pre>
     *&#47; Current trajectory position.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getActualPositionOrBuilder();

    /**
     * <code>optional bool adaptive_feed_enabled = 3;</code>
     *
     * <pre>
     *&#47; Status of adaptive feed override.
     * </pre>
     */
    boolean hasAdaptiveFeedEnabled();
    /**
     * <code>optional bool adaptive_feed_enabled = 3;</code>
     *
     * <pre>
     *&#47; Status of adaptive feed override.
     * </pre>
     */
    boolean getAdaptiveFeedEnabled();

    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusAnalogIO> 
        getAinList();
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    pb.Status.EmcStatusAnalogIO getAin(int index);
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    int getAinCount();
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusAnalogIOOrBuilder> 
        getAinOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    pb.Status.EmcStatusAnalogIOOrBuilder getAinOrBuilder(
        int index);

    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusAnalogIO> 
        getAoutList();
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    pb.Status.EmcStatusAnalogIO getAout(int index);
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    int getAoutCount();
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusAnalogIOOrBuilder> 
        getAoutOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    pb.Status.EmcStatusAnalogIOOrBuilder getAoutOrBuilder(
        int index);

    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusMotionAxis> 
        getAxisList();
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    pb.Status.EmcStatusMotionAxis getAxis(int index);
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    int getAxisCount();
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusMotionAxisOrBuilder> 
        getAxisOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    pb.Status.EmcStatusMotionAxisOrBuilder getAxisOrBuilder(
        int index);

    /**
     * <code>optional bool block_delete = 7;</code>
     *
     * <pre>
     *&#47; Block delete on or off.
     * </pre>
     */
    boolean hasBlockDelete();
    /**
     * <code>optional bool block_delete = 7;</code>
     *
     * <pre>
     *&#47; Block delete on or off.
     * </pre>
     */
    boolean getBlockDelete();

    /**
     * <code>optional int32 current_line = 8;</code>
     *
     * <pre>
     *&#47; Currently executing line.
     * </pre>
     */
    boolean hasCurrentLine();
    /**
     * <code>optional int32 current_line = 8;</code>
     *
     * <pre>
     *&#47; Currently executing line.
     * </pre>
     */
    int getCurrentLine();

    /**
     * <code>optional double current_vel = 9;</code>
     *
     * <pre>
     *&#47; Current velocity in Cartesian space.
     * </pre>
     */
    boolean hasCurrentVel();
    /**
     * <code>optional double current_vel = 9;</code>
     *
     * <pre>
     *&#47; Current velocity in Cartesian space.
     * </pre>
     */
    double getCurrentVel();

    /**
     * <code>optional double delay_left = 10;</code>
     *
     * <pre>
     *&#47; Remaining time on dwell (G4) command.
     * </pre>
     */
    boolean hasDelayLeft();
    /**
     * <code>optional double delay_left = 10;</code>
     *
     * <pre>
     *&#47; Remaining time on dwell (G4) command.
     * </pre>
     */
    double getDelayLeft();

    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusDigitalIO> 
        getDinList();
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    pb.Status.EmcStatusDigitalIO getDin(int index);
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    int getDinCount();
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusDigitalIOOrBuilder> 
        getDinOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    pb.Status.EmcStatusDigitalIOOrBuilder getDinOrBuilder(
        int index);

    /**
     * <code>optional double distance_to_go = 12;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    boolean hasDistanceToGo();
    /**
     * <code>optional double distance_to_go = 12;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    double getDistanceToGo();

    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusDigitalIO> 
        getDoutList();
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    pb.Status.EmcStatusDigitalIO getDout(int index);
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    int getDoutCount();
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusDigitalIOOrBuilder> 
        getDoutOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    pb.Status.EmcStatusDigitalIOOrBuilder getDoutOrBuilder(
        int index);

    /**
     * <code>optional .pb.Position dtg = 14;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    boolean hasDtg();
    /**
     * <code>optional .pb.Position dtg = 14;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    pb.PreviewOuterClass.Position getDtg();
    /**
     * <code>optional .pb.Position dtg = 14;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getDtgOrBuilder();

    /**
     * <code>optional bool enabled = 15;</code>
     *
     * <pre>
     *&#47; Trajectory planner enabled flag.
     * </pre>
     */
    boolean hasEnabled();
    /**
     * <code>optional bool enabled = 15;</code>
     *
     * <pre>
     *&#47; Trajectory planner enabled flag.
     * </pre>
     */
    boolean getEnabled();

    /**
     * <code>optional bool feed_hold_enabled = 16;</code>
     *
     * <pre>
     *&#47; Enable flag for feed hold.
     * </pre>
     */
    boolean hasFeedHoldEnabled();
    /**
     * <code>optional bool feed_hold_enabled = 16;</code>
     *
     * <pre>
     *&#47; Enable flag for feed hold.
     * </pre>
     */
    boolean getFeedHoldEnabled();

    /**
     * <code>optional bool feed_override_enabled = 17;</code>
     *
     * <pre>
     *&#47; Enable flag for feed override.
     * </pre>
     */
    boolean hasFeedOverrideEnabled();
    /**
     * <code>optional bool feed_override_enabled = 17;</code>
     *
     * <pre>
     *&#47; Enable flag for feed override.
     * </pre>
     */
    boolean getFeedOverrideEnabled();

    /**
     * <code>optional double feedrate = 18;</code>
     *
     * <pre>
     *&#47; Current feedrate override.
     * </pre>
     */
    boolean hasFeedrate();
    /**
     * <code>optional double feedrate = 18;</code>
     *
     * <pre>
     *&#47; Current feedrate override.
     * </pre>
     */
    double getFeedrate();

    /**
     * <code>optional .pb.OriginIndex g5x_index = 19;</code>
     *
     * <pre>
     *&#47; Currently active coordinate system.
     * </pre>
     */
    boolean hasG5XIndex();
    /**
     * <code>optional .pb.OriginIndex g5x_index = 19;</code>
     *
     * <pre>
     *&#47; Currently active coordinate system.
     * </pre>
     */
    pb.Types.OriginIndex getG5XIndex();

    /**
     * <code>optional .pb.Position g5x_offset = 20;</code>
     *
     * <pre>
     *&#47; Offset of the currently active coordinate system.
     * </pre>
     */
    boolean hasG5XOffset();
    /**
     * <code>optional .pb.Position g5x_offset = 20;</code>
     *
     * <pre>
     *&#47; Offset of the currently active coordinate system.
     * </pre>
     */
    pb.PreviewOuterClass.Position getG5XOffset();
    /**
     * <code>optional .pb.Position g5x_offset = 20;</code>
     *
     * <pre>
     *&#47; Offset of the currently active coordinate system.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getG5XOffsetOrBuilder();

    /**
     * <code>optional .pb.Position g92_offset = 21;</code>
     *
     * <pre>
     *&#47; Current G92 offset.
     * </pre>
     */
    boolean hasG92Offset();
    /**
     * <code>optional .pb.Position g92_offset = 21;</code>
     *
     * <pre>
     *&#47; Current G92 offset.
     * </pre>
     */
    pb.PreviewOuterClass.Position getG92Offset();
    /**
     * <code>optional .pb.Position g92_offset = 21;</code>
     *
     * <pre>
     *&#47; Current G92 offset.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getG92OffsetOrBuilder();

    /**
     * <code>optional int32 id = 23;</code>
     *
     * <pre>
     *&#47; Currently executing motion id.
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 23;</code>
     *
     * <pre>
     *&#47; Currently executing motion id.
     * </pre>
     */
    int getId();

    /**
     * <code>optional bool inpos = 24;</code>
     *
     * <pre>
     *&#47; Machine in position flag.
     * </pre>
     */
    boolean hasInpos();
    /**
     * <code>optional bool inpos = 24;</code>
     *
     * <pre>
     *&#47; Machine in position flag.
     * </pre>
     */
    boolean getInpos();

    /**
     * <code>optional .pb.Position joint_actual_position = 25;</code>
     *
     * <pre>
     *&#47; Actual joint position.
     * </pre>
     */
    boolean hasJointActualPosition();
    /**
     * <code>optional .pb.Position joint_actual_position = 25;</code>
     *
     * <pre>
     *&#47; Actual joint position.
     * </pre>
     */
    pb.PreviewOuterClass.Position getJointActualPosition();
    /**
     * <code>optional .pb.Position joint_actual_position = 25;</code>
     *
     * <pre>
     *&#47; Actual joint position.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getJointActualPositionOrBuilder();

    /**
     * <code>optional .pb.Position joint_position = 26;</code>
     *
     * <pre>
     *&#47; Desired joint position.
     * </pre>
     */
    boolean hasJointPosition();
    /**
     * <code>optional .pb.Position joint_position = 26;</code>
     *
     * <pre>
     *&#47; Desired joint position.
     * </pre>
     */
    pb.PreviewOuterClass.Position getJointPosition();
    /**
     * <code>optional .pb.Position joint_position = 26;</code>
     *
     * <pre>
     *&#47; Desired joint position.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getJointPositionOrBuilder();

    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusLimit> 
        getLimitList();
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    pb.Status.EmcStatusLimit getLimit(int index);
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    int getLimitCount();
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusLimitOrBuilder> 
        getLimitOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    pb.Status.EmcStatusLimitOrBuilder getLimitOrBuilder(
        int index);

    /**
     * <code>optional int32 motion_line = 28;</code>
     *
     * <pre>
     *&#47; Source line number motion is currently executing. Relation to id is unclear.
     * </pre>
     */
    boolean hasMotionLine();
    /**
     * <code>optional int32 motion_line = 28;</code>
     *
     * <pre>
     *&#47; Source line number motion is currently executing. Relation to id is unclear.
     * </pre>
     */
    int getMotionLine();

    /**
     * <code>optional .pb.MotionType motion_type = 29;</code>
     *
     * <pre>
     *&#47; Trajectory planner mode.
     * </pre>
     */
    boolean hasMotionType();
    /**
     * <code>optional .pb.MotionType motion_type = 29;</code>
     *
     * <pre>
     *&#47; Trajectory planner mode.
     * </pre>
     */
    pb.Motcmds.MotionType getMotionType();

    /**
     * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    boolean hasMotionMode();
    /**
     * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    pb.Status.EmcTrajectoryModeType getMotionMode();

    /**
     * <code>optional bool paused = 31;</code>
     *
     * <pre>
     *&#47; Motion paused flag.
     * </pre>
     */
    boolean hasPaused();
    /**
     * <code>optional bool paused = 31;</code>
     *
     * <pre>
     *&#47; Motion paused flag.
     * </pre>
     */
    boolean getPaused();

    /**
     * <code>optional .pb.Position position = 32;</code>
     *
     * <pre>
     *&#47; Trajectory position.
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional .pb.Position position = 32;</code>
     *
     * <pre>
     *&#47; Trajectory position.
     * </pre>
     */
    pb.PreviewOuterClass.Position getPosition();
    /**
     * <code>optional .pb.Position position = 32;</code>
     *
     * <pre>
     *&#47; Trajectory position.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getPositionOrBuilder();

    /**
     * <code>optional bool probe_tripped = 33;</code>
     *
     * <pre>
     *&#47; True if probe has tripped.
     * </pre>
     */
    boolean hasProbeTripped();
    /**
     * <code>optional bool probe_tripped = 33;</code>
     *
     * <pre>
     *&#47; True if probe has tripped.
     * </pre>
     */
    boolean getProbeTripped();

    /**
     * <code>optional int32 probe_val = 34;</code>
     *
     * <pre>
     *&#47; Reflects the value of the motion.probe-input pin
     * </pre>
     */
    boolean hasProbeVal();
    /**
     * <code>optional int32 probe_val = 34;</code>
     *
     * <pre>
     *&#47; Reflects the value of the motion.probe-input pin
     * </pre>
     */
    int getProbeVal();

    /**
     * <code>optional .pb.Position probed_position = 35;</code>
     *
     * <pre>
     *&#47; Position where probe has tripped
     * </pre>
     */
    boolean hasProbedPosition();
    /**
     * <code>optional .pb.Position probed_position = 35;</code>
     *
     * <pre>
     *&#47; Position where probe has tripped
     * </pre>
     */
    pb.PreviewOuterClass.Position getProbedPosition();
    /**
     * <code>optional .pb.Position probed_position = 35;</code>
     *
     * <pre>
     *&#47; Position where probe has tripped
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getProbedPositionOrBuilder();

    /**
     * <code>optional bool probing = 36;</code>
     *
     * <pre>
     *&#47; Probe operation in progress.
     * </pre>
     */
    boolean hasProbing();
    /**
     * <code>optional bool probing = 36;</code>
     *
     * <pre>
     *&#47; Probe operation in progress.
     * </pre>
     */
    boolean getProbing();

    /**
     * <code>optional int32 queue = 37;</code>
     *
     * <pre>
     *&#47; Current size of trajectory planner queue.
     * </pre>
     */
    boolean hasQueue();
    /**
     * <code>optional int32 queue = 37;</code>
     *
     * <pre>
     *&#47; Current size of trajectory planner queue.
     * </pre>
     */
    int getQueue();

    /**
     * <code>optional bool queue_full = 38;</code>
     *
     * <pre>
     *&#47; Trajectory planner queue is full.
     * </pre>
     */
    boolean hasQueueFull();
    /**
     * <code>optional bool queue_full = 38;</code>
     *
     * <pre>
     *&#47; Trajectory planner queue is full.
     * </pre>
     */
    boolean getQueueFull();

    /**
     * <code>optional double rotation_xy = 39;</code>
     *
     * <pre>
     *&#47; Current XY rotation around Z axis.
     * </pre>
     */
    boolean hasRotationXy();
    /**
     * <code>optional double rotation_xy = 39;</code>
     *
     * <pre>
     *&#47; Current XY rotation around Z axis.
     * </pre>
     */
    double getRotationXy();

    /**
     * <code>optional bool spindle_brake = 40;</code>
     *
     * <pre>
     *&#47; Spindle braked.
     * </pre>
     */
    boolean hasSpindleBrake();
    /**
     * <code>optional bool spindle_brake = 40;</code>
     *
     * <pre>
     *&#47; Spindle braked.
     * </pre>
     */
    boolean getSpindleBrake();

    /**
     * <code>optional int32 spindle_direction = 41;</code>
     *
     * <pre>
     *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
     * </pre>
     */
    boolean hasSpindleDirection();
    /**
     * <code>optional int32 spindle_direction = 41;</code>
     *
     * <pre>
     *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
     * </pre>
     */
    int getSpindleDirection();

    /**
     * <code>optional bool spindle_enabled = 42;</code>
     *
     * <pre>
     *&#47; Spindle enabled.
     * </pre>
     */
    boolean hasSpindleEnabled();
    /**
     * <code>optional bool spindle_enabled = 42;</code>
     *
     * <pre>
     *&#47; Spindle enabled.
     * </pre>
     */
    boolean getSpindleEnabled();

    /**
     * <code>optional int32 spindle_increasing = 43;</code>
     *
     * <pre>
     *&#47; Spindle speed is increasing.
     * </pre>
     */
    boolean hasSpindleIncreasing();
    /**
     * <code>optional int32 spindle_increasing = 43;</code>
     *
     * <pre>
     *&#47; Spindle speed is increasing.
     * </pre>
     */
    int getSpindleIncreasing();

    /**
     * <code>optional bool spindle_override_enabled = 44;</code>
     *
     * <pre>
     *&#47; Spindle override is enabled.
     * </pre>
     */
    boolean hasSpindleOverrideEnabled();
    /**
     * <code>optional bool spindle_override_enabled = 44;</code>
     *
     * <pre>
     *&#47; Spindle override is enabled.
     * </pre>
     */
    boolean getSpindleOverrideEnabled();

    /**
     * <code>optional double spindle_speed = 45;</code>
     *
     * <pre>
     *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
     * </pre>
     */
    boolean hasSpindleSpeed();
    /**
     * <code>optional double spindle_speed = 45;</code>
     *
     * <pre>
     *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
     * </pre>
     */
    double getSpindleSpeed();

    /**
     * <code>optional double spindlerate = 46;</code>
     *
     * <pre>
     *&#47; Spindle speed override.
     * </pre>
     */
    boolean hasSpindlerate();
    /**
     * <code>optional double spindlerate = 46;</code>
     *
     * <pre>
     *&#47; Spindle speed override.
     * </pre>
     */
    double getSpindlerate();

    /**
     * <code>optional .pb.RCS_STATUS state = 47;</code>
     *
     * <pre>
     *&#47; Current command execution status.
     * </pre>
     */
    boolean hasState();
    /**
     * <code>optional .pb.RCS_STATUS state = 47;</code>
     *
     * <pre>
     *&#47; Current command execution status.
     * </pre>
     */
    pb.Types.RCS_STATUS getState();

    /**
     * <code>optional double max_velocity = 48;</code>
     *
     * <pre>
     *&#47; Maximum velocity override.
     * </pre>
     */
    boolean hasMaxVelocity();
    /**
     * <code>optional double max_velocity = 48;</code>
     *
     * <pre>
     *&#47; Maximum velocity override.
     * </pre>
     */
    double getMaxVelocity();

    /**
     * <code>optional double max_acceleration = 49;</code>
     *
     * <pre>
     *&#47; TODO remove
     * </pre>
     */
    boolean hasMaxAcceleration();
    /**
     * <code>optional double max_acceleration = 49;</code>
     *
     * <pre>
     *&#47; TODO remove
     * </pre>
     */
    double getMaxAcceleration();
  }
  /**
   * Protobuf type {@code pb.EmcStatusMotion}
   *
   * <pre>
   **
   * EMC status motion message.
   * </pre>
   */
  public static final class EmcStatusMotion extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusMotion)
      EmcStatusMotionOrBuilder {
    // Use EmcStatusMotion.newBuilder() to construct.
    private EmcStatusMotion(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusMotion(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusMotion defaultInstance;
    public static EmcStatusMotion getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusMotion getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusMotion(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              activeQueue_ = input.readInt32();
              break;
            }
            case 18: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = actualPosition_.toBuilder();
              }
              actualPosition_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(actualPosition_);
                actualPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              adaptiveFeedEnabled_ = input.readBool();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                ain_ = new java.util.ArrayList<pb.Status.EmcStatusAnalogIO>();
                mutable_bitField0_ |= 0x00000008;
              }
              ain_.add(input.readMessage(pb.Status.EmcStatusAnalogIO.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                aout_ = new java.util.ArrayList<pb.Status.EmcStatusAnalogIO>();
                mutable_bitField0_ |= 0x00000010;
              }
              aout_.add(input.readMessage(pb.Status.EmcStatusAnalogIO.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                axis_ = new java.util.ArrayList<pb.Status.EmcStatusMotionAxis>();
                mutable_bitField0_ |= 0x00000020;
              }
              axis_.add(input.readMessage(pb.Status.EmcStatusMotionAxis.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              blockDelete_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              currentLine_ = input.readInt32();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000020;
              currentVel_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000040;
              delayLeft_ = input.readDouble();
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                din_ = new java.util.ArrayList<pb.Status.EmcStatusDigitalIO>();
                mutable_bitField0_ |= 0x00000400;
              }
              din_.add(input.readMessage(pb.Status.EmcStatusDigitalIO.PARSER, extensionRegistry));
              break;
            }
            case 97: {
              bitField0_ |= 0x00000080;
              distanceToGo_ = input.readDouble();
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                dout_ = new java.util.ArrayList<pb.Status.EmcStatusDigitalIO>();
                mutable_bitField0_ |= 0x00001000;
              }
              dout_.add(input.readMessage(pb.Status.EmcStatusDigitalIO.PARSER, extensionRegistry));
              break;
            }
            case 114: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = dtg_.toBuilder();
              }
              dtg_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dtg_);
                dtg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 120: {
              bitField0_ |= 0x00000200;
              enabled_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000400;
              feedHoldEnabled_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000800;
              feedOverrideEnabled_ = input.readBool();
              break;
            }
            case 145: {
              bitField0_ |= 0x00001000;
              feedrate_ = input.readDouble();
              break;
            }
            case 152: {
              int rawValue = input.readEnum();
              pb.Types.OriginIndex value = pb.Types.OriginIndex.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(19, rawValue);
              } else {
                bitField0_ |= 0x00002000;
                g5XIndex_ = value;
              }
              break;
            }
            case 162: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = g5XOffset_.toBuilder();
              }
              g5XOffset_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(g5XOffset_);
                g5XOffset_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 170: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = g92Offset_.toBuilder();
              }
              g92Offset_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(g92Offset_);
                g92Offset_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 184: {
              bitField0_ |= 0x00010000;
              id_ = input.readInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00020000;
              inpos_ = input.readBool();
              break;
            }
            case 202: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = jointActualPosition_.toBuilder();
              }
              jointActualPosition_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(jointActualPosition_);
                jointActualPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 210: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = jointPosition_.toBuilder();
              }
              jointPosition_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(jointPosition_);
                jointPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 218: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                limit_ = new java.util.ArrayList<pb.Status.EmcStatusLimit>();
                mutable_bitField0_ |= 0x02000000;
              }
              limit_.add(input.readMessage(pb.Status.EmcStatusLimit.PARSER, extensionRegistry));
              break;
            }
            case 224: {
              bitField0_ |= 0x00100000;
              motionLine_ = input.readInt32();
              break;
            }
            case 232: {
              int rawValue = input.readEnum();
              pb.Motcmds.MotionType value = pb.Motcmds.MotionType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(29, rawValue);
              } else {
                bitField0_ |= 0x00200000;
                motionType_ = value;
              }
              break;
            }
            case 240: {
              int rawValue = input.readEnum();
              pb.Status.EmcTrajectoryModeType value = pb.Status.EmcTrajectoryModeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(30, rawValue);
              } else {
                bitField0_ |= 0x00400000;
                motionMode_ = value;
              }
              break;
            }
            case 248: {
              bitField0_ |= 0x00800000;
              paused_ = input.readBool();
              break;
            }
            case 258: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 264: {
              bitField0_ |= 0x02000000;
              probeTripped_ = input.readBool();
              break;
            }
            case 272: {
              bitField0_ |= 0x04000000;
              probeVal_ = input.readInt32();
              break;
            }
            case 282: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x08000000) == 0x08000000)) {
                subBuilder = probedPosition_.toBuilder();
              }
              probedPosition_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(probedPosition_);
                probedPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x08000000;
              break;
            }
            case 288: {
              bitField0_ |= 0x10000000;
              probing_ = input.readBool();
              break;
            }
            case 296: {
              bitField0_ |= 0x20000000;
              queue_ = input.readInt32();
              break;
            }
            case 304: {
              bitField0_ |= 0x40000000;
              queueFull_ = input.readBool();
              break;
            }
            case 313: {
              bitField0_ |= 0x80000000;
              rotationXy_ = input.readDouble();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000001;
              spindleBrake_ = input.readBool();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000002;
              spindleDirection_ = input.readInt32();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000004;
              spindleEnabled_ = input.readBool();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000008;
              spindleIncreasing_ = input.readInt32();
              break;
            }
            case 352: {
              bitField1_ |= 0x00000010;
              spindleOverrideEnabled_ = input.readBool();
              break;
            }
            case 361: {
              bitField1_ |= 0x00000020;
              spindleSpeed_ = input.readDouble();
              break;
            }
            case 369: {
              bitField1_ |= 0x00000040;
              spindlerate_ = input.readDouble();
              break;
            }
            case 376: {
              int rawValue = input.readEnum();
              pb.Types.RCS_STATUS value = pb.Types.RCS_STATUS.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(47, rawValue);
              } else {
                bitField1_ |= 0x00000080;
                state_ = value;
              }
              break;
            }
            case 385: {
              bitField1_ |= 0x00000100;
              maxVelocity_ = input.readDouble();
              break;
            }
            case 393: {
              bitField1_ |= 0x00000200;
              maxAcceleration_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          ain_ = java.util.Collections.unmodifiableList(ain_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          aout_ = java.util.Collections.unmodifiableList(aout_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          axis_ = java.util.Collections.unmodifiableList(axis_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          din_ = java.util.Collections.unmodifiableList(din_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          dout_ = java.util.Collections.unmodifiableList(dout_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          limit_ = java.util.Collections.unmodifiableList(limit_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusMotion_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusMotion_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusMotion.class, pb.Status.EmcStatusMotion.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusMotion> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusMotion>() {
      public EmcStatusMotion parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusMotion(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusMotion> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int ACTIVE_QUEUE_FIELD_NUMBER = 1;
    private int activeQueue_;
    /**
     * <code>optional int32 active_queue = 1;</code>
     *
     * <pre>
     *&#47; Number of motions blending.
     * </pre>
     */
    public boolean hasActiveQueue() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 active_queue = 1;</code>
     *
     * <pre>
     *&#47; Number of motions blending.
     * </pre>
     */
    public int getActiveQueue() {
      return activeQueue_;
    }

    public static final int ACTUAL_POSITION_FIELD_NUMBER = 2;
    private pb.PreviewOuterClass.Position actualPosition_;
    /**
     * <code>optional .pb.Position actual_position = 2;</code>
     *
     * <pre>
     *&#47; Current trajectory position.
     * </pre>
     */
    public boolean hasActualPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pb.Position actual_position = 2;</code>
     *
     * <pre>
     *&#47; Current trajectory position.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getActualPosition() {
      return actualPosition_;
    }
    /**
     * <code>optional .pb.Position actual_position = 2;</code>
     *
     * <pre>
     *&#47; Current trajectory position.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getActualPositionOrBuilder() {
      return actualPosition_;
    }

    public static final int ADAPTIVE_FEED_ENABLED_FIELD_NUMBER = 3;
    private boolean adaptiveFeedEnabled_;
    /**
     * <code>optional bool adaptive_feed_enabled = 3;</code>
     *
     * <pre>
     *&#47; Status of adaptive feed override.
     * </pre>
     */
    public boolean hasAdaptiveFeedEnabled() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool adaptive_feed_enabled = 3;</code>
     *
     * <pre>
     *&#47; Status of adaptive feed override.
     * </pre>
     */
    public boolean getAdaptiveFeedEnabled() {
      return adaptiveFeedEnabled_;
    }

    public static final int AIN_FIELD_NUMBER = 4;
    private java.util.List<pb.Status.EmcStatusAnalogIO> ain_;
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusAnalogIO> getAinList() {
      return ain_;
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusAnalogIOOrBuilder> 
        getAinOrBuilderList() {
      return ain_;
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    public int getAinCount() {
      return ain_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    public pb.Status.EmcStatusAnalogIO getAin(int index) {
      return ain_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
     *
     * <pre>
     *&#47; Status of analog input pins.
     * </pre>
     */
    public pb.Status.EmcStatusAnalogIOOrBuilder getAinOrBuilder(
        int index) {
      return ain_.get(index);
    }

    public static final int AOUT_FIELD_NUMBER = 5;
    private java.util.List<pb.Status.EmcStatusAnalogIO> aout_;
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusAnalogIO> getAoutList() {
      return aout_;
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusAnalogIOOrBuilder> 
        getAoutOrBuilderList() {
      return aout_;
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    public int getAoutCount() {
      return aout_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    public pb.Status.EmcStatusAnalogIO getAout(int index) {
      return aout_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
     *
     * <pre>
     *&#47; Status of analog output pins.
     * </pre>
     */
    public pb.Status.EmcStatusAnalogIOOrBuilder getAoutOrBuilder(
        int index) {
      return aout_.get(index);
    }

    public static final int AXIS_FIELD_NUMBER = 6;
    private java.util.List<pb.Status.EmcStatusMotionAxis> axis_;
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusMotionAxis> getAxisList() {
      return axis_;
    }
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusMotionAxisOrBuilder> 
        getAxisOrBuilderList() {
      return axis_;
    }
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    public int getAxisCount() {
      return axis_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    public pb.Status.EmcStatusMotionAxis getAxis(int index) {
      return axis_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
     *
     * <pre>
     *&#47; Per axis motion values.
     * </pre>
     */
    public pb.Status.EmcStatusMotionAxisOrBuilder getAxisOrBuilder(
        int index) {
      return axis_.get(index);
    }

    public static final int BLOCK_DELETE_FIELD_NUMBER = 7;
    private boolean blockDelete_;
    /**
     * <code>optional bool block_delete = 7;</code>
     *
     * <pre>
     *&#47; Block delete on or off.
     * </pre>
     */
    public boolean hasBlockDelete() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool block_delete = 7;</code>
     *
     * <pre>
     *&#47; Block delete on or off.
     * </pre>
     */
    public boolean getBlockDelete() {
      return blockDelete_;
    }

    public static final int CURRENT_LINE_FIELD_NUMBER = 8;
    private int currentLine_;
    /**
     * <code>optional int32 current_line = 8;</code>
     *
     * <pre>
     *&#47; Currently executing line.
     * </pre>
     */
    public boolean hasCurrentLine() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 current_line = 8;</code>
     *
     * <pre>
     *&#47; Currently executing line.
     * </pre>
     */
    public int getCurrentLine() {
      return currentLine_;
    }

    public static final int CURRENT_VEL_FIELD_NUMBER = 9;
    private double currentVel_;
    /**
     * <code>optional double current_vel = 9;</code>
     *
     * <pre>
     *&#47; Current velocity in Cartesian space.
     * </pre>
     */
    public boolean hasCurrentVel() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double current_vel = 9;</code>
     *
     * <pre>
     *&#47; Current velocity in Cartesian space.
     * </pre>
     */
    public double getCurrentVel() {
      return currentVel_;
    }

    public static final int DELAY_LEFT_FIELD_NUMBER = 10;
    private double delayLeft_;
    /**
     * <code>optional double delay_left = 10;</code>
     *
     * <pre>
     *&#47; Remaining time on dwell (G4) command.
     * </pre>
     */
    public boolean hasDelayLeft() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double delay_left = 10;</code>
     *
     * <pre>
     *&#47; Remaining time on dwell (G4) command.
     * </pre>
     */
    public double getDelayLeft() {
      return delayLeft_;
    }

    public static final int DIN_FIELD_NUMBER = 11;
    private java.util.List<pb.Status.EmcStatusDigitalIO> din_;
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusDigitalIO> getDinList() {
      return din_;
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusDigitalIOOrBuilder> 
        getDinOrBuilderList() {
      return din_;
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    public int getDinCount() {
      return din_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    public pb.Status.EmcStatusDigitalIO getDin(int index) {
      return din_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
     *
     * <pre>
     *&#47; Status of digital input pins.
     * </pre>
     */
    public pb.Status.EmcStatusDigitalIOOrBuilder getDinOrBuilder(
        int index) {
      return din_.get(index);
    }

    public static final int DISTANCE_TO_GO_FIELD_NUMBER = 12;
    private double distanceToGo_;
    /**
     * <code>optional double distance_to_go = 12;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    public boolean hasDistanceToGo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double distance_to_go = 12;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    public double getDistanceToGo() {
      return distanceToGo_;
    }

    public static final int DOUT_FIELD_NUMBER = 13;
    private java.util.List<pb.Status.EmcStatusDigitalIO> dout_;
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusDigitalIO> getDoutList() {
      return dout_;
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusDigitalIOOrBuilder> 
        getDoutOrBuilderList() {
      return dout_;
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    public int getDoutCount() {
      return dout_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    public pb.Status.EmcStatusDigitalIO getDout(int index) {
      return dout_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
     *
     * <pre>
     *&#47; Status of digital output pins.
     * </pre>
     */
    public pb.Status.EmcStatusDigitalIOOrBuilder getDoutOrBuilder(
        int index) {
      return dout_.get(index);
    }

    public static final int DTG_FIELD_NUMBER = 14;
    private pb.PreviewOuterClass.Position dtg_;
    /**
     * <code>optional .pb.Position dtg = 14;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    public boolean hasDtg() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .pb.Position dtg = 14;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getDtg() {
      return dtg_;
    }
    /**
     * <code>optional .pb.Position dtg = 14;</code>
     *
     * <pre>
     *&#47; Remaining distance of current move reported by trajectory planner.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getDtgOrBuilder() {
      return dtg_;
    }

    public static final int ENABLED_FIELD_NUMBER = 15;
    private boolean enabled_;
    /**
     * <code>optional bool enabled = 15;</code>
     *
     * <pre>
     *&#47; Trajectory planner enabled flag.
     * </pre>
     */
    public boolean hasEnabled() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool enabled = 15;</code>
     *
     * <pre>
     *&#47; Trajectory planner enabled flag.
     * </pre>
     */
    public boolean getEnabled() {
      return enabled_;
    }

    public static final int FEED_HOLD_ENABLED_FIELD_NUMBER = 16;
    private boolean feedHoldEnabled_;
    /**
     * <code>optional bool feed_hold_enabled = 16;</code>
     *
     * <pre>
     *&#47; Enable flag for feed hold.
     * </pre>
     */
    public boolean hasFeedHoldEnabled() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool feed_hold_enabled = 16;</code>
     *
     * <pre>
     *&#47; Enable flag for feed hold.
     * </pre>
     */
    public boolean getFeedHoldEnabled() {
      return feedHoldEnabled_;
    }

    public static final int FEED_OVERRIDE_ENABLED_FIELD_NUMBER = 17;
    private boolean feedOverrideEnabled_;
    /**
     * <code>optional bool feed_override_enabled = 17;</code>
     *
     * <pre>
     *&#47; Enable flag for feed override.
     * </pre>
     */
    public boolean hasFeedOverrideEnabled() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool feed_override_enabled = 17;</code>
     *
     * <pre>
     *&#47; Enable flag for feed override.
     * </pre>
     */
    public boolean getFeedOverrideEnabled() {
      return feedOverrideEnabled_;
    }

    public static final int FEEDRATE_FIELD_NUMBER = 18;
    private double feedrate_;
    /**
     * <code>optional double feedrate = 18;</code>
     *
     * <pre>
     *&#47; Current feedrate override.
     * </pre>
     */
    public boolean hasFeedrate() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional double feedrate = 18;</code>
     *
     * <pre>
     *&#47; Current feedrate override.
     * </pre>
     */
    public double getFeedrate() {
      return feedrate_;
    }

    public static final int G5X_INDEX_FIELD_NUMBER = 19;
    private pb.Types.OriginIndex g5XIndex_;
    /**
     * <code>optional .pb.OriginIndex g5x_index = 19;</code>
     *
     * <pre>
     *&#47; Currently active coordinate system.
     * </pre>
     */
    public boolean hasG5XIndex() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .pb.OriginIndex g5x_index = 19;</code>
     *
     * <pre>
     *&#47; Currently active coordinate system.
     * </pre>
     */
    public pb.Types.OriginIndex getG5XIndex() {
      return g5XIndex_;
    }

    public static final int G5X_OFFSET_FIELD_NUMBER = 20;
    private pb.PreviewOuterClass.Position g5XOffset_;
    /**
     * <code>optional .pb.Position g5x_offset = 20;</code>
     *
     * <pre>
     *&#47; Offset of the currently active coordinate system.
     * </pre>
     */
    public boolean hasG5XOffset() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .pb.Position g5x_offset = 20;</code>
     *
     * <pre>
     *&#47; Offset of the currently active coordinate system.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getG5XOffset() {
      return g5XOffset_;
    }
    /**
     * <code>optional .pb.Position g5x_offset = 20;</code>
     *
     * <pre>
     *&#47; Offset of the currently active coordinate system.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getG5XOffsetOrBuilder() {
      return g5XOffset_;
    }

    public static final int G92_OFFSET_FIELD_NUMBER = 21;
    private pb.PreviewOuterClass.Position g92Offset_;
    /**
     * <code>optional .pb.Position g92_offset = 21;</code>
     *
     * <pre>
     *&#47; Current G92 offset.
     * </pre>
     */
    public boolean hasG92Offset() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .pb.Position g92_offset = 21;</code>
     *
     * <pre>
     *&#47; Current G92 offset.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getG92Offset() {
      return g92Offset_;
    }
    /**
     * <code>optional .pb.Position g92_offset = 21;</code>
     *
     * <pre>
     *&#47; Current G92 offset.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getG92OffsetOrBuilder() {
      return g92Offset_;
    }

    public static final int ID_FIELD_NUMBER = 23;
    private int id_;
    /**
     * <code>optional int32 id = 23;</code>
     *
     * <pre>
     *&#47; Currently executing motion id.
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 id = 23;</code>
     *
     * <pre>
     *&#47; Currently executing motion id.
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int INPOS_FIELD_NUMBER = 24;
    private boolean inpos_;
    /**
     * <code>optional bool inpos = 24;</code>
     *
     * <pre>
     *&#47; Machine in position flag.
     * </pre>
     */
    public boolean hasInpos() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional bool inpos = 24;</code>
     *
     * <pre>
     *&#47; Machine in position flag.
     * </pre>
     */
    public boolean getInpos() {
      return inpos_;
    }

    public static final int JOINT_ACTUAL_POSITION_FIELD_NUMBER = 25;
    private pb.PreviewOuterClass.Position jointActualPosition_;
    /**
     * <code>optional .pb.Position joint_actual_position = 25;</code>
     *
     * <pre>
     *&#47; Actual joint position.
     * </pre>
     */
    public boolean hasJointActualPosition() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .pb.Position joint_actual_position = 25;</code>
     *
     * <pre>
     *&#47; Actual joint position.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getJointActualPosition() {
      return jointActualPosition_;
    }
    /**
     * <code>optional .pb.Position joint_actual_position = 25;</code>
     *
     * <pre>
     *&#47; Actual joint position.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getJointActualPositionOrBuilder() {
      return jointActualPosition_;
    }

    public static final int JOINT_POSITION_FIELD_NUMBER = 26;
    private pb.PreviewOuterClass.Position jointPosition_;
    /**
     * <code>optional .pb.Position joint_position = 26;</code>
     *
     * <pre>
     *&#47; Desired joint position.
     * </pre>
     */
    public boolean hasJointPosition() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .pb.Position joint_position = 26;</code>
     *
     * <pre>
     *&#47; Desired joint position.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getJointPosition() {
      return jointPosition_;
    }
    /**
     * <code>optional .pb.Position joint_position = 26;</code>
     *
     * <pre>
     *&#47; Desired joint position.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getJointPositionOrBuilder() {
      return jointPosition_;
    }

    public static final int LIMIT_FIELD_NUMBER = 27;
    private java.util.List<pb.Status.EmcStatusLimit> limit_;
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusLimit> getLimitList() {
      return limit_;
    }
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusLimitOrBuilder> 
        getLimitOrBuilderList() {
      return limit_;
    }
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    public int getLimitCount() {
      return limit_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    public pb.Status.EmcStatusLimit getLimit(int index) {
      return limit_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
     *
     * <pre>
     *&#47; Axis limit masks.
     * </pre>
     */
    public pb.Status.EmcStatusLimitOrBuilder getLimitOrBuilder(
        int index) {
      return limit_.get(index);
    }

    public static final int MOTION_LINE_FIELD_NUMBER = 28;
    private int motionLine_;
    /**
     * <code>optional int32 motion_line = 28;</code>
     *
     * <pre>
     *&#47; Source line number motion is currently executing. Relation to id is unclear.
     * </pre>
     */
    public boolean hasMotionLine() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 motion_line = 28;</code>
     *
     * <pre>
     *&#47; Source line number motion is currently executing. Relation to id is unclear.
     * </pre>
     */
    public int getMotionLine() {
      return motionLine_;
    }

    public static final int MOTION_TYPE_FIELD_NUMBER = 29;
    private pb.Motcmds.MotionType motionType_;
    /**
     * <code>optional .pb.MotionType motion_type = 29;</code>
     *
     * <pre>
     *&#47; Trajectory planner mode.
     * </pre>
     */
    public boolean hasMotionType() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .pb.MotionType motion_type = 29;</code>
     *
     * <pre>
     *&#47; Trajectory planner mode.
     * </pre>
     */
    public pb.Motcmds.MotionType getMotionType() {
      return motionType_;
    }

    public static final int MOTION_MODE_FIELD_NUMBER = 30;
    private pb.Status.EmcTrajectoryModeType motionMode_;
    /**
     * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    public boolean hasMotionMode() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    public pb.Status.EmcTrajectoryModeType getMotionMode() {
      return motionMode_;
    }

    public static final int PAUSED_FIELD_NUMBER = 31;
    private boolean paused_;
    /**
     * <code>optional bool paused = 31;</code>
     *
     * <pre>
     *&#47; Motion paused flag.
     * </pre>
     */
    public boolean hasPaused() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional bool paused = 31;</code>
     *
     * <pre>
     *&#47; Motion paused flag.
     * </pre>
     */
    public boolean getPaused() {
      return paused_;
    }

    public static final int POSITION_FIELD_NUMBER = 32;
    private pb.PreviewOuterClass.Position position_;
    /**
     * <code>optional .pb.Position position = 32;</code>
     *
     * <pre>
     *&#47; Trajectory position.
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .pb.Position position = 32;</code>
     *
     * <pre>
     *&#47; Trajectory position.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getPosition() {
      return position_;
    }
    /**
     * <code>optional .pb.Position position = 32;</code>
     *
     * <pre>
     *&#47; Trajectory position.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getPositionOrBuilder() {
      return position_;
    }

    public static final int PROBE_TRIPPED_FIELD_NUMBER = 33;
    private boolean probeTripped_;
    /**
     * <code>optional bool probe_tripped = 33;</code>
     *
     * <pre>
     *&#47; True if probe has tripped.
     * </pre>
     */
    public boolean hasProbeTripped() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional bool probe_tripped = 33;</code>
     *
     * <pre>
     *&#47; True if probe has tripped.
     * </pre>
     */
    public boolean getProbeTripped() {
      return probeTripped_;
    }

    public static final int PROBE_VAL_FIELD_NUMBER = 34;
    private int probeVal_;
    /**
     * <code>optional int32 probe_val = 34;</code>
     *
     * <pre>
     *&#47; Reflects the value of the motion.probe-input pin
     * </pre>
     */
    public boolean hasProbeVal() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 probe_val = 34;</code>
     *
     * <pre>
     *&#47; Reflects the value of the motion.probe-input pin
     * </pre>
     */
    public int getProbeVal() {
      return probeVal_;
    }

    public static final int PROBED_POSITION_FIELD_NUMBER = 35;
    private pb.PreviewOuterClass.Position probedPosition_;
    /**
     * <code>optional .pb.Position probed_position = 35;</code>
     *
     * <pre>
     *&#47; Position where probe has tripped
     * </pre>
     */
    public boolean hasProbedPosition() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .pb.Position probed_position = 35;</code>
     *
     * <pre>
     *&#47; Position where probe has tripped
     * </pre>
     */
    public pb.PreviewOuterClass.Position getProbedPosition() {
      return probedPosition_;
    }
    /**
     * <code>optional .pb.Position probed_position = 35;</code>
     *
     * <pre>
     *&#47; Position where probe has tripped
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getProbedPositionOrBuilder() {
      return probedPosition_;
    }

    public static final int PROBING_FIELD_NUMBER = 36;
    private boolean probing_;
    /**
     * <code>optional bool probing = 36;</code>
     *
     * <pre>
     *&#47; Probe operation in progress.
     * </pre>
     */
    public boolean hasProbing() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional bool probing = 36;</code>
     *
     * <pre>
     *&#47; Probe operation in progress.
     * </pre>
     */
    public boolean getProbing() {
      return probing_;
    }

    public static final int QUEUE_FIELD_NUMBER = 37;
    private int queue_;
    /**
     * <code>optional int32 queue = 37;</code>
     *
     * <pre>
     *&#47; Current size of trajectory planner queue.
     * </pre>
     */
    public boolean hasQueue() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 queue = 37;</code>
     *
     * <pre>
     *&#47; Current size of trajectory planner queue.
     * </pre>
     */
    public int getQueue() {
      return queue_;
    }

    public static final int QUEUE_FULL_FIELD_NUMBER = 38;
    private boolean queueFull_;
    /**
     * <code>optional bool queue_full = 38;</code>
     *
     * <pre>
     *&#47; Trajectory planner queue is full.
     * </pre>
     */
    public boolean hasQueueFull() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional bool queue_full = 38;</code>
     *
     * <pre>
     *&#47; Trajectory planner queue is full.
     * </pre>
     */
    public boolean getQueueFull() {
      return queueFull_;
    }

    public static final int ROTATION_XY_FIELD_NUMBER = 39;
    private double rotationXy_;
    /**
     * <code>optional double rotation_xy = 39;</code>
     *
     * <pre>
     *&#47; Current XY rotation around Z axis.
     * </pre>
     */
    public boolean hasRotationXy() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional double rotation_xy = 39;</code>
     *
     * <pre>
     *&#47; Current XY rotation around Z axis.
     * </pre>
     */
    public double getRotationXy() {
      return rotationXy_;
    }

    public static final int SPINDLE_BRAKE_FIELD_NUMBER = 40;
    private boolean spindleBrake_;
    /**
     * <code>optional bool spindle_brake = 40;</code>
     *
     * <pre>
     *&#47; Spindle braked.
     * </pre>
     */
    public boolean hasSpindleBrake() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool spindle_brake = 40;</code>
     *
     * <pre>
     *&#47; Spindle braked.
     * </pre>
     */
    public boolean getSpindleBrake() {
      return spindleBrake_;
    }

    public static final int SPINDLE_DIRECTION_FIELD_NUMBER = 41;
    private int spindleDirection_;
    /**
     * <code>optional int32 spindle_direction = 41;</code>
     *
     * <pre>
     *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
     * </pre>
     */
    public boolean hasSpindleDirection() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 spindle_direction = 41;</code>
     *
     * <pre>
     *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
     * </pre>
     */
    public int getSpindleDirection() {
      return spindleDirection_;
    }

    public static final int SPINDLE_ENABLED_FIELD_NUMBER = 42;
    private boolean spindleEnabled_;
    /**
     * <code>optional bool spindle_enabled = 42;</code>
     *
     * <pre>
     *&#47; Spindle enabled.
     * </pre>
     */
    public boolean hasSpindleEnabled() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool spindle_enabled = 42;</code>
     *
     * <pre>
     *&#47; Spindle enabled.
     * </pre>
     */
    public boolean getSpindleEnabled() {
      return spindleEnabled_;
    }

    public static final int SPINDLE_INCREASING_FIELD_NUMBER = 43;
    private int spindleIncreasing_;
    /**
     * <code>optional int32 spindle_increasing = 43;</code>
     *
     * <pre>
     *&#47; Spindle speed is increasing.
     * </pre>
     */
    public boolean hasSpindleIncreasing() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 spindle_increasing = 43;</code>
     *
     * <pre>
     *&#47; Spindle speed is increasing.
     * </pre>
     */
    public int getSpindleIncreasing() {
      return spindleIncreasing_;
    }

    public static final int SPINDLE_OVERRIDE_ENABLED_FIELD_NUMBER = 44;
    private boolean spindleOverrideEnabled_;
    /**
     * <code>optional bool spindle_override_enabled = 44;</code>
     *
     * <pre>
     *&#47; Spindle override is enabled.
     * </pre>
     */
    public boolean hasSpindleOverrideEnabled() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool spindle_override_enabled = 44;</code>
     *
     * <pre>
     *&#47; Spindle override is enabled.
     * </pre>
     */
    public boolean getSpindleOverrideEnabled() {
      return spindleOverrideEnabled_;
    }

    public static final int SPINDLE_SPEED_FIELD_NUMBER = 45;
    private double spindleSpeed_;
    /**
     * <code>optional double spindle_speed = 45;</code>
     *
     * <pre>
     *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
     * </pre>
     */
    public boolean hasSpindleSpeed() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double spindle_speed = 45;</code>
     *
     * <pre>
     *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
     * </pre>
     */
    public double getSpindleSpeed() {
      return spindleSpeed_;
    }

    public static final int SPINDLERATE_FIELD_NUMBER = 46;
    private double spindlerate_;
    /**
     * <code>optional double spindlerate = 46;</code>
     *
     * <pre>
     *&#47; Spindle speed override.
     * </pre>
     */
    public boolean hasSpindlerate() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double spindlerate = 46;</code>
     *
     * <pre>
     *&#47; Spindle speed override.
     * </pre>
     */
    public double getSpindlerate() {
      return spindlerate_;
    }

    public static final int STATE_FIELD_NUMBER = 47;
    private pb.Types.RCS_STATUS state_;
    /**
     * <code>optional .pb.RCS_STATUS state = 47;</code>
     *
     * <pre>
     *&#47; Current command execution status.
     * </pre>
     */
    public boolean hasState() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .pb.RCS_STATUS state = 47;</code>
     *
     * <pre>
     *&#47; Current command execution status.
     * </pre>
     */
    public pb.Types.RCS_STATUS getState() {
      return state_;
    }

    public static final int MAX_VELOCITY_FIELD_NUMBER = 48;
    private double maxVelocity_;
    /**
     * <code>optional double max_velocity = 48;</code>
     *
     * <pre>
     *&#47; Maximum velocity override.
     * </pre>
     */
    public boolean hasMaxVelocity() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double max_velocity = 48;</code>
     *
     * <pre>
     *&#47; Maximum velocity override.
     * </pre>
     */
    public double getMaxVelocity() {
      return maxVelocity_;
    }

    public static final int MAX_ACCELERATION_FIELD_NUMBER = 49;
    private double maxAcceleration_;
    /**
     * <code>optional double max_acceleration = 49;</code>
     *
     * <pre>
     *&#47; TODO remove
     * </pre>
     */
    public boolean hasMaxAcceleration() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double max_acceleration = 49;</code>
     *
     * <pre>
     *&#47; TODO remove
     * </pre>
     */
    public double getMaxAcceleration() {
      return maxAcceleration_;
    }

    private void initFields() {
      activeQueue_ = 0;
      actualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      adaptiveFeedEnabled_ = false;
      ain_ = java.util.Collections.emptyList();
      aout_ = java.util.Collections.emptyList();
      axis_ = java.util.Collections.emptyList();
      blockDelete_ = false;
      currentLine_ = 0;
      currentVel_ = 0D;
      delayLeft_ = 0D;
      din_ = java.util.Collections.emptyList();
      distanceToGo_ = 0D;
      dout_ = java.util.Collections.emptyList();
      dtg_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      enabled_ = false;
      feedHoldEnabled_ = false;
      feedOverrideEnabled_ = false;
      feedrate_ = 0D;
      g5XIndex_ = pb.Types.OriginIndex.ORIGIN_UNKNOWN;
      g5XOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      g92Offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      id_ = 0;
      inpos_ = false;
      jointActualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      jointPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      limit_ = java.util.Collections.emptyList();
      motionLine_ = 0;
      motionType_ = pb.Motcmds.MotionType._EMC_MOTION_TYPE_NONE;
      motionMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
      paused_ = false;
      position_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      probeTripped_ = false;
      probeVal_ = 0;
      probedPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      probing_ = false;
      queue_ = 0;
      queueFull_ = false;
      rotationXy_ = 0D;
      spindleBrake_ = false;
      spindleDirection_ = 0;
      spindleEnabled_ = false;
      spindleIncreasing_ = 0;
      spindleOverrideEnabled_ = false;
      spindleSpeed_ = 0D;
      spindlerate_ = 0D;
      state_ = pb.Types.RCS_STATUS.UNINITIALIZED_STATUS;
      maxVelocity_ = 0D;
      maxAcceleration_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getAinCount(); i++) {
        if (!getAin(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAoutCount(); i++) {
        if (!getAout(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAxisCount(); i++) {
        if (!getAxis(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getDinCount(); i++) {
        if (!getDin(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getDoutCount(); i++) {
        if (!getDout(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getLimitCount(); i++) {
        if (!getLimit(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, activeQueue_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, actualPosition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, adaptiveFeedEnabled_);
      }
      for (int i = 0; i < ain_.size(); i++) {
        output.writeMessage(4, ain_.get(i));
      }
      for (int i = 0; i < aout_.size(); i++) {
        output.writeMessage(5, aout_.get(i));
      }
      for (int i = 0; i < axis_.size(); i++) {
        output.writeMessage(6, axis_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(7, blockDelete_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, currentLine_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(9, currentVel_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(10, delayLeft_);
      }
      for (int i = 0; i < din_.size(); i++) {
        output.writeMessage(11, din_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(12, distanceToGo_);
      }
      for (int i = 0; i < dout_.size(); i++) {
        output.writeMessage(13, dout_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(14, dtg_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(15, enabled_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(16, feedHoldEnabled_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(17, feedOverrideEnabled_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(18, feedrate_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeEnum(19, g5XIndex_.getNumber());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(20, g5XOffset_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(21, g92Offset_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(23, id_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(24, inpos_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(25, jointActualPosition_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(26, jointPosition_);
      }
      for (int i = 0; i < limit_.size(); i++) {
        output.writeMessage(27, limit_.get(i));
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(28, motionLine_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeEnum(29, motionType_.getNumber());
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeEnum(30, motionMode_.getNumber());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeBool(31, paused_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(32, position_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeBool(33, probeTripped_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(34, probeVal_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(35, probedPosition_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeBool(36, probing_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(37, queue_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeBool(38, queueFull_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeDouble(39, rotationXy_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBool(40, spindleBrake_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(41, spindleDirection_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeBool(42, spindleEnabled_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(43, spindleIncreasing_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeBool(44, spindleOverrideEnabled_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(45, spindleSpeed_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(46, spindlerate_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(47, state_.getNumber());
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(48, maxVelocity_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(49, maxAcceleration_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, activeQueue_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, actualPosition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, adaptiveFeedEnabled_);
      }
      for (int i = 0; i < ain_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, ain_.get(i));
      }
      for (int i = 0; i < aout_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, aout_.get(i));
      }
      for (int i = 0; i < axis_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, axis_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, blockDelete_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, currentLine_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, currentVel_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, delayLeft_);
      }
      for (int i = 0; i < din_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, din_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, distanceToGo_);
      }
      for (int i = 0; i < dout_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, dout_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, dtg_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, enabled_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, feedHoldEnabled_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, feedOverrideEnabled_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, feedrate_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, g5XIndex_.getNumber());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, g5XOffset_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, g92Offset_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, id_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, inpos_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, jointActualPosition_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, jointPosition_);
      }
      for (int i = 0; i < limit_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, limit_.get(i));
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, motionLine_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(29, motionType_.getNumber());
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(30, motionMode_.getNumber());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(31, paused_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, position_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(33, probeTripped_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(34, probeVal_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, probedPosition_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(36, probing_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(37, queue_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(38, queueFull_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(39, rotationXy_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(40, spindleBrake_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(41, spindleDirection_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(42, spindleEnabled_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(43, spindleIncreasing_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(44, spindleOverrideEnabled_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(45, spindleSpeed_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(46, spindlerate_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(47, state_.getNumber());
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(48, maxVelocity_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(49, maxAcceleration_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusMotion parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusMotion parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotion parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusMotion parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotion parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusMotion parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotion parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusMotion parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusMotion parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusMotion parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusMotion prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusMotion}
     *
     * <pre>
     **
     * EMC status motion message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusMotion)
        pb.Status.EmcStatusMotionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusMotion_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusMotion_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusMotion.class, pb.Status.EmcStatusMotion.Builder.class);
      }

      // Construct using pb.Status.EmcStatusMotion.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getActualPositionFieldBuilder();
          getAinFieldBuilder();
          getAoutFieldBuilder();
          getAxisFieldBuilder();
          getDinFieldBuilder();
          getDoutFieldBuilder();
          getDtgFieldBuilder();
          getG5XOffsetFieldBuilder();
          getG92OffsetFieldBuilder();
          getJointActualPositionFieldBuilder();
          getJointPositionFieldBuilder();
          getLimitFieldBuilder();
          getPositionFieldBuilder();
          getProbedPositionFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        activeQueue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (actualPositionBuilder_ == null) {
          actualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          actualPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        adaptiveFeedEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (ainBuilder_ == null) {
          ain_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ainBuilder_.clear();
        }
        if (aoutBuilder_ == null) {
          aout_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          aoutBuilder_.clear();
        }
        if (axisBuilder_ == null) {
          axis_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          axisBuilder_.clear();
        }
        blockDelete_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        currentLine_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        currentVel_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        delayLeft_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (dinBuilder_ == null) {
          din_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          dinBuilder_.clear();
        }
        distanceToGo_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        if (doutBuilder_ == null) {
          dout_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          doutBuilder_.clear();
        }
        if (dtgBuilder_ == null) {
          dtg_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          dtgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        enabled_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        feedHoldEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        feedOverrideEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        feedrate_ = 0D;
        bitField0_ = (bitField0_ & ~0x00020000);
        g5XIndex_ = pb.Types.OriginIndex.ORIGIN_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00040000);
        if (g5XOffsetBuilder_ == null) {
          g5XOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          g5XOffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (g92OffsetBuilder_ == null) {
          g92Offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          g92OffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        inpos_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        if (jointActualPositionBuilder_ == null) {
          jointActualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          jointActualPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (jointPositionBuilder_ == null) {
          jointPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          jointPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (limitBuilder_ == null) {
          limit_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
        } else {
          limitBuilder_.clear();
        }
        motionLine_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        motionType_ = pb.Motcmds.MotionType._EMC_MOTION_TYPE_NONE;
        bitField0_ = (bitField0_ & ~0x08000000);
        motionMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
        bitField0_ = (bitField0_ & ~0x10000000);
        paused_ = false;
        bitField0_ = (bitField0_ & ~0x20000000);
        if (positionBuilder_ == null) {
          position_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        probeTripped_ = false;
        bitField0_ = (bitField0_ & ~0x80000000);
        probeVal_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        if (probedPositionBuilder_ == null) {
          probedPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          probedPositionBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        probing_ = false;
        bitField1_ = (bitField1_ & ~0x00000004);
        queue_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        queueFull_ = false;
        bitField1_ = (bitField1_ & ~0x00000010);
        rotationXy_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000020);
        spindleBrake_ = false;
        bitField1_ = (bitField1_ & ~0x00000040);
        spindleDirection_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        spindleEnabled_ = false;
        bitField1_ = (bitField1_ & ~0x00000100);
        spindleIncreasing_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        spindleOverrideEnabled_ = false;
        bitField1_ = (bitField1_ & ~0x00000400);
        spindleSpeed_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000800);
        spindlerate_ = 0D;
        bitField1_ = (bitField1_ & ~0x00001000);
        state_ = pb.Types.RCS_STATUS.UNINITIALIZED_STATUS;
        bitField1_ = (bitField1_ & ~0x00002000);
        maxVelocity_ = 0D;
        bitField1_ = (bitField1_ & ~0x00004000);
        maxAcceleration_ = 0D;
        bitField1_ = (bitField1_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusMotion_descriptor;
      }

      public pb.Status.EmcStatusMotion getDefaultInstanceForType() {
        return pb.Status.EmcStatusMotion.getDefaultInstance();
      }

      public pb.Status.EmcStatusMotion build() {
        pb.Status.EmcStatusMotion result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusMotion buildPartial() {
        pb.Status.EmcStatusMotion result = new pb.Status.EmcStatusMotion(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.activeQueue_ = activeQueue_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (actualPositionBuilder_ == null) {
          result.actualPosition_ = actualPosition_;
        } else {
          result.actualPosition_ = actualPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.adaptiveFeedEnabled_ = adaptiveFeedEnabled_;
        if (ainBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            ain_ = java.util.Collections.unmodifiableList(ain_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.ain_ = ain_;
        } else {
          result.ain_ = ainBuilder_.build();
        }
        if (aoutBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            aout_ = java.util.Collections.unmodifiableList(aout_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.aout_ = aout_;
        } else {
          result.aout_ = aoutBuilder_.build();
        }
        if (axisBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            axis_ = java.util.Collections.unmodifiableList(axis_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.axis_ = axis_;
        } else {
          result.axis_ = axisBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.blockDelete_ = blockDelete_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.currentLine_ = currentLine_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.currentVel_ = currentVel_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000040;
        }
        result.delayLeft_ = delayLeft_;
        if (dinBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            din_ = java.util.Collections.unmodifiableList(din_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.din_ = din_;
        } else {
          result.din_ = dinBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.distanceToGo_ = distanceToGo_;
        if (doutBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            dout_ = java.util.Collections.unmodifiableList(dout_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.dout_ = dout_;
        } else {
          result.dout_ = doutBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (dtgBuilder_ == null) {
          result.dtg_ = dtg_;
        } else {
          result.dtg_ = dtgBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.enabled_ = enabled_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.feedHoldEnabled_ = feedHoldEnabled_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.feedOverrideEnabled_ = feedOverrideEnabled_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.feedrate_ = feedrate_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.g5XIndex_ = g5XIndex_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (g5XOffsetBuilder_ == null) {
          result.g5XOffset_ = g5XOffset_;
        } else {
          result.g5XOffset_ = g5XOffsetBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (g92OffsetBuilder_ == null) {
          result.g92Offset_ = g92Offset_;
        } else {
          result.g92Offset_ = g92OffsetBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.inpos_ = inpos_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (jointActualPositionBuilder_ == null) {
          result.jointActualPosition_ = jointActualPosition_;
        } else {
          result.jointActualPosition_ = jointActualPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (jointPositionBuilder_ == null) {
          result.jointPosition_ = jointPosition_;
        } else {
          result.jointPosition_ = jointPositionBuilder_.build();
        }
        if (limitBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000)) {
            limit_ = java.util.Collections.unmodifiableList(limit_);
            bitField0_ = (bitField0_ & ~0x02000000);
          }
          result.limit_ = limit_;
        } else {
          result.limit_ = limitBuilder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.motionLine_ = motionLine_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.motionType_ = motionType_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.motionMode_ = motionMode_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.paused_ = paused_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x01000000;
        }
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.probeTripped_ = probeTripped_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x04000000;
        }
        result.probeVal_ = probeVal_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x08000000;
        }
        if (probedPositionBuilder_ == null) {
          result.probedPosition_ = probedPosition_;
        } else {
          result.probedPosition_ = probedPositionBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x10000000;
        }
        result.probing_ = probing_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x20000000;
        }
        result.queue_ = queue_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x40000000;
        }
        result.queueFull_ = queueFull_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x80000000;
        }
        result.rotationXy_ = rotationXy_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000001;
        }
        result.spindleBrake_ = spindleBrake_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000002;
        }
        result.spindleDirection_ = spindleDirection_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000004;
        }
        result.spindleEnabled_ = spindleEnabled_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000008;
        }
        result.spindleIncreasing_ = spindleIncreasing_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000010;
        }
        result.spindleOverrideEnabled_ = spindleOverrideEnabled_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000020;
        }
        result.spindleSpeed_ = spindleSpeed_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00000040;
        }
        result.spindlerate_ = spindlerate_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00000080;
        }
        result.state_ = state_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00000100;
        }
        result.maxVelocity_ = maxVelocity_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00000200;
        }
        result.maxAcceleration_ = maxAcceleration_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusMotion) {
          return mergeFrom((pb.Status.EmcStatusMotion)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusMotion other) {
        if (other == pb.Status.EmcStatusMotion.getDefaultInstance()) return this;
        if (other.hasActiveQueue()) {
          setActiveQueue(other.getActiveQueue());
        }
        if (other.hasActualPosition()) {
          mergeActualPosition(other.getActualPosition());
        }
        if (other.hasAdaptiveFeedEnabled()) {
          setAdaptiveFeedEnabled(other.getAdaptiveFeedEnabled());
        }
        if (ainBuilder_ == null) {
          if (!other.ain_.isEmpty()) {
            if (ain_.isEmpty()) {
              ain_ = other.ain_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureAinIsMutable();
              ain_.addAll(other.ain_);
            }
            onChanged();
          }
        } else {
          if (!other.ain_.isEmpty()) {
            if (ainBuilder_.isEmpty()) {
              ainBuilder_.dispose();
              ainBuilder_ = null;
              ain_ = other.ain_;
              bitField0_ = (bitField0_ & ~0x00000008);
              ainBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAinFieldBuilder() : null;
            } else {
              ainBuilder_.addAllMessages(other.ain_);
            }
          }
        }
        if (aoutBuilder_ == null) {
          if (!other.aout_.isEmpty()) {
            if (aout_.isEmpty()) {
              aout_ = other.aout_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureAoutIsMutable();
              aout_.addAll(other.aout_);
            }
            onChanged();
          }
        } else {
          if (!other.aout_.isEmpty()) {
            if (aoutBuilder_.isEmpty()) {
              aoutBuilder_.dispose();
              aoutBuilder_ = null;
              aout_ = other.aout_;
              bitField0_ = (bitField0_ & ~0x00000010);
              aoutBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAoutFieldBuilder() : null;
            } else {
              aoutBuilder_.addAllMessages(other.aout_);
            }
          }
        }
        if (axisBuilder_ == null) {
          if (!other.axis_.isEmpty()) {
            if (axis_.isEmpty()) {
              axis_ = other.axis_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureAxisIsMutable();
              axis_.addAll(other.axis_);
            }
            onChanged();
          }
        } else {
          if (!other.axis_.isEmpty()) {
            if (axisBuilder_.isEmpty()) {
              axisBuilder_.dispose();
              axisBuilder_ = null;
              axis_ = other.axis_;
              bitField0_ = (bitField0_ & ~0x00000020);
              axisBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAxisFieldBuilder() : null;
            } else {
              axisBuilder_.addAllMessages(other.axis_);
            }
          }
        }
        if (other.hasBlockDelete()) {
          setBlockDelete(other.getBlockDelete());
        }
        if (other.hasCurrentLine()) {
          setCurrentLine(other.getCurrentLine());
        }
        if (other.hasCurrentVel()) {
          setCurrentVel(other.getCurrentVel());
        }
        if (other.hasDelayLeft()) {
          setDelayLeft(other.getDelayLeft());
        }
        if (dinBuilder_ == null) {
          if (!other.din_.isEmpty()) {
            if (din_.isEmpty()) {
              din_ = other.din_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureDinIsMutable();
              din_.addAll(other.din_);
            }
            onChanged();
          }
        } else {
          if (!other.din_.isEmpty()) {
            if (dinBuilder_.isEmpty()) {
              dinBuilder_.dispose();
              dinBuilder_ = null;
              din_ = other.din_;
              bitField0_ = (bitField0_ & ~0x00000400);
              dinBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDinFieldBuilder() : null;
            } else {
              dinBuilder_.addAllMessages(other.din_);
            }
          }
        }
        if (other.hasDistanceToGo()) {
          setDistanceToGo(other.getDistanceToGo());
        }
        if (doutBuilder_ == null) {
          if (!other.dout_.isEmpty()) {
            if (dout_.isEmpty()) {
              dout_ = other.dout_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureDoutIsMutable();
              dout_.addAll(other.dout_);
            }
            onChanged();
          }
        } else {
          if (!other.dout_.isEmpty()) {
            if (doutBuilder_.isEmpty()) {
              doutBuilder_.dispose();
              doutBuilder_ = null;
              dout_ = other.dout_;
              bitField0_ = (bitField0_ & ~0x00001000);
              doutBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDoutFieldBuilder() : null;
            } else {
              doutBuilder_.addAllMessages(other.dout_);
            }
          }
        }
        if (other.hasDtg()) {
          mergeDtg(other.getDtg());
        }
        if (other.hasEnabled()) {
          setEnabled(other.getEnabled());
        }
        if (other.hasFeedHoldEnabled()) {
          setFeedHoldEnabled(other.getFeedHoldEnabled());
        }
        if (other.hasFeedOverrideEnabled()) {
          setFeedOverrideEnabled(other.getFeedOverrideEnabled());
        }
        if (other.hasFeedrate()) {
          setFeedrate(other.getFeedrate());
        }
        if (other.hasG5XIndex()) {
          setG5XIndex(other.getG5XIndex());
        }
        if (other.hasG5XOffset()) {
          mergeG5XOffset(other.getG5XOffset());
        }
        if (other.hasG92Offset()) {
          mergeG92Offset(other.getG92Offset());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasInpos()) {
          setInpos(other.getInpos());
        }
        if (other.hasJointActualPosition()) {
          mergeJointActualPosition(other.getJointActualPosition());
        }
        if (other.hasJointPosition()) {
          mergeJointPosition(other.getJointPosition());
        }
        if (limitBuilder_ == null) {
          if (!other.limit_.isEmpty()) {
            if (limit_.isEmpty()) {
              limit_ = other.limit_;
              bitField0_ = (bitField0_ & ~0x02000000);
            } else {
              ensureLimitIsMutable();
              limit_.addAll(other.limit_);
            }
            onChanged();
          }
        } else {
          if (!other.limit_.isEmpty()) {
            if (limitBuilder_.isEmpty()) {
              limitBuilder_.dispose();
              limitBuilder_ = null;
              limit_ = other.limit_;
              bitField0_ = (bitField0_ & ~0x02000000);
              limitBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLimitFieldBuilder() : null;
            } else {
              limitBuilder_.addAllMessages(other.limit_);
            }
          }
        }
        if (other.hasMotionLine()) {
          setMotionLine(other.getMotionLine());
        }
        if (other.hasMotionType()) {
          setMotionType(other.getMotionType());
        }
        if (other.hasMotionMode()) {
          setMotionMode(other.getMotionMode());
        }
        if (other.hasPaused()) {
          setPaused(other.getPaused());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasProbeTripped()) {
          setProbeTripped(other.getProbeTripped());
        }
        if (other.hasProbeVal()) {
          setProbeVal(other.getProbeVal());
        }
        if (other.hasProbedPosition()) {
          mergeProbedPosition(other.getProbedPosition());
        }
        if (other.hasProbing()) {
          setProbing(other.getProbing());
        }
        if (other.hasQueue()) {
          setQueue(other.getQueue());
        }
        if (other.hasQueueFull()) {
          setQueueFull(other.getQueueFull());
        }
        if (other.hasRotationXy()) {
          setRotationXy(other.getRotationXy());
        }
        if (other.hasSpindleBrake()) {
          setSpindleBrake(other.getSpindleBrake());
        }
        if (other.hasSpindleDirection()) {
          setSpindleDirection(other.getSpindleDirection());
        }
        if (other.hasSpindleEnabled()) {
          setSpindleEnabled(other.getSpindleEnabled());
        }
        if (other.hasSpindleIncreasing()) {
          setSpindleIncreasing(other.getSpindleIncreasing());
        }
        if (other.hasSpindleOverrideEnabled()) {
          setSpindleOverrideEnabled(other.getSpindleOverrideEnabled());
        }
        if (other.hasSpindleSpeed()) {
          setSpindleSpeed(other.getSpindleSpeed());
        }
        if (other.hasSpindlerate()) {
          setSpindlerate(other.getSpindlerate());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasMaxVelocity()) {
          setMaxVelocity(other.getMaxVelocity());
        }
        if (other.hasMaxAcceleration()) {
          setMaxAcceleration(other.getMaxAcceleration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getAinCount(); i++) {
          if (!getAin(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAoutCount(); i++) {
          if (!getAout(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAxisCount(); i++) {
          if (!getAxis(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getDinCount(); i++) {
          if (!getDin(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getDoutCount(); i++) {
          if (!getDout(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getLimitCount(); i++) {
          if (!getLimit(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusMotion parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusMotion) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int activeQueue_ ;
      /**
       * <code>optional int32 active_queue = 1;</code>
       *
       * <pre>
       *&#47; Number of motions blending.
       * </pre>
       */
      public boolean hasActiveQueue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 active_queue = 1;</code>
       *
       * <pre>
       *&#47; Number of motions blending.
       * </pre>
       */
      public int getActiveQueue() {
        return activeQueue_;
      }
      /**
       * <code>optional int32 active_queue = 1;</code>
       *
       * <pre>
       *&#47; Number of motions blending.
       * </pre>
       */
      public Builder setActiveQueue(int value) {
        bitField0_ |= 0x00000001;
        activeQueue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 active_queue = 1;</code>
       *
       * <pre>
       *&#47; Number of motions blending.
       * </pre>
       */
      public Builder clearActiveQueue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        activeQueue_ = 0;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position actualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> actualPositionBuilder_;
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public boolean hasActualPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getActualPosition() {
        if (actualPositionBuilder_ == null) {
          return actualPosition_;
        } else {
          return actualPositionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public Builder setActualPosition(pb.PreviewOuterClass.Position value) {
        if (actualPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          actualPosition_ = value;
          onChanged();
        } else {
          actualPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public Builder setActualPosition(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (actualPositionBuilder_ == null) {
          actualPosition_ = builderForValue.build();
          onChanged();
        } else {
          actualPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public Builder mergeActualPosition(pb.PreviewOuterClass.Position value) {
        if (actualPositionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              actualPosition_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            actualPosition_ =
              pb.PreviewOuterClass.Position.newBuilder(actualPosition_).mergeFrom(value).buildPartial();
          } else {
            actualPosition_ = value;
          }
          onChanged();
        } else {
          actualPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public Builder clearActualPosition() {
        if (actualPositionBuilder_ == null) {
          actualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          actualPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getActualPositionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getActualPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getActualPositionOrBuilder() {
        if (actualPositionBuilder_ != null) {
          return actualPositionBuilder_.getMessageOrBuilder();
        } else {
          return actualPosition_;
        }
      }
      /**
       * <code>optional .pb.Position actual_position = 2;</code>
       *
       * <pre>
       *&#47; Current trajectory position.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getActualPositionFieldBuilder() {
        if (actualPositionBuilder_ == null) {
          actualPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getActualPosition(),
                  getParentForChildren(),
                  isClean());
          actualPosition_ = null;
        }
        return actualPositionBuilder_;
      }

      private boolean adaptiveFeedEnabled_ ;
      /**
       * <code>optional bool adaptive_feed_enabled = 3;</code>
       *
       * <pre>
       *&#47; Status of adaptive feed override.
       * </pre>
       */
      public boolean hasAdaptiveFeedEnabled() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool adaptive_feed_enabled = 3;</code>
       *
       * <pre>
       *&#47; Status of adaptive feed override.
       * </pre>
       */
      public boolean getAdaptiveFeedEnabled() {
        return adaptiveFeedEnabled_;
      }
      /**
       * <code>optional bool adaptive_feed_enabled = 3;</code>
       *
       * <pre>
       *&#47; Status of adaptive feed override.
       * </pre>
       */
      public Builder setAdaptiveFeedEnabled(boolean value) {
        bitField0_ |= 0x00000004;
        adaptiveFeedEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool adaptive_feed_enabled = 3;</code>
       *
       * <pre>
       *&#47; Status of adaptive feed override.
       * </pre>
       */
      public Builder clearAdaptiveFeedEnabled() {
        bitField0_ = (bitField0_ & ~0x00000004);
        adaptiveFeedEnabled_ = false;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusAnalogIO> ain_ =
        java.util.Collections.emptyList();
      private void ensureAinIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          ain_ = new java.util.ArrayList<pb.Status.EmcStatusAnalogIO>(ain_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusAnalogIO, pb.Status.EmcStatusAnalogIO.Builder, pb.Status.EmcStatusAnalogIOOrBuilder> ainBuilder_;

      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusAnalogIO> getAinList() {
        if (ainBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ain_);
        } else {
          return ainBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public int getAinCount() {
        if (ainBuilder_ == null) {
          return ain_.size();
        } else {
          return ainBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO getAin(int index) {
        if (ainBuilder_ == null) {
          return ain_.get(index);
        } else {
          return ainBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder setAin(
          int index, pb.Status.EmcStatusAnalogIO value) {
        if (ainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAinIsMutable();
          ain_.set(index, value);
          onChanged();
        } else {
          ainBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder setAin(
          int index, pb.Status.EmcStatusAnalogIO.Builder builderForValue) {
        if (ainBuilder_ == null) {
          ensureAinIsMutable();
          ain_.set(index, builderForValue.build());
          onChanged();
        } else {
          ainBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder addAin(pb.Status.EmcStatusAnalogIO value) {
        if (ainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAinIsMutable();
          ain_.add(value);
          onChanged();
        } else {
          ainBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder addAin(
          int index, pb.Status.EmcStatusAnalogIO value) {
        if (ainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAinIsMutable();
          ain_.add(index, value);
          onChanged();
        } else {
          ainBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder addAin(
          pb.Status.EmcStatusAnalogIO.Builder builderForValue) {
        if (ainBuilder_ == null) {
          ensureAinIsMutable();
          ain_.add(builderForValue.build());
          onChanged();
        } else {
          ainBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder addAin(
          int index, pb.Status.EmcStatusAnalogIO.Builder builderForValue) {
        if (ainBuilder_ == null) {
          ensureAinIsMutable();
          ain_.add(index, builderForValue.build());
          onChanged();
        } else {
          ainBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder addAllAin(
          java.lang.Iterable<? extends pb.Status.EmcStatusAnalogIO> values) {
        if (ainBuilder_ == null) {
          ensureAinIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ain_);
          onChanged();
        } else {
          ainBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder clearAin() {
        if (ainBuilder_ == null) {
          ain_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          ainBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public Builder removeAin(int index) {
        if (ainBuilder_ == null) {
          ensureAinIsMutable();
          ain_.remove(index);
          onChanged();
        } else {
          ainBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO.Builder getAinBuilder(
          int index) {
        return getAinFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIOOrBuilder getAinOrBuilder(
          int index) {
        if (ainBuilder_ == null) {
          return ain_.get(index);  } else {
          return ainBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusAnalogIOOrBuilder> 
           getAinOrBuilderList() {
        if (ainBuilder_ != null) {
          return ainBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ain_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO.Builder addAinBuilder() {
        return getAinFieldBuilder().addBuilder(
            pb.Status.EmcStatusAnalogIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO.Builder addAinBuilder(
          int index) {
        return getAinFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusAnalogIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO ain = 4;</code>
       *
       * <pre>
       *&#47; Status of analog input pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusAnalogIO.Builder> 
           getAinBuilderList() {
        return getAinFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusAnalogIO, pb.Status.EmcStatusAnalogIO.Builder, pb.Status.EmcStatusAnalogIOOrBuilder> 
          getAinFieldBuilder() {
        if (ainBuilder_ == null) {
          ainBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusAnalogIO, pb.Status.EmcStatusAnalogIO.Builder, pb.Status.EmcStatusAnalogIOOrBuilder>(
                  ain_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          ain_ = null;
        }
        return ainBuilder_;
      }

      private java.util.List<pb.Status.EmcStatusAnalogIO> aout_ =
        java.util.Collections.emptyList();
      private void ensureAoutIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          aout_ = new java.util.ArrayList<pb.Status.EmcStatusAnalogIO>(aout_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusAnalogIO, pb.Status.EmcStatusAnalogIO.Builder, pb.Status.EmcStatusAnalogIOOrBuilder> aoutBuilder_;

      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusAnalogIO> getAoutList() {
        if (aoutBuilder_ == null) {
          return java.util.Collections.unmodifiableList(aout_);
        } else {
          return aoutBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public int getAoutCount() {
        if (aoutBuilder_ == null) {
          return aout_.size();
        } else {
          return aoutBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO getAout(int index) {
        if (aoutBuilder_ == null) {
          return aout_.get(index);
        } else {
          return aoutBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder setAout(
          int index, pb.Status.EmcStatusAnalogIO value) {
        if (aoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAoutIsMutable();
          aout_.set(index, value);
          onChanged();
        } else {
          aoutBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder setAout(
          int index, pb.Status.EmcStatusAnalogIO.Builder builderForValue) {
        if (aoutBuilder_ == null) {
          ensureAoutIsMutable();
          aout_.set(index, builderForValue.build());
          onChanged();
        } else {
          aoutBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder addAout(pb.Status.EmcStatusAnalogIO value) {
        if (aoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAoutIsMutable();
          aout_.add(value);
          onChanged();
        } else {
          aoutBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder addAout(
          int index, pb.Status.EmcStatusAnalogIO value) {
        if (aoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAoutIsMutable();
          aout_.add(index, value);
          onChanged();
        } else {
          aoutBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder addAout(
          pb.Status.EmcStatusAnalogIO.Builder builderForValue) {
        if (aoutBuilder_ == null) {
          ensureAoutIsMutable();
          aout_.add(builderForValue.build());
          onChanged();
        } else {
          aoutBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder addAout(
          int index, pb.Status.EmcStatusAnalogIO.Builder builderForValue) {
        if (aoutBuilder_ == null) {
          ensureAoutIsMutable();
          aout_.add(index, builderForValue.build());
          onChanged();
        } else {
          aoutBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder addAllAout(
          java.lang.Iterable<? extends pb.Status.EmcStatusAnalogIO> values) {
        if (aoutBuilder_ == null) {
          ensureAoutIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, aout_);
          onChanged();
        } else {
          aoutBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder clearAout() {
        if (aoutBuilder_ == null) {
          aout_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          aoutBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public Builder removeAout(int index) {
        if (aoutBuilder_ == null) {
          ensureAoutIsMutable();
          aout_.remove(index);
          onChanged();
        } else {
          aoutBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO.Builder getAoutBuilder(
          int index) {
        return getAoutFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIOOrBuilder getAoutOrBuilder(
          int index) {
        if (aoutBuilder_ == null) {
          return aout_.get(index);  } else {
          return aoutBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusAnalogIOOrBuilder> 
           getAoutOrBuilderList() {
        if (aoutBuilder_ != null) {
          return aoutBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(aout_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO.Builder addAoutBuilder() {
        return getAoutFieldBuilder().addBuilder(
            pb.Status.EmcStatusAnalogIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public pb.Status.EmcStatusAnalogIO.Builder addAoutBuilder(
          int index) {
        return getAoutFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusAnalogIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusAnalogIO aout = 5;</code>
       *
       * <pre>
       *&#47; Status of analog output pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusAnalogIO.Builder> 
           getAoutBuilderList() {
        return getAoutFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusAnalogIO, pb.Status.EmcStatusAnalogIO.Builder, pb.Status.EmcStatusAnalogIOOrBuilder> 
          getAoutFieldBuilder() {
        if (aoutBuilder_ == null) {
          aoutBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusAnalogIO, pb.Status.EmcStatusAnalogIO.Builder, pb.Status.EmcStatusAnalogIOOrBuilder>(
                  aout_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          aout_ = null;
        }
        return aoutBuilder_;
      }

      private java.util.List<pb.Status.EmcStatusMotionAxis> axis_ =
        java.util.Collections.emptyList();
      private void ensureAxisIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          axis_ = new java.util.ArrayList<pb.Status.EmcStatusMotionAxis>(axis_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusMotionAxis, pb.Status.EmcStatusMotionAxis.Builder, pb.Status.EmcStatusMotionAxisOrBuilder> axisBuilder_;

      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusMotionAxis> getAxisList() {
        if (axisBuilder_ == null) {
          return java.util.Collections.unmodifiableList(axis_);
        } else {
          return axisBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public int getAxisCount() {
        if (axisBuilder_ == null) {
          return axis_.size();
        } else {
          return axisBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public pb.Status.EmcStatusMotionAxis getAxis(int index) {
        if (axisBuilder_ == null) {
          return axis_.get(index);
        } else {
          return axisBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder setAxis(
          int index, pb.Status.EmcStatusMotionAxis value) {
        if (axisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisIsMutable();
          axis_.set(index, value);
          onChanged();
        } else {
          axisBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder setAxis(
          int index, pb.Status.EmcStatusMotionAxis.Builder builderForValue) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.set(index, builderForValue.build());
          onChanged();
        } else {
          axisBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder addAxis(pb.Status.EmcStatusMotionAxis value) {
        if (axisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisIsMutable();
          axis_.add(value);
          onChanged();
        } else {
          axisBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder addAxis(
          int index, pb.Status.EmcStatusMotionAxis value) {
        if (axisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisIsMutable();
          axis_.add(index, value);
          onChanged();
        } else {
          axisBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder addAxis(
          pb.Status.EmcStatusMotionAxis.Builder builderForValue) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.add(builderForValue.build());
          onChanged();
        } else {
          axisBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder addAxis(
          int index, pb.Status.EmcStatusMotionAxis.Builder builderForValue) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.add(index, builderForValue.build());
          onChanged();
        } else {
          axisBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder addAllAxis(
          java.lang.Iterable<? extends pb.Status.EmcStatusMotionAxis> values) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, axis_);
          onChanged();
        } else {
          axisBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder clearAxis() {
        if (axisBuilder_ == null) {
          axis_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          axisBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public Builder removeAxis(int index) {
        if (axisBuilder_ == null) {
          ensureAxisIsMutable();
          axis_.remove(index);
          onChanged();
        } else {
          axisBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public pb.Status.EmcStatusMotionAxis.Builder getAxisBuilder(
          int index) {
        return getAxisFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public pb.Status.EmcStatusMotionAxisOrBuilder getAxisOrBuilder(
          int index) {
        if (axisBuilder_ == null) {
          return axis_.get(index);  } else {
          return axisBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusMotionAxisOrBuilder> 
           getAxisOrBuilderList() {
        if (axisBuilder_ != null) {
          return axisBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(axis_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public pb.Status.EmcStatusMotionAxis.Builder addAxisBuilder() {
        return getAxisFieldBuilder().addBuilder(
            pb.Status.EmcStatusMotionAxis.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public pb.Status.EmcStatusMotionAxis.Builder addAxisBuilder(
          int index) {
        return getAxisFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusMotionAxis.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusMotionAxis axis = 6;</code>
       *
       * <pre>
       *&#47; Per axis motion values.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusMotionAxis.Builder> 
           getAxisBuilderList() {
        return getAxisFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusMotionAxis, pb.Status.EmcStatusMotionAxis.Builder, pb.Status.EmcStatusMotionAxisOrBuilder> 
          getAxisFieldBuilder() {
        if (axisBuilder_ == null) {
          axisBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusMotionAxis, pb.Status.EmcStatusMotionAxis.Builder, pb.Status.EmcStatusMotionAxisOrBuilder>(
                  axis_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          axis_ = null;
        }
        return axisBuilder_;
      }

      private boolean blockDelete_ ;
      /**
       * <code>optional bool block_delete = 7;</code>
       *
       * <pre>
       *&#47; Block delete on or off.
       * </pre>
       */
      public boolean hasBlockDelete() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool block_delete = 7;</code>
       *
       * <pre>
       *&#47; Block delete on or off.
       * </pre>
       */
      public boolean getBlockDelete() {
        return blockDelete_;
      }
      /**
       * <code>optional bool block_delete = 7;</code>
       *
       * <pre>
       *&#47; Block delete on or off.
       * </pre>
       */
      public Builder setBlockDelete(boolean value) {
        bitField0_ |= 0x00000040;
        blockDelete_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool block_delete = 7;</code>
       *
       * <pre>
       *&#47; Block delete on or off.
       * </pre>
       */
      public Builder clearBlockDelete() {
        bitField0_ = (bitField0_ & ~0x00000040);
        blockDelete_ = false;
        onChanged();
        return this;
      }

      private int currentLine_ ;
      /**
       * <code>optional int32 current_line = 8;</code>
       *
       * <pre>
       *&#47; Currently executing line.
       * </pre>
       */
      public boolean hasCurrentLine() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 current_line = 8;</code>
       *
       * <pre>
       *&#47; Currently executing line.
       * </pre>
       */
      public int getCurrentLine() {
        return currentLine_;
      }
      /**
       * <code>optional int32 current_line = 8;</code>
       *
       * <pre>
       *&#47; Currently executing line.
       * </pre>
       */
      public Builder setCurrentLine(int value) {
        bitField0_ |= 0x00000080;
        currentLine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_line = 8;</code>
       *
       * <pre>
       *&#47; Currently executing line.
       * </pre>
       */
      public Builder clearCurrentLine() {
        bitField0_ = (bitField0_ & ~0x00000080);
        currentLine_ = 0;
        onChanged();
        return this;
      }

      private double currentVel_ ;
      /**
       * <code>optional double current_vel = 9;</code>
       *
       * <pre>
       *&#47; Current velocity in Cartesian space.
       * </pre>
       */
      public boolean hasCurrentVel() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double current_vel = 9;</code>
       *
       * <pre>
       *&#47; Current velocity in Cartesian space.
       * </pre>
       */
      public double getCurrentVel() {
        return currentVel_;
      }
      /**
       * <code>optional double current_vel = 9;</code>
       *
       * <pre>
       *&#47; Current velocity in Cartesian space.
       * </pre>
       */
      public Builder setCurrentVel(double value) {
        bitField0_ |= 0x00000100;
        currentVel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double current_vel = 9;</code>
       *
       * <pre>
       *&#47; Current velocity in Cartesian space.
       * </pre>
       */
      public Builder clearCurrentVel() {
        bitField0_ = (bitField0_ & ~0x00000100);
        currentVel_ = 0D;
        onChanged();
        return this;
      }

      private double delayLeft_ ;
      /**
       * <code>optional double delay_left = 10;</code>
       *
       * <pre>
       *&#47; Remaining time on dwell (G4) command.
       * </pre>
       */
      public boolean hasDelayLeft() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double delay_left = 10;</code>
       *
       * <pre>
       *&#47; Remaining time on dwell (G4) command.
       * </pre>
       */
      public double getDelayLeft() {
        return delayLeft_;
      }
      /**
       * <code>optional double delay_left = 10;</code>
       *
       * <pre>
       *&#47; Remaining time on dwell (G4) command.
       * </pre>
       */
      public Builder setDelayLeft(double value) {
        bitField0_ |= 0x00000200;
        delayLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double delay_left = 10;</code>
       *
       * <pre>
       *&#47; Remaining time on dwell (G4) command.
       * </pre>
       */
      public Builder clearDelayLeft() {
        bitField0_ = (bitField0_ & ~0x00000200);
        delayLeft_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusDigitalIO> din_ =
        java.util.Collections.emptyList();
      private void ensureDinIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          din_ = new java.util.ArrayList<pb.Status.EmcStatusDigitalIO>(din_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusDigitalIO, pb.Status.EmcStatusDigitalIO.Builder, pb.Status.EmcStatusDigitalIOOrBuilder> dinBuilder_;

      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusDigitalIO> getDinList() {
        if (dinBuilder_ == null) {
          return java.util.Collections.unmodifiableList(din_);
        } else {
          return dinBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public int getDinCount() {
        if (dinBuilder_ == null) {
          return din_.size();
        } else {
          return dinBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO getDin(int index) {
        if (dinBuilder_ == null) {
          return din_.get(index);
        } else {
          return dinBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder setDin(
          int index, pb.Status.EmcStatusDigitalIO value) {
        if (dinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDinIsMutable();
          din_.set(index, value);
          onChanged();
        } else {
          dinBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder setDin(
          int index, pb.Status.EmcStatusDigitalIO.Builder builderForValue) {
        if (dinBuilder_ == null) {
          ensureDinIsMutable();
          din_.set(index, builderForValue.build());
          onChanged();
        } else {
          dinBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder addDin(pb.Status.EmcStatusDigitalIO value) {
        if (dinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDinIsMutable();
          din_.add(value);
          onChanged();
        } else {
          dinBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder addDin(
          int index, pb.Status.EmcStatusDigitalIO value) {
        if (dinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDinIsMutable();
          din_.add(index, value);
          onChanged();
        } else {
          dinBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder addDin(
          pb.Status.EmcStatusDigitalIO.Builder builderForValue) {
        if (dinBuilder_ == null) {
          ensureDinIsMutable();
          din_.add(builderForValue.build());
          onChanged();
        } else {
          dinBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder addDin(
          int index, pb.Status.EmcStatusDigitalIO.Builder builderForValue) {
        if (dinBuilder_ == null) {
          ensureDinIsMutable();
          din_.add(index, builderForValue.build());
          onChanged();
        } else {
          dinBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder addAllDin(
          java.lang.Iterable<? extends pb.Status.EmcStatusDigitalIO> values) {
        if (dinBuilder_ == null) {
          ensureDinIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, din_);
          onChanged();
        } else {
          dinBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder clearDin() {
        if (dinBuilder_ == null) {
          din_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          dinBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public Builder removeDin(int index) {
        if (dinBuilder_ == null) {
          ensureDinIsMutable();
          din_.remove(index);
          onChanged();
        } else {
          dinBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO.Builder getDinBuilder(
          int index) {
        return getDinFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIOOrBuilder getDinOrBuilder(
          int index) {
        if (dinBuilder_ == null) {
          return din_.get(index);  } else {
          return dinBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusDigitalIOOrBuilder> 
           getDinOrBuilderList() {
        if (dinBuilder_ != null) {
          return dinBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(din_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO.Builder addDinBuilder() {
        return getDinFieldBuilder().addBuilder(
            pb.Status.EmcStatusDigitalIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO.Builder addDinBuilder(
          int index) {
        return getDinFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusDigitalIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO din = 11;</code>
       *
       * <pre>
       *&#47; Status of digital input pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusDigitalIO.Builder> 
           getDinBuilderList() {
        return getDinFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusDigitalIO, pb.Status.EmcStatusDigitalIO.Builder, pb.Status.EmcStatusDigitalIOOrBuilder> 
          getDinFieldBuilder() {
        if (dinBuilder_ == null) {
          dinBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusDigitalIO, pb.Status.EmcStatusDigitalIO.Builder, pb.Status.EmcStatusDigitalIOOrBuilder>(
                  din_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          din_ = null;
        }
        return dinBuilder_;
      }

      private double distanceToGo_ ;
      /**
       * <code>optional double distance_to_go = 12;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public boolean hasDistanceToGo() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional double distance_to_go = 12;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public double getDistanceToGo() {
        return distanceToGo_;
      }
      /**
       * <code>optional double distance_to_go = 12;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public Builder setDistanceToGo(double value) {
        bitField0_ |= 0x00000800;
        distanceToGo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double distance_to_go = 12;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public Builder clearDistanceToGo() {
        bitField0_ = (bitField0_ & ~0x00000800);
        distanceToGo_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusDigitalIO> dout_ =
        java.util.Collections.emptyList();
      private void ensureDoutIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          dout_ = new java.util.ArrayList<pb.Status.EmcStatusDigitalIO>(dout_);
          bitField0_ |= 0x00001000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusDigitalIO, pb.Status.EmcStatusDigitalIO.Builder, pb.Status.EmcStatusDigitalIOOrBuilder> doutBuilder_;

      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusDigitalIO> getDoutList() {
        if (doutBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dout_);
        } else {
          return doutBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public int getDoutCount() {
        if (doutBuilder_ == null) {
          return dout_.size();
        } else {
          return doutBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO getDout(int index) {
        if (doutBuilder_ == null) {
          return dout_.get(index);
        } else {
          return doutBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder setDout(
          int index, pb.Status.EmcStatusDigitalIO value) {
        if (doutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDoutIsMutable();
          dout_.set(index, value);
          onChanged();
        } else {
          doutBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder setDout(
          int index, pb.Status.EmcStatusDigitalIO.Builder builderForValue) {
        if (doutBuilder_ == null) {
          ensureDoutIsMutable();
          dout_.set(index, builderForValue.build());
          onChanged();
        } else {
          doutBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder addDout(pb.Status.EmcStatusDigitalIO value) {
        if (doutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDoutIsMutable();
          dout_.add(value);
          onChanged();
        } else {
          doutBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder addDout(
          int index, pb.Status.EmcStatusDigitalIO value) {
        if (doutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDoutIsMutable();
          dout_.add(index, value);
          onChanged();
        } else {
          doutBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder addDout(
          pb.Status.EmcStatusDigitalIO.Builder builderForValue) {
        if (doutBuilder_ == null) {
          ensureDoutIsMutable();
          dout_.add(builderForValue.build());
          onChanged();
        } else {
          doutBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder addDout(
          int index, pb.Status.EmcStatusDigitalIO.Builder builderForValue) {
        if (doutBuilder_ == null) {
          ensureDoutIsMutable();
          dout_.add(index, builderForValue.build());
          onChanged();
        } else {
          doutBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder addAllDout(
          java.lang.Iterable<? extends pb.Status.EmcStatusDigitalIO> values) {
        if (doutBuilder_ == null) {
          ensureDoutIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dout_);
          onChanged();
        } else {
          doutBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder clearDout() {
        if (doutBuilder_ == null) {
          dout_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          doutBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public Builder removeDout(int index) {
        if (doutBuilder_ == null) {
          ensureDoutIsMutable();
          dout_.remove(index);
          onChanged();
        } else {
          doutBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO.Builder getDoutBuilder(
          int index) {
        return getDoutFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIOOrBuilder getDoutOrBuilder(
          int index) {
        if (doutBuilder_ == null) {
          return dout_.get(index);  } else {
          return doutBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusDigitalIOOrBuilder> 
           getDoutOrBuilderList() {
        if (doutBuilder_ != null) {
          return doutBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dout_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO.Builder addDoutBuilder() {
        return getDoutFieldBuilder().addBuilder(
            pb.Status.EmcStatusDigitalIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public pb.Status.EmcStatusDigitalIO.Builder addDoutBuilder(
          int index) {
        return getDoutFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusDigitalIO.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusDigitalIO dout = 13;</code>
       *
       * <pre>
       *&#47; Status of digital output pins.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusDigitalIO.Builder> 
           getDoutBuilderList() {
        return getDoutFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusDigitalIO, pb.Status.EmcStatusDigitalIO.Builder, pb.Status.EmcStatusDigitalIOOrBuilder> 
          getDoutFieldBuilder() {
        if (doutBuilder_ == null) {
          doutBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusDigitalIO, pb.Status.EmcStatusDigitalIO.Builder, pb.Status.EmcStatusDigitalIOOrBuilder>(
                  dout_,
                  ((bitField0_ & 0x00001000) == 0x00001000),
                  getParentForChildren(),
                  isClean());
          dout_ = null;
        }
        return doutBuilder_;
      }

      private pb.PreviewOuterClass.Position dtg_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> dtgBuilder_;
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public boolean hasDtg() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getDtg() {
        if (dtgBuilder_ == null) {
          return dtg_;
        } else {
          return dtgBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public Builder setDtg(pb.PreviewOuterClass.Position value) {
        if (dtgBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dtg_ = value;
          onChanged();
        } else {
          dtgBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public Builder setDtg(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (dtgBuilder_ == null) {
          dtg_ = builderForValue.build();
          onChanged();
        } else {
          dtgBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public Builder mergeDtg(pb.PreviewOuterClass.Position value) {
        if (dtgBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              dtg_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            dtg_ =
              pb.PreviewOuterClass.Position.newBuilder(dtg_).mergeFrom(value).buildPartial();
          } else {
            dtg_ = value;
          }
          onChanged();
        } else {
          dtgBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public Builder clearDtg() {
        if (dtgBuilder_ == null) {
          dtg_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          dtgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getDtgBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getDtgFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getDtgOrBuilder() {
        if (dtgBuilder_ != null) {
          return dtgBuilder_.getMessageOrBuilder();
        } else {
          return dtg_;
        }
      }
      /**
       * <code>optional .pb.Position dtg = 14;</code>
       *
       * <pre>
       *&#47; Remaining distance of current move reported by trajectory planner.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getDtgFieldBuilder() {
        if (dtgBuilder_ == null) {
          dtgBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getDtg(),
                  getParentForChildren(),
                  isClean());
          dtg_ = null;
        }
        return dtgBuilder_;
      }

      private boolean enabled_ ;
      /**
       * <code>optional bool enabled = 15;</code>
       *
       * <pre>
       *&#47; Trajectory planner enabled flag.
       * </pre>
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool enabled = 15;</code>
       *
       * <pre>
       *&#47; Trajectory planner enabled flag.
       * </pre>
       */
      public boolean getEnabled() {
        return enabled_;
      }
      /**
       * <code>optional bool enabled = 15;</code>
       *
       * <pre>
       *&#47; Trajectory planner enabled flag.
       * </pre>
       */
      public Builder setEnabled(boolean value) {
        bitField0_ |= 0x00004000;
        enabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enabled = 15;</code>
       *
       * <pre>
       *&#47; Trajectory planner enabled flag.
       * </pre>
       */
      public Builder clearEnabled() {
        bitField0_ = (bitField0_ & ~0x00004000);
        enabled_ = false;
        onChanged();
        return this;
      }

      private boolean feedHoldEnabled_ ;
      /**
       * <code>optional bool feed_hold_enabled = 16;</code>
       *
       * <pre>
       *&#47; Enable flag for feed hold.
       * </pre>
       */
      public boolean hasFeedHoldEnabled() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bool feed_hold_enabled = 16;</code>
       *
       * <pre>
       *&#47; Enable flag for feed hold.
       * </pre>
       */
      public boolean getFeedHoldEnabled() {
        return feedHoldEnabled_;
      }
      /**
       * <code>optional bool feed_hold_enabled = 16;</code>
       *
       * <pre>
       *&#47; Enable flag for feed hold.
       * </pre>
       */
      public Builder setFeedHoldEnabled(boolean value) {
        bitField0_ |= 0x00008000;
        feedHoldEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool feed_hold_enabled = 16;</code>
       *
       * <pre>
       *&#47; Enable flag for feed hold.
       * </pre>
       */
      public Builder clearFeedHoldEnabled() {
        bitField0_ = (bitField0_ & ~0x00008000);
        feedHoldEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean feedOverrideEnabled_ ;
      /**
       * <code>optional bool feed_override_enabled = 17;</code>
       *
       * <pre>
       *&#47; Enable flag for feed override.
       * </pre>
       */
      public boolean hasFeedOverrideEnabled() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional bool feed_override_enabled = 17;</code>
       *
       * <pre>
       *&#47; Enable flag for feed override.
       * </pre>
       */
      public boolean getFeedOverrideEnabled() {
        return feedOverrideEnabled_;
      }
      /**
       * <code>optional bool feed_override_enabled = 17;</code>
       *
       * <pre>
       *&#47; Enable flag for feed override.
       * </pre>
       */
      public Builder setFeedOverrideEnabled(boolean value) {
        bitField0_ |= 0x00010000;
        feedOverrideEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool feed_override_enabled = 17;</code>
       *
       * <pre>
       *&#47; Enable flag for feed override.
       * </pre>
       */
      public Builder clearFeedOverrideEnabled() {
        bitField0_ = (bitField0_ & ~0x00010000);
        feedOverrideEnabled_ = false;
        onChanged();
        return this;
      }

      private double feedrate_ ;
      /**
       * <code>optional double feedrate = 18;</code>
       *
       * <pre>
       *&#47; Current feedrate override.
       * </pre>
       */
      public boolean hasFeedrate() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional double feedrate = 18;</code>
       *
       * <pre>
       *&#47; Current feedrate override.
       * </pre>
       */
      public double getFeedrate() {
        return feedrate_;
      }
      /**
       * <code>optional double feedrate = 18;</code>
       *
       * <pre>
       *&#47; Current feedrate override.
       * </pre>
       */
      public Builder setFeedrate(double value) {
        bitField0_ |= 0x00020000;
        feedrate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double feedrate = 18;</code>
       *
       * <pre>
       *&#47; Current feedrate override.
       * </pre>
       */
      public Builder clearFeedrate() {
        bitField0_ = (bitField0_ & ~0x00020000);
        feedrate_ = 0D;
        onChanged();
        return this;
      }

      private pb.Types.OriginIndex g5XIndex_ = pb.Types.OriginIndex.ORIGIN_UNKNOWN;
      /**
       * <code>optional .pb.OriginIndex g5x_index = 19;</code>
       *
       * <pre>
       *&#47; Currently active coordinate system.
       * </pre>
       */
      public boolean hasG5XIndex() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .pb.OriginIndex g5x_index = 19;</code>
       *
       * <pre>
       *&#47; Currently active coordinate system.
       * </pre>
       */
      public pb.Types.OriginIndex getG5XIndex() {
        return g5XIndex_;
      }
      /**
       * <code>optional .pb.OriginIndex g5x_index = 19;</code>
       *
       * <pre>
       *&#47; Currently active coordinate system.
       * </pre>
       */
      public Builder setG5XIndex(pb.Types.OriginIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00040000;
        g5XIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.OriginIndex g5x_index = 19;</code>
       *
       * <pre>
       *&#47; Currently active coordinate system.
       * </pre>
       */
      public Builder clearG5XIndex() {
        bitField0_ = (bitField0_ & ~0x00040000);
        g5XIndex_ = pb.Types.OriginIndex.ORIGIN_UNKNOWN;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position g5XOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> g5XOffsetBuilder_;
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public boolean hasG5XOffset() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getG5XOffset() {
        if (g5XOffsetBuilder_ == null) {
          return g5XOffset_;
        } else {
          return g5XOffsetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public Builder setG5XOffset(pb.PreviewOuterClass.Position value) {
        if (g5XOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          g5XOffset_ = value;
          onChanged();
        } else {
          g5XOffsetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public Builder setG5XOffset(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (g5XOffsetBuilder_ == null) {
          g5XOffset_ = builderForValue.build();
          onChanged();
        } else {
          g5XOffsetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public Builder mergeG5XOffset(pb.PreviewOuterClass.Position value) {
        if (g5XOffsetBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              g5XOffset_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            g5XOffset_ =
              pb.PreviewOuterClass.Position.newBuilder(g5XOffset_).mergeFrom(value).buildPartial();
          } else {
            g5XOffset_ = value;
          }
          onChanged();
        } else {
          g5XOffsetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public Builder clearG5XOffset() {
        if (g5XOffsetBuilder_ == null) {
          g5XOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          g5XOffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getG5XOffsetBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getG5XOffsetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getG5XOffsetOrBuilder() {
        if (g5XOffsetBuilder_ != null) {
          return g5XOffsetBuilder_.getMessageOrBuilder();
        } else {
          return g5XOffset_;
        }
      }
      /**
       * <code>optional .pb.Position g5x_offset = 20;</code>
       *
       * <pre>
       *&#47; Offset of the currently active coordinate system.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getG5XOffsetFieldBuilder() {
        if (g5XOffsetBuilder_ == null) {
          g5XOffsetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getG5XOffset(),
                  getParentForChildren(),
                  isClean());
          g5XOffset_ = null;
        }
        return g5XOffsetBuilder_;
      }

      private pb.PreviewOuterClass.Position g92Offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> g92OffsetBuilder_;
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public boolean hasG92Offset() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getG92Offset() {
        if (g92OffsetBuilder_ == null) {
          return g92Offset_;
        } else {
          return g92OffsetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public Builder setG92Offset(pb.PreviewOuterClass.Position value) {
        if (g92OffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          g92Offset_ = value;
          onChanged();
        } else {
          g92OffsetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public Builder setG92Offset(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (g92OffsetBuilder_ == null) {
          g92Offset_ = builderForValue.build();
          onChanged();
        } else {
          g92OffsetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public Builder mergeG92Offset(pb.PreviewOuterClass.Position value) {
        if (g92OffsetBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              g92Offset_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            g92Offset_ =
              pb.PreviewOuterClass.Position.newBuilder(g92Offset_).mergeFrom(value).buildPartial();
          } else {
            g92Offset_ = value;
          }
          onChanged();
        } else {
          g92OffsetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public Builder clearG92Offset() {
        if (g92OffsetBuilder_ == null) {
          g92Offset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          g92OffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getG92OffsetBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getG92OffsetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getG92OffsetOrBuilder() {
        if (g92OffsetBuilder_ != null) {
          return g92OffsetBuilder_.getMessageOrBuilder();
        } else {
          return g92Offset_;
        }
      }
      /**
       * <code>optional .pb.Position g92_offset = 21;</code>
       *
       * <pre>
       *&#47; Current G92 offset.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getG92OffsetFieldBuilder() {
        if (g92OffsetBuilder_ == null) {
          g92OffsetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getG92Offset(),
                  getParentForChildren(),
                  isClean());
          g92Offset_ = null;
        }
        return g92OffsetBuilder_;
      }

      private int id_ ;
      /**
       * <code>optional int32 id = 23;</code>
       *
       * <pre>
       *&#47; Currently executing motion id.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 id = 23;</code>
       *
       * <pre>
       *&#47; Currently executing motion id.
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 23;</code>
       *
       * <pre>
       *&#47; Currently executing motion id.
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00200000;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 23;</code>
       *
       * <pre>
       *&#47; Currently executing motion id.
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00200000);
        id_ = 0;
        onChanged();
        return this;
      }

      private boolean inpos_ ;
      /**
       * <code>optional bool inpos = 24;</code>
       *
       * <pre>
       *&#47; Machine in position flag.
       * </pre>
       */
      public boolean hasInpos() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bool inpos = 24;</code>
       *
       * <pre>
       *&#47; Machine in position flag.
       * </pre>
       */
      public boolean getInpos() {
        return inpos_;
      }
      /**
       * <code>optional bool inpos = 24;</code>
       *
       * <pre>
       *&#47; Machine in position flag.
       * </pre>
       */
      public Builder setInpos(boolean value) {
        bitField0_ |= 0x00400000;
        inpos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool inpos = 24;</code>
       *
       * <pre>
       *&#47; Machine in position flag.
       * </pre>
       */
      public Builder clearInpos() {
        bitField0_ = (bitField0_ & ~0x00400000);
        inpos_ = false;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position jointActualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> jointActualPositionBuilder_;
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public boolean hasJointActualPosition() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getJointActualPosition() {
        if (jointActualPositionBuilder_ == null) {
          return jointActualPosition_;
        } else {
          return jointActualPositionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public Builder setJointActualPosition(pb.PreviewOuterClass.Position value) {
        if (jointActualPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointActualPosition_ = value;
          onChanged();
        } else {
          jointActualPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public Builder setJointActualPosition(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (jointActualPositionBuilder_ == null) {
          jointActualPosition_ = builderForValue.build();
          onChanged();
        } else {
          jointActualPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public Builder mergeJointActualPosition(pb.PreviewOuterClass.Position value) {
        if (jointActualPositionBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              jointActualPosition_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            jointActualPosition_ =
              pb.PreviewOuterClass.Position.newBuilder(jointActualPosition_).mergeFrom(value).buildPartial();
          } else {
            jointActualPosition_ = value;
          }
          onChanged();
        } else {
          jointActualPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public Builder clearJointActualPosition() {
        if (jointActualPositionBuilder_ == null) {
          jointActualPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          jointActualPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getJointActualPositionBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getJointActualPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getJointActualPositionOrBuilder() {
        if (jointActualPositionBuilder_ != null) {
          return jointActualPositionBuilder_.getMessageOrBuilder();
        } else {
          return jointActualPosition_;
        }
      }
      /**
       * <code>optional .pb.Position joint_actual_position = 25;</code>
       *
       * <pre>
       *&#47; Actual joint position.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getJointActualPositionFieldBuilder() {
        if (jointActualPositionBuilder_ == null) {
          jointActualPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getJointActualPosition(),
                  getParentForChildren(),
                  isClean());
          jointActualPosition_ = null;
        }
        return jointActualPositionBuilder_;
      }

      private pb.PreviewOuterClass.Position jointPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> jointPositionBuilder_;
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public boolean hasJointPosition() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getJointPosition() {
        if (jointPositionBuilder_ == null) {
          return jointPosition_;
        } else {
          return jointPositionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public Builder setJointPosition(pb.PreviewOuterClass.Position value) {
        if (jointPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointPosition_ = value;
          onChanged();
        } else {
          jointPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public Builder setJointPosition(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (jointPositionBuilder_ == null) {
          jointPosition_ = builderForValue.build();
          onChanged();
        } else {
          jointPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public Builder mergeJointPosition(pb.PreviewOuterClass.Position value) {
        if (jointPositionBuilder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              jointPosition_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            jointPosition_ =
              pb.PreviewOuterClass.Position.newBuilder(jointPosition_).mergeFrom(value).buildPartial();
          } else {
            jointPosition_ = value;
          }
          onChanged();
        } else {
          jointPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public Builder clearJointPosition() {
        if (jointPositionBuilder_ == null) {
          jointPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          jointPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getJointPositionBuilder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getJointPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getJointPositionOrBuilder() {
        if (jointPositionBuilder_ != null) {
          return jointPositionBuilder_.getMessageOrBuilder();
        } else {
          return jointPosition_;
        }
      }
      /**
       * <code>optional .pb.Position joint_position = 26;</code>
       *
       * <pre>
       *&#47; Desired joint position.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getJointPositionFieldBuilder() {
        if (jointPositionBuilder_ == null) {
          jointPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getJointPosition(),
                  getParentForChildren(),
                  isClean());
          jointPosition_ = null;
        }
        return jointPositionBuilder_;
      }

      private java.util.List<pb.Status.EmcStatusLimit> limit_ =
        java.util.Collections.emptyList();
      private void ensureLimitIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          limit_ = new java.util.ArrayList<pb.Status.EmcStatusLimit>(limit_);
          bitField0_ |= 0x02000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusLimit, pb.Status.EmcStatusLimit.Builder, pb.Status.EmcStatusLimitOrBuilder> limitBuilder_;

      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusLimit> getLimitList() {
        if (limitBuilder_ == null) {
          return java.util.Collections.unmodifiableList(limit_);
        } else {
          return limitBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public int getLimitCount() {
        if (limitBuilder_ == null) {
          return limit_.size();
        } else {
          return limitBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public pb.Status.EmcStatusLimit getLimit(int index) {
        if (limitBuilder_ == null) {
          return limit_.get(index);
        } else {
          return limitBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder setLimit(
          int index, pb.Status.EmcStatusLimit value) {
        if (limitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLimitIsMutable();
          limit_.set(index, value);
          onChanged();
        } else {
          limitBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder setLimit(
          int index, pb.Status.EmcStatusLimit.Builder builderForValue) {
        if (limitBuilder_ == null) {
          ensureLimitIsMutable();
          limit_.set(index, builderForValue.build());
          onChanged();
        } else {
          limitBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder addLimit(pb.Status.EmcStatusLimit value) {
        if (limitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLimitIsMutable();
          limit_.add(value);
          onChanged();
        } else {
          limitBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder addLimit(
          int index, pb.Status.EmcStatusLimit value) {
        if (limitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLimitIsMutable();
          limit_.add(index, value);
          onChanged();
        } else {
          limitBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder addLimit(
          pb.Status.EmcStatusLimit.Builder builderForValue) {
        if (limitBuilder_ == null) {
          ensureLimitIsMutable();
          limit_.add(builderForValue.build());
          onChanged();
        } else {
          limitBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder addLimit(
          int index, pb.Status.EmcStatusLimit.Builder builderForValue) {
        if (limitBuilder_ == null) {
          ensureLimitIsMutable();
          limit_.add(index, builderForValue.build());
          onChanged();
        } else {
          limitBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder addAllLimit(
          java.lang.Iterable<? extends pb.Status.EmcStatusLimit> values) {
        if (limitBuilder_ == null) {
          ensureLimitIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, limit_);
          onChanged();
        } else {
          limitBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder clearLimit() {
        if (limitBuilder_ == null) {
          limit_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
          onChanged();
        } else {
          limitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public Builder removeLimit(int index) {
        if (limitBuilder_ == null) {
          ensureLimitIsMutable();
          limit_.remove(index);
          onChanged();
        } else {
          limitBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public pb.Status.EmcStatusLimit.Builder getLimitBuilder(
          int index) {
        return getLimitFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public pb.Status.EmcStatusLimitOrBuilder getLimitOrBuilder(
          int index) {
        if (limitBuilder_ == null) {
          return limit_.get(index);  } else {
          return limitBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusLimitOrBuilder> 
           getLimitOrBuilderList() {
        if (limitBuilder_ != null) {
          return limitBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(limit_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public pb.Status.EmcStatusLimit.Builder addLimitBuilder() {
        return getLimitFieldBuilder().addBuilder(
            pb.Status.EmcStatusLimit.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public pb.Status.EmcStatusLimit.Builder addLimitBuilder(
          int index) {
        return getLimitFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusLimit.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusLimit limit = 27;</code>
       *
       * <pre>
       *&#47; Axis limit masks.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusLimit.Builder> 
           getLimitBuilderList() {
        return getLimitFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusLimit, pb.Status.EmcStatusLimit.Builder, pb.Status.EmcStatusLimitOrBuilder> 
          getLimitFieldBuilder() {
        if (limitBuilder_ == null) {
          limitBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusLimit, pb.Status.EmcStatusLimit.Builder, pb.Status.EmcStatusLimitOrBuilder>(
                  limit_,
                  ((bitField0_ & 0x02000000) == 0x02000000),
                  getParentForChildren(),
                  isClean());
          limit_ = null;
        }
        return limitBuilder_;
      }

      private int motionLine_ ;
      /**
       * <code>optional int32 motion_line = 28;</code>
       *
       * <pre>
       *&#47; Source line number motion is currently executing. Relation to id is unclear.
       * </pre>
       */
      public boolean hasMotionLine() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 motion_line = 28;</code>
       *
       * <pre>
       *&#47; Source line number motion is currently executing. Relation to id is unclear.
       * </pre>
       */
      public int getMotionLine() {
        return motionLine_;
      }
      /**
       * <code>optional int32 motion_line = 28;</code>
       *
       * <pre>
       *&#47; Source line number motion is currently executing. Relation to id is unclear.
       * </pre>
       */
      public Builder setMotionLine(int value) {
        bitField0_ |= 0x04000000;
        motionLine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 motion_line = 28;</code>
       *
       * <pre>
       *&#47; Source line number motion is currently executing. Relation to id is unclear.
       * </pre>
       */
      public Builder clearMotionLine() {
        bitField0_ = (bitField0_ & ~0x04000000);
        motionLine_ = 0;
        onChanged();
        return this;
      }

      private pb.Motcmds.MotionType motionType_ = pb.Motcmds.MotionType._EMC_MOTION_TYPE_NONE;
      /**
       * <code>optional .pb.MotionType motion_type = 29;</code>
       *
       * <pre>
       *&#47; Trajectory planner mode.
       * </pre>
       */
      public boolean hasMotionType() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .pb.MotionType motion_type = 29;</code>
       *
       * <pre>
       *&#47; Trajectory planner mode.
       * </pre>
       */
      public pb.Motcmds.MotionType getMotionType() {
        return motionType_;
      }
      /**
       * <code>optional .pb.MotionType motion_type = 29;</code>
       *
       * <pre>
       *&#47; Trajectory planner mode.
       * </pre>
       */
      public Builder setMotionType(pb.Motcmds.MotionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x08000000;
        motionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.MotionType motion_type = 29;</code>
       *
       * <pre>
       *&#47; Trajectory planner mode.
       * </pre>
       */
      public Builder clearMotionType() {
        bitField0_ = (bitField0_ & ~0x08000000);
        motionType_ = pb.Motcmds.MotionType._EMC_MOTION_TYPE_NONE;
        onChanged();
        return this;
      }

      private pb.Status.EmcTrajectoryModeType motionMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
      /**
       * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public boolean hasMotionMode() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public pb.Status.EmcTrajectoryModeType getMotionMode() {
        return motionMode_;
      }
      /**
       * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public Builder setMotionMode(pb.Status.EmcTrajectoryModeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x10000000;
        motionMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTrajectoryModeType motion_mode = 30;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public Builder clearMotionMode() {
        bitField0_ = (bitField0_ & ~0x10000000);
        motionMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
        onChanged();
        return this;
      }

      private boolean paused_ ;
      /**
       * <code>optional bool paused = 31;</code>
       *
       * <pre>
       *&#47; Motion paused flag.
       * </pre>
       */
      public boolean hasPaused() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional bool paused = 31;</code>
       *
       * <pre>
       *&#47; Motion paused flag.
       * </pre>
       */
      public boolean getPaused() {
        return paused_;
      }
      /**
       * <code>optional bool paused = 31;</code>
       *
       * <pre>
       *&#47; Motion paused flag.
       * </pre>
       */
      public Builder setPaused(boolean value) {
        bitField0_ |= 0x20000000;
        paused_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool paused = 31;</code>
       *
       * <pre>
       *&#47; Motion paused flag.
       * </pre>
       */
      public Builder clearPaused() {
        bitField0_ = (bitField0_ & ~0x20000000);
        paused_ = false;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position position_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> positionBuilder_;
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getPosition() {
        if (positionBuilder_ == null) {
          return position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public Builder setPosition(pb.PreviewOuterClass.Position value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public Builder setPosition(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public Builder mergePosition(pb.PreviewOuterClass.Position value) {
        if (positionBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              position_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            position_ =
              pb.PreviewOuterClass.Position.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getPositionBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_;
        }
      }
      /**
       * <code>optional .pb.Position position = 32;</code>
       *
       * <pre>
       *&#47; Trajectory position.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getPosition(),
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }

      private boolean probeTripped_ ;
      /**
       * <code>optional bool probe_tripped = 33;</code>
       *
       * <pre>
       *&#47; True if probe has tripped.
       * </pre>
       */
      public boolean hasProbeTripped() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional bool probe_tripped = 33;</code>
       *
       * <pre>
       *&#47; True if probe has tripped.
       * </pre>
       */
      public boolean getProbeTripped() {
        return probeTripped_;
      }
      /**
       * <code>optional bool probe_tripped = 33;</code>
       *
       * <pre>
       *&#47; True if probe has tripped.
       * </pre>
       */
      public Builder setProbeTripped(boolean value) {
        bitField0_ |= 0x80000000;
        probeTripped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool probe_tripped = 33;</code>
       *
       * <pre>
       *&#47; True if probe has tripped.
       * </pre>
       */
      public Builder clearProbeTripped() {
        bitField0_ = (bitField0_ & ~0x80000000);
        probeTripped_ = false;
        onChanged();
        return this;
      }

      private int probeVal_ ;
      /**
       * <code>optional int32 probe_val = 34;</code>
       *
       * <pre>
       *&#47; Reflects the value of the motion.probe-input pin
       * </pre>
       */
      public boolean hasProbeVal() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 probe_val = 34;</code>
       *
       * <pre>
       *&#47; Reflects the value of the motion.probe-input pin
       * </pre>
       */
      public int getProbeVal() {
        return probeVal_;
      }
      /**
       * <code>optional int32 probe_val = 34;</code>
       *
       * <pre>
       *&#47; Reflects the value of the motion.probe-input pin
       * </pre>
       */
      public Builder setProbeVal(int value) {
        bitField1_ |= 0x00000001;
        probeVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 probe_val = 34;</code>
       *
       * <pre>
       *&#47; Reflects the value of the motion.probe-input pin
       * </pre>
       */
      public Builder clearProbeVal() {
        bitField1_ = (bitField1_ & ~0x00000001);
        probeVal_ = 0;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position probedPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> probedPositionBuilder_;
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public boolean hasProbedPosition() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public pb.PreviewOuterClass.Position getProbedPosition() {
        if (probedPositionBuilder_ == null) {
          return probedPosition_;
        } else {
          return probedPositionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public Builder setProbedPosition(pb.PreviewOuterClass.Position value) {
        if (probedPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          probedPosition_ = value;
          onChanged();
        } else {
          probedPositionBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public Builder setProbedPosition(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (probedPositionBuilder_ == null) {
          probedPosition_ = builderForValue.build();
          onChanged();
        } else {
          probedPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public Builder mergeProbedPosition(pb.PreviewOuterClass.Position value) {
        if (probedPositionBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              probedPosition_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            probedPosition_ =
              pb.PreviewOuterClass.Position.newBuilder(probedPosition_).mergeFrom(value).buildPartial();
          } else {
            probedPosition_ = value;
          }
          onChanged();
        } else {
          probedPositionBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public Builder clearProbedPosition() {
        if (probedPositionBuilder_ == null) {
          probedPosition_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          probedPositionBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getProbedPositionBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getProbedPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getProbedPositionOrBuilder() {
        if (probedPositionBuilder_ != null) {
          return probedPositionBuilder_.getMessageOrBuilder();
        } else {
          return probedPosition_;
        }
      }
      /**
       * <code>optional .pb.Position probed_position = 35;</code>
       *
       * <pre>
       *&#47; Position where probe has tripped
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getProbedPositionFieldBuilder() {
        if (probedPositionBuilder_ == null) {
          probedPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getProbedPosition(),
                  getParentForChildren(),
                  isClean());
          probedPosition_ = null;
        }
        return probedPositionBuilder_;
      }

      private boolean probing_ ;
      /**
       * <code>optional bool probing = 36;</code>
       *
       * <pre>
       *&#47; Probe operation in progress.
       * </pre>
       */
      public boolean hasProbing() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool probing = 36;</code>
       *
       * <pre>
       *&#47; Probe operation in progress.
       * </pre>
       */
      public boolean getProbing() {
        return probing_;
      }
      /**
       * <code>optional bool probing = 36;</code>
       *
       * <pre>
       *&#47; Probe operation in progress.
       * </pre>
       */
      public Builder setProbing(boolean value) {
        bitField1_ |= 0x00000004;
        probing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool probing = 36;</code>
       *
       * <pre>
       *&#47; Probe operation in progress.
       * </pre>
       */
      public Builder clearProbing() {
        bitField1_ = (bitField1_ & ~0x00000004);
        probing_ = false;
        onChanged();
        return this;
      }

      private int queue_ ;
      /**
       * <code>optional int32 queue = 37;</code>
       *
       * <pre>
       *&#47; Current size of trajectory planner queue.
       * </pre>
       */
      public boolean hasQueue() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 queue = 37;</code>
       *
       * <pre>
       *&#47; Current size of trajectory planner queue.
       * </pre>
       */
      public int getQueue() {
        return queue_;
      }
      /**
       * <code>optional int32 queue = 37;</code>
       *
       * <pre>
       *&#47; Current size of trajectory planner queue.
       * </pre>
       */
      public Builder setQueue(int value) {
        bitField1_ |= 0x00000008;
        queue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 queue = 37;</code>
       *
       * <pre>
       *&#47; Current size of trajectory planner queue.
       * </pre>
       */
      public Builder clearQueue() {
        bitField1_ = (bitField1_ & ~0x00000008);
        queue_ = 0;
        onChanged();
        return this;
      }

      private boolean queueFull_ ;
      /**
       * <code>optional bool queue_full = 38;</code>
       *
       * <pre>
       *&#47; Trajectory planner queue is full.
       * </pre>
       */
      public boolean hasQueueFull() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool queue_full = 38;</code>
       *
       * <pre>
       *&#47; Trajectory planner queue is full.
       * </pre>
       */
      public boolean getQueueFull() {
        return queueFull_;
      }
      /**
       * <code>optional bool queue_full = 38;</code>
       *
       * <pre>
       *&#47; Trajectory planner queue is full.
       * </pre>
       */
      public Builder setQueueFull(boolean value) {
        bitField1_ |= 0x00000010;
        queueFull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool queue_full = 38;</code>
       *
       * <pre>
       *&#47; Trajectory planner queue is full.
       * </pre>
       */
      public Builder clearQueueFull() {
        bitField1_ = (bitField1_ & ~0x00000010);
        queueFull_ = false;
        onChanged();
        return this;
      }

      private double rotationXy_ ;
      /**
       * <code>optional double rotation_xy = 39;</code>
       *
       * <pre>
       *&#47; Current XY rotation around Z axis.
       * </pre>
       */
      public boolean hasRotationXy() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double rotation_xy = 39;</code>
       *
       * <pre>
       *&#47; Current XY rotation around Z axis.
       * </pre>
       */
      public double getRotationXy() {
        return rotationXy_;
      }
      /**
       * <code>optional double rotation_xy = 39;</code>
       *
       * <pre>
       *&#47; Current XY rotation around Z axis.
       * </pre>
       */
      public Builder setRotationXy(double value) {
        bitField1_ |= 0x00000020;
        rotationXy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double rotation_xy = 39;</code>
       *
       * <pre>
       *&#47; Current XY rotation around Z axis.
       * </pre>
       */
      public Builder clearRotationXy() {
        bitField1_ = (bitField1_ & ~0x00000020);
        rotationXy_ = 0D;
        onChanged();
        return this;
      }

      private boolean spindleBrake_ ;
      /**
       * <code>optional bool spindle_brake = 40;</code>
       *
       * <pre>
       *&#47; Spindle braked.
       * </pre>
       */
      public boolean hasSpindleBrake() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool spindle_brake = 40;</code>
       *
       * <pre>
       *&#47; Spindle braked.
       * </pre>
       */
      public boolean getSpindleBrake() {
        return spindleBrake_;
      }
      /**
       * <code>optional bool spindle_brake = 40;</code>
       *
       * <pre>
       *&#47; Spindle braked.
       * </pre>
       */
      public Builder setSpindleBrake(boolean value) {
        bitField1_ |= 0x00000040;
        spindleBrake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool spindle_brake = 40;</code>
       *
       * <pre>
       *&#47; Spindle braked.
       * </pre>
       */
      public Builder clearSpindleBrake() {
        bitField1_ = (bitField1_ & ~0x00000040);
        spindleBrake_ = false;
        onChanged();
        return this;
      }

      private int spindleDirection_ ;
      /**
       * <code>optional int32 spindle_direction = 41;</code>
       *
       * <pre>
       *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
       * </pre>
       */
      public boolean hasSpindleDirection() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 spindle_direction = 41;</code>
       *
       * <pre>
       *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
       * </pre>
       */
      public int getSpindleDirection() {
        return spindleDirection_;
      }
      /**
       * <code>optional int32 spindle_direction = 41;</code>
       *
       * <pre>
       *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
       * </pre>
       */
      public Builder setSpindleDirection(int value) {
        bitField1_ |= 0x00000080;
        spindleDirection_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 spindle_direction = 41;</code>
       *
       * <pre>
       *&#47; Rotational direction of the spindle. forward=1, reverse=-1.
       * </pre>
       */
      public Builder clearSpindleDirection() {
        bitField1_ = (bitField1_ & ~0x00000080);
        spindleDirection_ = 0;
        onChanged();
        return this;
      }

      private boolean spindleEnabled_ ;
      /**
       * <code>optional bool spindle_enabled = 42;</code>
       *
       * <pre>
       *&#47; Spindle enabled.
       * </pre>
       */
      public boolean hasSpindleEnabled() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool spindle_enabled = 42;</code>
       *
       * <pre>
       *&#47; Spindle enabled.
       * </pre>
       */
      public boolean getSpindleEnabled() {
        return spindleEnabled_;
      }
      /**
       * <code>optional bool spindle_enabled = 42;</code>
       *
       * <pre>
       *&#47; Spindle enabled.
       * </pre>
       */
      public Builder setSpindleEnabled(boolean value) {
        bitField1_ |= 0x00000100;
        spindleEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool spindle_enabled = 42;</code>
       *
       * <pre>
       *&#47; Spindle enabled.
       * </pre>
       */
      public Builder clearSpindleEnabled() {
        bitField1_ = (bitField1_ & ~0x00000100);
        spindleEnabled_ = false;
        onChanged();
        return this;
      }

      private int spindleIncreasing_ ;
      /**
       * <code>optional int32 spindle_increasing = 43;</code>
       *
       * <pre>
       *&#47; Spindle speed is increasing.
       * </pre>
       */
      public boolean hasSpindleIncreasing() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 spindle_increasing = 43;</code>
       *
       * <pre>
       *&#47; Spindle speed is increasing.
       * </pre>
       */
      public int getSpindleIncreasing() {
        return spindleIncreasing_;
      }
      /**
       * <code>optional int32 spindle_increasing = 43;</code>
       *
       * <pre>
       *&#47; Spindle speed is increasing.
       * </pre>
       */
      public Builder setSpindleIncreasing(int value) {
        bitField1_ |= 0x00000200;
        spindleIncreasing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 spindle_increasing = 43;</code>
       *
       * <pre>
       *&#47; Spindle speed is increasing.
       * </pre>
       */
      public Builder clearSpindleIncreasing() {
        bitField1_ = (bitField1_ & ~0x00000200);
        spindleIncreasing_ = 0;
        onChanged();
        return this;
      }

      private boolean spindleOverrideEnabled_ ;
      /**
       * <code>optional bool spindle_override_enabled = 44;</code>
       *
       * <pre>
       *&#47; Spindle override is enabled.
       * </pre>
       */
      public boolean hasSpindleOverrideEnabled() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool spindle_override_enabled = 44;</code>
       *
       * <pre>
       *&#47; Spindle override is enabled.
       * </pre>
       */
      public boolean getSpindleOverrideEnabled() {
        return spindleOverrideEnabled_;
      }
      /**
       * <code>optional bool spindle_override_enabled = 44;</code>
       *
       * <pre>
       *&#47; Spindle override is enabled.
       * </pre>
       */
      public Builder setSpindleOverrideEnabled(boolean value) {
        bitField1_ |= 0x00000400;
        spindleOverrideEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool spindle_override_enabled = 44;</code>
       *
       * <pre>
       *&#47; Spindle override is enabled.
       * </pre>
       */
      public Builder clearSpindleOverrideEnabled() {
        bitField1_ = (bitField1_ & ~0x00000400);
        spindleOverrideEnabled_ = false;
        onChanged();
        return this;
      }

      private double spindleSpeed_ ;
      /**
       * <code>optional double spindle_speed = 45;</code>
       *
       * <pre>
       *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
       * </pre>
       */
      public boolean hasSpindleSpeed() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional double spindle_speed = 45;</code>
       *
       * <pre>
       *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
       * </pre>
       */
      public double getSpindleSpeed() {
        return spindleSpeed_;
      }
      /**
       * <code>optional double spindle_speed = 45;</code>
       *
       * <pre>
       *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
       * </pre>
       */
      public Builder setSpindleSpeed(double value) {
        bitField1_ |= 0x00000800;
        spindleSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double spindle_speed = 45;</code>
       *
       * <pre>
       *&#47; Spindle speed value in rpm. &gt; 0 is clockwise, &lt; 0 is counterclockwise
       * </pre>
       */
      public Builder clearSpindleSpeed() {
        bitField1_ = (bitField1_ & ~0x00000800);
        spindleSpeed_ = 0D;
        onChanged();
        return this;
      }

      private double spindlerate_ ;
      /**
       * <code>optional double spindlerate = 46;</code>
       *
       * <pre>
       *&#47; Spindle speed override.
       * </pre>
       */
      public boolean hasSpindlerate() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional double spindlerate = 46;</code>
       *
       * <pre>
       *&#47; Spindle speed override.
       * </pre>
       */
      public double getSpindlerate() {
        return spindlerate_;
      }
      /**
       * <code>optional double spindlerate = 46;</code>
       *
       * <pre>
       *&#47; Spindle speed override.
       * </pre>
       */
      public Builder setSpindlerate(double value) {
        bitField1_ |= 0x00001000;
        spindlerate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double spindlerate = 46;</code>
       *
       * <pre>
       *&#47; Spindle speed override.
       * </pre>
       */
      public Builder clearSpindlerate() {
        bitField1_ = (bitField1_ & ~0x00001000);
        spindlerate_ = 0D;
        onChanged();
        return this;
      }

      private pb.Types.RCS_STATUS state_ = pb.Types.RCS_STATUS.UNINITIALIZED_STATUS;
      /**
       * <code>optional .pb.RCS_STATUS state = 47;</code>
       *
       * <pre>
       *&#47; Current command execution status.
       * </pre>
       */
      public boolean hasState() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .pb.RCS_STATUS state = 47;</code>
       *
       * <pre>
       *&#47; Current command execution status.
       * </pre>
       */
      public pb.Types.RCS_STATUS getState() {
        return state_;
      }
      /**
       * <code>optional .pb.RCS_STATUS state = 47;</code>
       *
       * <pre>
       *&#47; Current command execution status.
       * </pre>
       */
      public Builder setState(pb.Types.RCS_STATUS value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField1_ |= 0x00002000;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.RCS_STATUS state = 47;</code>
       *
       * <pre>
       *&#47; Current command execution status.
       * </pre>
       */
      public Builder clearState() {
        bitField1_ = (bitField1_ & ~0x00002000);
        state_ = pb.Types.RCS_STATUS.UNINITIALIZED_STATUS;
        onChanged();
        return this;
      }

      private double maxVelocity_ ;
      /**
       * <code>optional double max_velocity = 48;</code>
       *
       * <pre>
       *&#47; Maximum velocity override.
       * </pre>
       */
      public boolean hasMaxVelocity() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional double max_velocity = 48;</code>
       *
       * <pre>
       *&#47; Maximum velocity override.
       * </pre>
       */
      public double getMaxVelocity() {
        return maxVelocity_;
      }
      /**
       * <code>optional double max_velocity = 48;</code>
       *
       * <pre>
       *&#47; Maximum velocity override.
       * </pre>
       */
      public Builder setMaxVelocity(double value) {
        bitField1_ |= 0x00004000;
        maxVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_velocity = 48;</code>
       *
       * <pre>
       *&#47; Maximum velocity override.
       * </pre>
       */
      public Builder clearMaxVelocity() {
        bitField1_ = (bitField1_ & ~0x00004000);
        maxVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double maxAcceleration_ ;
      /**
       * <code>optional double max_acceleration = 49;</code>
       *
       * <pre>
       *&#47; TODO remove
       * </pre>
       */
      public boolean hasMaxAcceleration() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional double max_acceleration = 49;</code>
       *
       * <pre>
       *&#47; TODO remove
       * </pre>
       */
      public double getMaxAcceleration() {
        return maxAcceleration_;
      }
      /**
       * <code>optional double max_acceleration = 49;</code>
       *
       * <pre>
       *&#47; TODO remove
       * </pre>
       */
      public Builder setMaxAcceleration(double value) {
        bitField1_ |= 0x00008000;
        maxAcceleration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double max_acceleration = 49;</code>
       *
       * <pre>
       *&#47; TODO remove
       * </pre>
       */
      public Builder clearMaxAcceleration() {
        bitField1_ = (bitField1_ & ~0x00008000);
        maxAcceleration_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusMotion)
    }

    static {
      defaultInstance = new EmcStatusMotion(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusMotion)
  }

  public interface EmcStatusIoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusIo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool estop = 1;</code>
     *
     * <pre>
     *&#47; Estop active.
     * </pre>
     */
    boolean hasEstop();
    /**
     * <code>optional bool estop = 1;</code>
     *
     * <pre>
     *&#47; Estop active.
     * </pre>
     */
    boolean getEstop();

    /**
     * <code>optional bool flood = 2;</code>
     *
     * <pre>
     *&#47; Flood enabled.
     * </pre>
     */
    boolean hasFlood();
    /**
     * <code>optional bool flood = 2;</code>
     *
     * <pre>
     *&#47; Flood enabled.
     * </pre>
     */
    boolean getFlood();

    /**
     * <code>optional bool lube = 3;</code>
     *
     * <pre>
     *&#47; Lube enabled.
     * </pre>
     */
    boolean hasLube();
    /**
     * <code>optional bool lube = 3;</code>
     *
     * <pre>
     *&#47; Lube enabled.
     * </pre>
     */
    boolean getLube();

    /**
     * <code>optional bool lube_level = 4;</code>
     *
     * <pre>
     *&#47; Lube level. Reflects iocontrol.0.lube_level
     * </pre>
     */
    boolean hasLubeLevel();
    /**
     * <code>optional bool lube_level = 4;</code>
     *
     * <pre>
     *&#47; Lube level. Reflects iocontrol.0.lube_level
     * </pre>
     */
    boolean getLubeLevel();

    /**
     * <code>optional bool mist = 5;</code>
     *
     * <pre>
     *&#47; Mist enabled.
     * </pre>
     */
    boolean hasMist();
    /**
     * <code>optional bool mist = 5;</code>
     *
     * <pre>
     *&#47; Mist enabled.
     * </pre>
     */
    boolean getMist();

    /**
     * <code>optional bool pocket_prepped = 6;</code>
     *
     * <pre>
     *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
     * </pre>
     */
    boolean hasPocketPrepped();
    /**
     * <code>optional bool pocket_prepped = 6;</code>
     *
     * <pre>
     *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
     * </pre>
     */
    boolean getPocketPrepped();

    /**
     * <code>optional bool tool_in_spindle = 7;</code>
     *
     * <pre>
     *&#47; Current tool number.
     * </pre>
     */
    boolean hasToolInSpindle();
    /**
     * <code>optional bool tool_in_spindle = 7;</code>
     *
     * <pre>
     *&#47; Current tool number.
     * </pre>
     */
    boolean getToolInSpindle();

    /**
     * <code>optional .pb.Position tool_offset = 8;</code>
     *
     * <pre>
     *&#47; Offset values of the current tool.
     * </pre>
     */
    boolean hasToolOffset();
    /**
     * <code>optional .pb.Position tool_offset = 8;</code>
     *
     * <pre>
     *&#47; Offset values of the current tool.
     * </pre>
     */
    pb.PreviewOuterClass.Position getToolOffset();
    /**
     * <code>optional .pb.Position tool_offset = 8;</code>
     *
     * <pre>
     *&#47; Offset values of the current tool.
     * </pre>
     */
    pb.PreviewOuterClass.PositionOrBuilder getToolOffsetOrBuilder();

    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    java.util.List<pb.Status.EmcToolData> 
        getToolTableList();
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    pb.Status.EmcToolData getToolTable(int index);
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    int getToolTableCount();
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcToolDataOrBuilder> 
        getToolTableOrBuilderList();
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    pb.Status.EmcToolDataOrBuilder getToolTableOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pb.EmcStatusIo}
   *
   * <pre>
   **
   * EMC IO message.
   * </pre>
   */
  public static final class EmcStatusIo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusIo)
      EmcStatusIoOrBuilder {
    // Use EmcStatusIo.newBuilder() to construct.
    private EmcStatusIo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusIo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusIo defaultInstance;
    public static EmcStatusIo getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusIo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusIo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              estop_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              flood_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lube_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              lubeLevel_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              mist_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              pocketPrepped_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              toolInSpindle_ = input.readBool();
              break;
            }
            case 66: {
              pb.PreviewOuterClass.Position.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = toolOffset_.toBuilder();
              }
              toolOffset_ = input.readMessage(pb.PreviewOuterClass.Position.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(toolOffset_);
                toolOffset_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                toolTable_ = new java.util.ArrayList<pb.Status.EmcToolData>();
                mutable_bitField0_ |= 0x00000100;
              }
              toolTable_.add(input.readMessage(pb.Status.EmcToolData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          toolTable_ = java.util.Collections.unmodifiableList(toolTable_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusIo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusIo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusIo.class, pb.Status.EmcStatusIo.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusIo> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusIo>() {
      public EmcStatusIo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusIo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusIo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ESTOP_FIELD_NUMBER = 1;
    private boolean estop_;
    /**
     * <code>optional bool estop = 1;</code>
     *
     * <pre>
     *&#47; Estop active.
     * </pre>
     */
    public boolean hasEstop() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool estop = 1;</code>
     *
     * <pre>
     *&#47; Estop active.
     * </pre>
     */
    public boolean getEstop() {
      return estop_;
    }

    public static final int FLOOD_FIELD_NUMBER = 2;
    private boolean flood_;
    /**
     * <code>optional bool flood = 2;</code>
     *
     * <pre>
     *&#47; Flood enabled.
     * </pre>
     */
    public boolean hasFlood() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool flood = 2;</code>
     *
     * <pre>
     *&#47; Flood enabled.
     * </pre>
     */
    public boolean getFlood() {
      return flood_;
    }

    public static final int LUBE_FIELD_NUMBER = 3;
    private boolean lube_;
    /**
     * <code>optional bool lube = 3;</code>
     *
     * <pre>
     *&#47; Lube enabled.
     * </pre>
     */
    public boolean hasLube() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool lube = 3;</code>
     *
     * <pre>
     *&#47; Lube enabled.
     * </pre>
     */
    public boolean getLube() {
      return lube_;
    }

    public static final int LUBE_LEVEL_FIELD_NUMBER = 4;
    private boolean lubeLevel_;
    /**
     * <code>optional bool lube_level = 4;</code>
     *
     * <pre>
     *&#47; Lube level. Reflects iocontrol.0.lube_level
     * </pre>
     */
    public boolean hasLubeLevel() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool lube_level = 4;</code>
     *
     * <pre>
     *&#47; Lube level. Reflects iocontrol.0.lube_level
     * </pre>
     */
    public boolean getLubeLevel() {
      return lubeLevel_;
    }

    public static final int MIST_FIELD_NUMBER = 5;
    private boolean mist_;
    /**
     * <code>optional bool mist = 5;</code>
     *
     * <pre>
     *&#47; Mist enabled.
     * </pre>
     */
    public boolean hasMist() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool mist = 5;</code>
     *
     * <pre>
     *&#47; Mist enabled.
     * </pre>
     */
    public boolean getMist() {
      return mist_;
    }

    public static final int POCKET_PREPPED_FIELD_NUMBER = 6;
    private boolean pocketPrepped_;
    /**
     * <code>optional bool pocket_prepped = 6;</code>
     *
     * <pre>
     *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
     * </pre>
     */
    public boolean hasPocketPrepped() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool pocket_prepped = 6;</code>
     *
     * <pre>
     *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
     * </pre>
     */
    public boolean getPocketPrepped() {
      return pocketPrepped_;
    }

    public static final int TOOL_IN_SPINDLE_FIELD_NUMBER = 7;
    private boolean toolInSpindle_;
    /**
     * <code>optional bool tool_in_spindle = 7;</code>
     *
     * <pre>
     *&#47; Current tool number.
     * </pre>
     */
    public boolean hasToolInSpindle() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool tool_in_spindle = 7;</code>
     *
     * <pre>
     *&#47; Current tool number.
     * </pre>
     */
    public boolean getToolInSpindle() {
      return toolInSpindle_;
    }

    public static final int TOOL_OFFSET_FIELD_NUMBER = 8;
    private pb.PreviewOuterClass.Position toolOffset_;
    /**
     * <code>optional .pb.Position tool_offset = 8;</code>
     *
     * <pre>
     *&#47; Offset values of the current tool.
     * </pre>
     */
    public boolean hasToolOffset() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .pb.Position tool_offset = 8;</code>
     *
     * <pre>
     *&#47; Offset values of the current tool.
     * </pre>
     */
    public pb.PreviewOuterClass.Position getToolOffset() {
      return toolOffset_;
    }
    /**
     * <code>optional .pb.Position tool_offset = 8;</code>
     *
     * <pre>
     *&#47; Offset values of the current tool.
     * </pre>
     */
    public pb.PreviewOuterClass.PositionOrBuilder getToolOffsetOrBuilder() {
      return toolOffset_;
    }

    public static final int TOOL_TABLE_FIELD_NUMBER = 9;
    private java.util.List<pb.Status.EmcToolData> toolTable_;
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    public java.util.List<pb.Status.EmcToolData> getToolTableList() {
      return toolTable_;
    }
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcToolDataOrBuilder> 
        getToolTableOrBuilderList() {
      return toolTable_;
    }
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    public int getToolTableCount() {
      return toolTable_.size();
    }
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    public pb.Status.EmcToolData getToolTable(int index) {
      return toolTable_.get(index);
    }
    /**
     * <code>repeated .pb.EmcToolData tool_table = 9;</code>
     *
     * <pre>
     *&#47; List of tool entries.
     * </pre>
     */
    public pb.Status.EmcToolDataOrBuilder getToolTableOrBuilder(
        int index) {
      return toolTable_.get(index);
    }

    private void initFields() {
      estop_ = false;
      flood_ = false;
      lube_ = false;
      lubeLevel_ = false;
      mist_ = false;
      pocketPrepped_ = false;
      toolInSpindle_ = false;
      toolOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      toolTable_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getToolTableCount(); i++) {
        if (!getToolTable(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, estop_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, flood_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, lube_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, lubeLevel_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, mist_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, pocketPrepped_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, toolInSpindle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, toolOffset_);
      }
      for (int i = 0; i < toolTable_.size(); i++) {
        output.writeMessage(9, toolTable_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, estop_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, flood_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, lube_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, lubeLevel_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, mist_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, pocketPrepped_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, toolInSpindle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, toolOffset_);
      }
      for (int i = 0; i < toolTable_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, toolTable_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusIo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusIo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusIo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusIo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusIo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusIo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusIo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusIo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusIo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusIo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusIo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusIo}
     *
     * <pre>
     **
     * EMC IO message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusIo)
        pb.Status.EmcStatusIoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusIo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusIo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusIo.class, pb.Status.EmcStatusIo.Builder.class);
      }

      // Construct using pb.Status.EmcStatusIo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getToolOffsetFieldBuilder();
          getToolTableFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        estop_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        flood_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        lube_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        lubeLevel_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        mist_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        pocketPrepped_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        toolInSpindle_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (toolOffsetBuilder_ == null) {
          toolOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
        } else {
          toolOffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (toolTableBuilder_ == null) {
          toolTable_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          toolTableBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusIo_descriptor;
      }

      public pb.Status.EmcStatusIo getDefaultInstanceForType() {
        return pb.Status.EmcStatusIo.getDefaultInstance();
      }

      public pb.Status.EmcStatusIo build() {
        pb.Status.EmcStatusIo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusIo buildPartial() {
        pb.Status.EmcStatusIo result = new pb.Status.EmcStatusIo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.estop_ = estop_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flood_ = flood_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lube_ = lube_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lubeLevel_ = lubeLevel_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mist_ = mist_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pocketPrepped_ = pocketPrepped_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.toolInSpindle_ = toolInSpindle_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (toolOffsetBuilder_ == null) {
          result.toolOffset_ = toolOffset_;
        } else {
          result.toolOffset_ = toolOffsetBuilder_.build();
        }
        if (toolTableBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            toolTable_ = java.util.Collections.unmodifiableList(toolTable_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.toolTable_ = toolTable_;
        } else {
          result.toolTable_ = toolTableBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusIo) {
          return mergeFrom((pb.Status.EmcStatusIo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusIo other) {
        if (other == pb.Status.EmcStatusIo.getDefaultInstance()) return this;
        if (other.hasEstop()) {
          setEstop(other.getEstop());
        }
        if (other.hasFlood()) {
          setFlood(other.getFlood());
        }
        if (other.hasLube()) {
          setLube(other.getLube());
        }
        if (other.hasLubeLevel()) {
          setLubeLevel(other.getLubeLevel());
        }
        if (other.hasMist()) {
          setMist(other.getMist());
        }
        if (other.hasPocketPrepped()) {
          setPocketPrepped(other.getPocketPrepped());
        }
        if (other.hasToolInSpindle()) {
          setToolInSpindle(other.getToolInSpindle());
        }
        if (other.hasToolOffset()) {
          mergeToolOffset(other.getToolOffset());
        }
        if (toolTableBuilder_ == null) {
          if (!other.toolTable_.isEmpty()) {
            if (toolTable_.isEmpty()) {
              toolTable_ = other.toolTable_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureToolTableIsMutable();
              toolTable_.addAll(other.toolTable_);
            }
            onChanged();
          }
        } else {
          if (!other.toolTable_.isEmpty()) {
            if (toolTableBuilder_.isEmpty()) {
              toolTableBuilder_.dispose();
              toolTableBuilder_ = null;
              toolTable_ = other.toolTable_;
              bitField0_ = (bitField0_ & ~0x00000100);
              toolTableBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getToolTableFieldBuilder() : null;
            } else {
              toolTableBuilder_.addAllMessages(other.toolTable_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getToolTableCount(); i++) {
          if (!getToolTable(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusIo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusIo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean estop_ ;
      /**
       * <code>optional bool estop = 1;</code>
       *
       * <pre>
       *&#47; Estop active.
       * </pre>
       */
      public boolean hasEstop() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool estop = 1;</code>
       *
       * <pre>
       *&#47; Estop active.
       * </pre>
       */
      public boolean getEstop() {
        return estop_;
      }
      /**
       * <code>optional bool estop = 1;</code>
       *
       * <pre>
       *&#47; Estop active.
       * </pre>
       */
      public Builder setEstop(boolean value) {
        bitField0_ |= 0x00000001;
        estop_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool estop = 1;</code>
       *
       * <pre>
       *&#47; Estop active.
       * </pre>
       */
      public Builder clearEstop() {
        bitField0_ = (bitField0_ & ~0x00000001);
        estop_ = false;
        onChanged();
        return this;
      }

      private boolean flood_ ;
      /**
       * <code>optional bool flood = 2;</code>
       *
       * <pre>
       *&#47; Flood enabled.
       * </pre>
       */
      public boolean hasFlood() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool flood = 2;</code>
       *
       * <pre>
       *&#47; Flood enabled.
       * </pre>
       */
      public boolean getFlood() {
        return flood_;
      }
      /**
       * <code>optional bool flood = 2;</code>
       *
       * <pre>
       *&#47; Flood enabled.
       * </pre>
       */
      public Builder setFlood(boolean value) {
        bitField0_ |= 0x00000002;
        flood_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool flood = 2;</code>
       *
       * <pre>
       *&#47; Flood enabled.
       * </pre>
       */
      public Builder clearFlood() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flood_ = false;
        onChanged();
        return this;
      }

      private boolean lube_ ;
      /**
       * <code>optional bool lube = 3;</code>
       *
       * <pre>
       *&#47; Lube enabled.
       * </pre>
       */
      public boolean hasLube() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool lube = 3;</code>
       *
       * <pre>
       *&#47; Lube enabled.
       * </pre>
       */
      public boolean getLube() {
        return lube_;
      }
      /**
       * <code>optional bool lube = 3;</code>
       *
       * <pre>
       *&#47; Lube enabled.
       * </pre>
       */
      public Builder setLube(boolean value) {
        bitField0_ |= 0x00000004;
        lube_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool lube = 3;</code>
       *
       * <pre>
       *&#47; Lube enabled.
       * </pre>
       */
      public Builder clearLube() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lube_ = false;
        onChanged();
        return this;
      }

      private boolean lubeLevel_ ;
      /**
       * <code>optional bool lube_level = 4;</code>
       *
       * <pre>
       *&#47; Lube level. Reflects iocontrol.0.lube_level
       * </pre>
       */
      public boolean hasLubeLevel() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool lube_level = 4;</code>
       *
       * <pre>
       *&#47; Lube level. Reflects iocontrol.0.lube_level
       * </pre>
       */
      public boolean getLubeLevel() {
        return lubeLevel_;
      }
      /**
       * <code>optional bool lube_level = 4;</code>
       *
       * <pre>
       *&#47; Lube level. Reflects iocontrol.0.lube_level
       * </pre>
       */
      public Builder setLubeLevel(boolean value) {
        bitField0_ |= 0x00000008;
        lubeLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool lube_level = 4;</code>
       *
       * <pre>
       *&#47; Lube level. Reflects iocontrol.0.lube_level
       * </pre>
       */
      public Builder clearLubeLevel() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lubeLevel_ = false;
        onChanged();
        return this;
      }

      private boolean mist_ ;
      /**
       * <code>optional bool mist = 5;</code>
       *
       * <pre>
       *&#47; Mist enabled.
       * </pre>
       */
      public boolean hasMist() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool mist = 5;</code>
       *
       * <pre>
       *&#47; Mist enabled.
       * </pre>
       */
      public boolean getMist() {
        return mist_;
      }
      /**
       * <code>optional bool mist = 5;</code>
       *
       * <pre>
       *&#47; Mist enabled.
       * </pre>
       */
      public Builder setMist(boolean value) {
        bitField0_ |= 0x00000010;
        mist_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mist = 5;</code>
       *
       * <pre>
       *&#47; Mist enabled.
       * </pre>
       */
      public Builder clearMist() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mist_ = false;
        onChanged();
        return this;
      }

      private boolean pocketPrepped_ ;
      /**
       * <code>optional bool pocket_prepped = 6;</code>
       *
       * <pre>
       *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
       * </pre>
       */
      public boolean hasPocketPrepped() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool pocket_prepped = 6;</code>
       *
       * <pre>
       *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
       * </pre>
       */
      public boolean getPocketPrepped() {
        return pocketPrepped_;
      }
      /**
       * <code>optional bool pocket_prepped = 6;</code>
       *
       * <pre>
       *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
       * </pre>
       */
      public Builder setPocketPrepped(boolean value) {
        bitField0_ |= 0x00000020;
        pocketPrepped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool pocket_prepped = 6;</code>
       *
       * <pre>
       *&#47; A Tx command completed and this pocket is prepared. TODO wrong type?
       * </pre>
       */
      public Builder clearPocketPrepped() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pocketPrepped_ = false;
        onChanged();
        return this;
      }

      private boolean toolInSpindle_ ;
      /**
       * <code>optional bool tool_in_spindle = 7;</code>
       *
       * <pre>
       *&#47; Current tool number.
       * </pre>
       */
      public boolean hasToolInSpindle() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool tool_in_spindle = 7;</code>
       *
       * <pre>
       *&#47; Current tool number.
       * </pre>
       */
      public boolean getToolInSpindle() {
        return toolInSpindle_;
      }
      /**
       * <code>optional bool tool_in_spindle = 7;</code>
       *
       * <pre>
       *&#47; Current tool number.
       * </pre>
       */
      public Builder setToolInSpindle(boolean value) {
        bitField0_ |= 0x00000040;
        toolInSpindle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool tool_in_spindle = 7;</code>
       *
       * <pre>
       *&#47; Current tool number.
       * </pre>
       */
      public Builder clearToolInSpindle() {
        bitField0_ = (bitField0_ & ~0x00000040);
        toolInSpindle_ = false;
        onChanged();
        return this;
      }

      private pb.PreviewOuterClass.Position toolOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> toolOffsetBuilder_;
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public boolean hasToolOffset() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public pb.PreviewOuterClass.Position getToolOffset() {
        if (toolOffsetBuilder_ == null) {
          return toolOffset_;
        } else {
          return toolOffsetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public Builder setToolOffset(pb.PreviewOuterClass.Position value) {
        if (toolOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          toolOffset_ = value;
          onChanged();
        } else {
          toolOffsetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public Builder setToolOffset(
          pb.PreviewOuterClass.Position.Builder builderForValue) {
        if (toolOffsetBuilder_ == null) {
          toolOffset_ = builderForValue.build();
          onChanged();
        } else {
          toolOffsetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public Builder mergeToolOffset(pb.PreviewOuterClass.Position value) {
        if (toolOffsetBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              toolOffset_ != pb.PreviewOuterClass.Position.getDefaultInstance()) {
            toolOffset_ =
              pb.PreviewOuterClass.Position.newBuilder(toolOffset_).mergeFrom(value).buildPartial();
          } else {
            toolOffset_ = value;
          }
          onChanged();
        } else {
          toolOffsetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public Builder clearToolOffset() {
        if (toolOffsetBuilder_ == null) {
          toolOffset_ = pb.PreviewOuterClass.Position.getDefaultInstance();
          onChanged();
        } else {
          toolOffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public pb.PreviewOuterClass.Position.Builder getToolOffsetBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getToolOffsetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      public pb.PreviewOuterClass.PositionOrBuilder getToolOffsetOrBuilder() {
        if (toolOffsetBuilder_ != null) {
          return toolOffsetBuilder_.getMessageOrBuilder();
        } else {
          return toolOffset_;
        }
      }
      /**
       * <code>optional .pb.Position tool_offset = 8;</code>
       *
       * <pre>
       *&#47; Offset values of the current tool.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder> 
          getToolOffsetFieldBuilder() {
        if (toolOffsetBuilder_ == null) {
          toolOffsetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.PreviewOuterClass.Position, pb.PreviewOuterClass.Position.Builder, pb.PreviewOuterClass.PositionOrBuilder>(
                  getToolOffset(),
                  getParentForChildren(),
                  isClean());
          toolOffset_ = null;
        }
        return toolOffsetBuilder_;
      }

      private java.util.List<pb.Status.EmcToolData> toolTable_ =
        java.util.Collections.emptyList();
      private void ensureToolTableIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          toolTable_ = new java.util.ArrayList<pb.Status.EmcToolData>(toolTable_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcToolData, pb.Status.EmcToolData.Builder, pb.Status.EmcToolDataOrBuilder> toolTableBuilder_;

      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public java.util.List<pb.Status.EmcToolData> getToolTableList() {
        if (toolTableBuilder_ == null) {
          return java.util.Collections.unmodifiableList(toolTable_);
        } else {
          return toolTableBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public int getToolTableCount() {
        if (toolTableBuilder_ == null) {
          return toolTable_.size();
        } else {
          return toolTableBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public pb.Status.EmcToolData getToolTable(int index) {
        if (toolTableBuilder_ == null) {
          return toolTable_.get(index);
        } else {
          return toolTableBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder setToolTable(
          int index, pb.Status.EmcToolData value) {
        if (toolTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureToolTableIsMutable();
          toolTable_.set(index, value);
          onChanged();
        } else {
          toolTableBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder setToolTable(
          int index, pb.Status.EmcToolData.Builder builderForValue) {
        if (toolTableBuilder_ == null) {
          ensureToolTableIsMutable();
          toolTable_.set(index, builderForValue.build());
          onChanged();
        } else {
          toolTableBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder addToolTable(pb.Status.EmcToolData value) {
        if (toolTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureToolTableIsMutable();
          toolTable_.add(value);
          onChanged();
        } else {
          toolTableBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder addToolTable(
          int index, pb.Status.EmcToolData value) {
        if (toolTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureToolTableIsMutable();
          toolTable_.add(index, value);
          onChanged();
        } else {
          toolTableBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder addToolTable(
          pb.Status.EmcToolData.Builder builderForValue) {
        if (toolTableBuilder_ == null) {
          ensureToolTableIsMutable();
          toolTable_.add(builderForValue.build());
          onChanged();
        } else {
          toolTableBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder addToolTable(
          int index, pb.Status.EmcToolData.Builder builderForValue) {
        if (toolTableBuilder_ == null) {
          ensureToolTableIsMutable();
          toolTable_.add(index, builderForValue.build());
          onChanged();
        } else {
          toolTableBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder addAllToolTable(
          java.lang.Iterable<? extends pb.Status.EmcToolData> values) {
        if (toolTableBuilder_ == null) {
          ensureToolTableIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, toolTable_);
          onChanged();
        } else {
          toolTableBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder clearToolTable() {
        if (toolTableBuilder_ == null) {
          toolTable_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          toolTableBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public Builder removeToolTable(int index) {
        if (toolTableBuilder_ == null) {
          ensureToolTableIsMutable();
          toolTable_.remove(index);
          onChanged();
        } else {
          toolTableBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public pb.Status.EmcToolData.Builder getToolTableBuilder(
          int index) {
        return getToolTableFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public pb.Status.EmcToolDataOrBuilder getToolTableOrBuilder(
          int index) {
        if (toolTableBuilder_ == null) {
          return toolTable_.get(index);  } else {
          return toolTableBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcToolDataOrBuilder> 
           getToolTableOrBuilderList() {
        if (toolTableBuilder_ != null) {
          return toolTableBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(toolTable_);
        }
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public pb.Status.EmcToolData.Builder addToolTableBuilder() {
        return getToolTableFieldBuilder().addBuilder(
            pb.Status.EmcToolData.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public pb.Status.EmcToolData.Builder addToolTableBuilder(
          int index) {
        return getToolTableFieldBuilder().addBuilder(
            index, pb.Status.EmcToolData.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcToolData tool_table = 9;</code>
       *
       * <pre>
       *&#47; List of tool entries.
       * </pre>
       */
      public java.util.List<pb.Status.EmcToolData.Builder> 
           getToolTableBuilderList() {
        return getToolTableFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcToolData, pb.Status.EmcToolData.Builder, pb.Status.EmcToolDataOrBuilder> 
          getToolTableFieldBuilder() {
        if (toolTableBuilder_ == null) {
          toolTableBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcToolData, pb.Status.EmcToolData.Builder, pb.Status.EmcToolDataOrBuilder>(
                  toolTable_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          toolTable_ = null;
        }
        return toolTableBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusIo)
    }

    static {
      defaultInstance = new EmcStatusIo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusIo)
  }

  public interface EmcStatusTaskOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusTask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 echo_serial_number = 1;</code>
     *
     * <pre>
     **
     * The serial number of the last executed command set by a UI to task.
     * All commands carry a serial number. Once the command has been executed,
     * its serial number is reflected in echo_serial_number.
     * </pre>
     */
    boolean hasEchoSerialNumber();
    /**
     * <code>optional int32 echo_serial_number = 1;</code>
     *
     * <pre>
     **
     * The serial number of the last executed command set by a UI to task.
     * All commands carry a serial number. Once the command has been executed,
     * its serial number is reflected in echo_serial_number.
     * </pre>
     */
    int getEchoSerialNumber();

    /**
     * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
     *
     * <pre>
     *&#47; Task execution state.
     * </pre>
     */
    boolean hasExecState();
    /**
     * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
     *
     * <pre>
     *&#47; Task execution state.
     * </pre>
     */
    pb.Status.EmcTaskExecStateType getExecState();

    /**
     * <code>optional string file = 3;</code>
     *
     * <pre>
     *&#47; Currently executing gcode file.
     * </pre>
     */
    boolean hasFile();
    /**
     * <code>optional string file = 3;</code>
     *
     * <pre>
     *&#47; Currently executing gcode file.
     * </pre>
     */
    java.lang.String getFile();
    /**
     * <code>optional string file = 3;</code>
     *
     * <pre>
     *&#47; Currently executing gcode file.
     * </pre>
     */
    com.google.protobuf.ByteString
        getFileBytes();

    /**
     * <code>optional bool input_timeout = 4;</code>
     *
     * <pre>
     *&#47; Flag for M66 timer in progress.
     * </pre>
     */
    boolean hasInputTimeout();
    /**
     * <code>optional bool input_timeout = 4;</code>
     *
     * <pre>
     *&#47; Flag for M66 timer in progress.
     * </pre>
     */
    boolean getInputTimeout();

    /**
     * <code>optional bool optional_stop = 5;</code>
     *
     * <pre>
     *&#47; Optional stop enabled.
     * </pre>
     */
    boolean hasOptionalStop();
    /**
     * <code>optional bool optional_stop = 5;</code>
     *
     * <pre>
     *&#47; Optional stop enabled.
     * </pre>
     */
    boolean getOptionalStop();

    /**
     * <code>optional int32 read_line = 6;</code>
     *
     * <pre>
     *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
     * </pre>
     */
    boolean hasReadLine();
    /**
     * <code>optional int32 read_line = 6;</code>
     *
     * <pre>
     *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
     * </pre>
     */
    int getReadLine();

    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
     *
     * <pre>
     *&#47; Current task mode.
     * </pre>
     */
    boolean hasTaskMode();
    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
     *
     * <pre>
     *&#47; Current task mode.
     * </pre>
     */
    pb.Status.EmcTaskModeType getTaskMode();

    /**
     * <code>optional int32 task_paused = 8;</code>
     *
     * <pre>
     *&#47; Task paused.
     * </pre>
     */
    boolean hasTaskPaused();
    /**
     * <code>optional int32 task_paused = 8;</code>
     *
     * <pre>
     *&#47; Task paused.
     * </pre>
     */
    int getTaskPaused();

    /**
     * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
     *
     * <pre>
     *&#47; Current task state.
     * </pre>
     */
    boolean hasTaskState();
    /**
     * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
     *
     * <pre>
     *&#47; Current task state.
     * </pre>
     */
    pb.Status.EmcTaskStateType getTaskState();

    /**
     * <code>optional int32 total_lines = 10;</code>
     *
     * <pre>
     *&#47; Total number of lines of currently active program file.
     * </pre>
     */
    boolean hasTotalLines();
    /**
     * <code>optional int32 total_lines = 10;</code>
     *
     * <pre>
     *&#47; Total number of lines of currently active program file.
     * </pre>
     */
    int getTotalLines();
  }
  /**
   * Protobuf type {@code pb.EmcStatusTask}
   *
   * <pre>
   **
   * EMC status task message.
   * </pre>
   */
  public static final class EmcStatusTask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusTask)
      EmcStatusTaskOrBuilder {
    // Use EmcStatusTask.newBuilder() to construct.
    private EmcStatusTask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusTask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusTask defaultInstance;
    public static EmcStatusTask getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusTask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusTask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              echoSerialNumber_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              pb.Status.EmcTaskExecStateType value = pb.Status.EmcTaskExecStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                execState_ = value;
              }
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              file_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              inputTimeout_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              optionalStop_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              readLine_ = input.readInt32();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              pb.Status.EmcTaskModeType value = pb.Status.EmcTaskModeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                taskMode_ = value;
              }
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              taskPaused_ = input.readInt32();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              pb.Status.EmcTaskStateType value = pb.Status.EmcTaskStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                taskState_ = value;
              }
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              totalLines_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusTask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusTask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusTask.class, pb.Status.EmcStatusTask.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusTask> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusTask>() {
      public EmcStatusTask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusTask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusTask> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ECHO_SERIAL_NUMBER_FIELD_NUMBER = 1;
    private int echoSerialNumber_;
    /**
     * <code>optional int32 echo_serial_number = 1;</code>
     *
     * <pre>
     **
     * The serial number of the last executed command set by a UI to task.
     * All commands carry a serial number. Once the command has been executed,
     * its serial number is reflected in echo_serial_number.
     * </pre>
     */
    public boolean hasEchoSerialNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 echo_serial_number = 1;</code>
     *
     * <pre>
     **
     * The serial number of the last executed command set by a UI to task.
     * All commands carry a serial number. Once the command has been executed,
     * its serial number is reflected in echo_serial_number.
     * </pre>
     */
    public int getEchoSerialNumber() {
      return echoSerialNumber_;
    }

    public static final int EXEC_STATE_FIELD_NUMBER = 2;
    private pb.Status.EmcTaskExecStateType execState_;
    /**
     * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
     *
     * <pre>
     *&#47; Task execution state.
     * </pre>
     */
    public boolean hasExecState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
     *
     * <pre>
     *&#47; Task execution state.
     * </pre>
     */
    public pb.Status.EmcTaskExecStateType getExecState() {
      return execState_;
    }

    public static final int FILE_FIELD_NUMBER = 3;
    private java.lang.Object file_;
    /**
     * <code>optional string file = 3;</code>
     *
     * <pre>
     *&#47; Currently executing gcode file.
     * </pre>
     */
    public boolean hasFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string file = 3;</code>
     *
     * <pre>
     *&#47; Currently executing gcode file.
     * </pre>
     */
    public java.lang.String getFile() {
      java.lang.Object ref = file_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          file_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string file = 3;</code>
     *
     * <pre>
     *&#47; Currently executing gcode file.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFileBytes() {
      java.lang.Object ref = file_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        file_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INPUT_TIMEOUT_FIELD_NUMBER = 4;
    private boolean inputTimeout_;
    /**
     * <code>optional bool input_timeout = 4;</code>
     *
     * <pre>
     *&#47; Flag for M66 timer in progress.
     * </pre>
     */
    public boolean hasInputTimeout() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool input_timeout = 4;</code>
     *
     * <pre>
     *&#47; Flag for M66 timer in progress.
     * </pre>
     */
    public boolean getInputTimeout() {
      return inputTimeout_;
    }

    public static final int OPTIONAL_STOP_FIELD_NUMBER = 5;
    private boolean optionalStop_;
    /**
     * <code>optional bool optional_stop = 5;</code>
     *
     * <pre>
     *&#47; Optional stop enabled.
     * </pre>
     */
    public boolean hasOptionalStop() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool optional_stop = 5;</code>
     *
     * <pre>
     *&#47; Optional stop enabled.
     * </pre>
     */
    public boolean getOptionalStop() {
      return optionalStop_;
    }

    public static final int READ_LINE_FIELD_NUMBER = 6;
    private int readLine_;
    /**
     * <code>optional int32 read_line = 6;</code>
     *
     * <pre>
     *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
     * </pre>
     */
    public boolean hasReadLine() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 read_line = 6;</code>
     *
     * <pre>
     *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
     * </pre>
     */
    public int getReadLine() {
      return readLine_;
    }

    public static final int TASK_MODE_FIELD_NUMBER = 7;
    private pb.Status.EmcTaskModeType taskMode_;
    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
     *
     * <pre>
     *&#47; Current task mode.
     * </pre>
     */
    public boolean hasTaskMode() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
     *
     * <pre>
     *&#47; Current task mode.
     * </pre>
     */
    public pb.Status.EmcTaskModeType getTaskMode() {
      return taskMode_;
    }

    public static final int TASK_PAUSED_FIELD_NUMBER = 8;
    private int taskPaused_;
    /**
     * <code>optional int32 task_paused = 8;</code>
     *
     * <pre>
     *&#47; Task paused.
     * </pre>
     */
    public boolean hasTaskPaused() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 task_paused = 8;</code>
     *
     * <pre>
     *&#47; Task paused.
     * </pre>
     */
    public int getTaskPaused() {
      return taskPaused_;
    }

    public static final int TASK_STATE_FIELD_NUMBER = 9;
    private pb.Status.EmcTaskStateType taskState_;
    /**
     * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
     *
     * <pre>
     *&#47; Current task state.
     * </pre>
     */
    public boolean hasTaskState() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
     *
     * <pre>
     *&#47; Current task state.
     * </pre>
     */
    public pb.Status.EmcTaskStateType getTaskState() {
      return taskState_;
    }

    public static final int TOTAL_LINES_FIELD_NUMBER = 10;
    private int totalLines_;
    /**
     * <code>optional int32 total_lines = 10;</code>
     *
     * <pre>
     *&#47; Total number of lines of currently active program file.
     * </pre>
     */
    public boolean hasTotalLines() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 total_lines = 10;</code>
     *
     * <pre>
     *&#47; Total number of lines of currently active program file.
     * </pre>
     */
    public int getTotalLines() {
      return totalLines_;
    }

    private void initFields() {
      echoSerialNumber_ = 0;
      execState_ = pb.Status.EmcTaskExecStateType.EMC_TASK_EXEC_ERROR;
      file_ = "";
      inputTimeout_ = false;
      optionalStop_ = false;
      readLine_ = 0;
      taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
      taskPaused_ = 0;
      taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
      totalLines_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, echoSerialNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, execState_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, inputTimeout_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, optionalStop_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, readLine_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, taskMode_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, taskPaused_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, taskState_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, totalLines_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, echoSerialNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, execState_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, inputTimeout_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, optionalStop_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, readLine_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, taskMode_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, taskPaused_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, taskState_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, totalLines_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusTask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusTask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusTask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusTask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusTask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusTask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusTask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusTask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusTask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusTask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusTask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusTask}
     *
     * <pre>
     **
     * EMC status task message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusTask)
        pb.Status.EmcStatusTaskOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusTask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusTask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusTask.class, pb.Status.EmcStatusTask.Builder.class);
      }

      // Construct using pb.Status.EmcStatusTask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        echoSerialNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        execState_ = pb.Status.EmcTaskExecStateType.EMC_TASK_EXEC_ERROR;
        bitField0_ = (bitField0_ & ~0x00000002);
        file_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        inputTimeout_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        optionalStop_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        readLine_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
        bitField0_ = (bitField0_ & ~0x00000040);
        taskPaused_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
        bitField0_ = (bitField0_ & ~0x00000100);
        totalLines_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusTask_descriptor;
      }

      public pb.Status.EmcStatusTask getDefaultInstanceForType() {
        return pb.Status.EmcStatusTask.getDefaultInstance();
      }

      public pb.Status.EmcStatusTask build() {
        pb.Status.EmcStatusTask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusTask buildPartial() {
        pb.Status.EmcStatusTask result = new pb.Status.EmcStatusTask(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.echoSerialNumber_ = echoSerialNumber_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.execState_ = execState_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.file_ = file_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.inputTimeout_ = inputTimeout_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.optionalStop_ = optionalStop_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.readLine_ = readLine_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.taskMode_ = taskMode_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.taskPaused_ = taskPaused_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.taskState_ = taskState_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.totalLines_ = totalLines_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusTask) {
          return mergeFrom((pb.Status.EmcStatusTask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusTask other) {
        if (other == pb.Status.EmcStatusTask.getDefaultInstance()) return this;
        if (other.hasEchoSerialNumber()) {
          setEchoSerialNumber(other.getEchoSerialNumber());
        }
        if (other.hasExecState()) {
          setExecState(other.getExecState());
        }
        if (other.hasFile()) {
          bitField0_ |= 0x00000004;
          file_ = other.file_;
          onChanged();
        }
        if (other.hasInputTimeout()) {
          setInputTimeout(other.getInputTimeout());
        }
        if (other.hasOptionalStop()) {
          setOptionalStop(other.getOptionalStop());
        }
        if (other.hasReadLine()) {
          setReadLine(other.getReadLine());
        }
        if (other.hasTaskMode()) {
          setTaskMode(other.getTaskMode());
        }
        if (other.hasTaskPaused()) {
          setTaskPaused(other.getTaskPaused());
        }
        if (other.hasTaskState()) {
          setTaskState(other.getTaskState());
        }
        if (other.hasTotalLines()) {
          setTotalLines(other.getTotalLines());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusTask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusTask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int echoSerialNumber_ ;
      /**
       * <code>optional int32 echo_serial_number = 1;</code>
       *
       * <pre>
       **
       * The serial number of the last executed command set by a UI to task.
       * All commands carry a serial number. Once the command has been executed,
       * its serial number is reflected in echo_serial_number.
       * </pre>
       */
      public boolean hasEchoSerialNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 echo_serial_number = 1;</code>
       *
       * <pre>
       **
       * The serial number of the last executed command set by a UI to task.
       * All commands carry a serial number. Once the command has been executed,
       * its serial number is reflected in echo_serial_number.
       * </pre>
       */
      public int getEchoSerialNumber() {
        return echoSerialNumber_;
      }
      /**
       * <code>optional int32 echo_serial_number = 1;</code>
       *
       * <pre>
       **
       * The serial number of the last executed command set by a UI to task.
       * All commands carry a serial number. Once the command has been executed,
       * its serial number is reflected in echo_serial_number.
       * </pre>
       */
      public Builder setEchoSerialNumber(int value) {
        bitField0_ |= 0x00000001;
        echoSerialNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 echo_serial_number = 1;</code>
       *
       * <pre>
       **
       * The serial number of the last executed command set by a UI to task.
       * All commands carry a serial number. Once the command has been executed,
       * its serial number is reflected in echo_serial_number.
       * </pre>
       */
      public Builder clearEchoSerialNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        echoSerialNumber_ = 0;
        onChanged();
        return this;
      }

      private pb.Status.EmcTaskExecStateType execState_ = pb.Status.EmcTaskExecStateType.EMC_TASK_EXEC_ERROR;
      /**
       * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
       *
       * <pre>
       *&#47; Task execution state.
       * </pre>
       */
      public boolean hasExecState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
       *
       * <pre>
       *&#47; Task execution state.
       * </pre>
       */
      public pb.Status.EmcTaskExecStateType getExecState() {
        return execState_;
      }
      /**
       * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
       *
       * <pre>
       *&#47; Task execution state.
       * </pre>
       */
      public Builder setExecState(pb.Status.EmcTaskExecStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        execState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTaskExecStateType exec_state = 2;</code>
       *
       * <pre>
       *&#47; Task execution state.
       * </pre>
       */
      public Builder clearExecState() {
        bitField0_ = (bitField0_ & ~0x00000002);
        execState_ = pb.Status.EmcTaskExecStateType.EMC_TASK_EXEC_ERROR;
        onChanged();
        return this;
      }

      private java.lang.Object file_ = "";
      /**
       * <code>optional string file = 3;</code>
       *
       * <pre>
       *&#47; Currently executing gcode file.
       * </pre>
       */
      public boolean hasFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string file = 3;</code>
       *
       * <pre>
       *&#47; Currently executing gcode file.
       * </pre>
       */
      public java.lang.String getFile() {
        java.lang.Object ref = file_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            file_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string file = 3;</code>
       *
       * <pre>
       *&#47; Currently executing gcode file.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFileBytes() {
        java.lang.Object ref = file_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          file_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string file = 3;</code>
       *
       * <pre>
       *&#47; Currently executing gcode file.
       * </pre>
       */
      public Builder setFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        file_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string file = 3;</code>
       *
       * <pre>
       *&#47; Currently executing gcode file.
       * </pre>
       */
      public Builder clearFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        file_ = getDefaultInstance().getFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string file = 3;</code>
       *
       * <pre>
       *&#47; Currently executing gcode file.
       * </pre>
       */
      public Builder setFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        file_ = value;
        onChanged();
        return this;
      }

      private boolean inputTimeout_ ;
      /**
       * <code>optional bool input_timeout = 4;</code>
       *
       * <pre>
       *&#47; Flag for M66 timer in progress.
       * </pre>
       */
      public boolean hasInputTimeout() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool input_timeout = 4;</code>
       *
       * <pre>
       *&#47; Flag for M66 timer in progress.
       * </pre>
       */
      public boolean getInputTimeout() {
        return inputTimeout_;
      }
      /**
       * <code>optional bool input_timeout = 4;</code>
       *
       * <pre>
       *&#47; Flag for M66 timer in progress.
       * </pre>
       */
      public Builder setInputTimeout(boolean value) {
        bitField0_ |= 0x00000008;
        inputTimeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool input_timeout = 4;</code>
       *
       * <pre>
       *&#47; Flag for M66 timer in progress.
       * </pre>
       */
      public Builder clearInputTimeout() {
        bitField0_ = (bitField0_ & ~0x00000008);
        inputTimeout_ = false;
        onChanged();
        return this;
      }

      private boolean optionalStop_ ;
      /**
       * <code>optional bool optional_stop = 5;</code>
       *
       * <pre>
       *&#47; Optional stop enabled.
       * </pre>
       */
      public boolean hasOptionalStop() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool optional_stop = 5;</code>
       *
       * <pre>
       *&#47; Optional stop enabled.
       * </pre>
       */
      public boolean getOptionalStop() {
        return optionalStop_;
      }
      /**
       * <code>optional bool optional_stop = 5;</code>
       *
       * <pre>
       *&#47; Optional stop enabled.
       * </pre>
       */
      public Builder setOptionalStop(boolean value) {
        bitField0_ |= 0x00000010;
        optionalStop_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool optional_stop = 5;</code>
       *
       * <pre>
       *&#47; Optional stop enabled.
       * </pre>
       */
      public Builder clearOptionalStop() {
        bitField0_ = (bitField0_ & ~0x00000010);
        optionalStop_ = false;
        onChanged();
        return this;
      }

      private int readLine_ ;
      /**
       * <code>optional int32 read_line = 6;</code>
       *
       * <pre>
       *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
       * </pre>
       */
      public boolean hasReadLine() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 read_line = 6;</code>
       *
       * <pre>
       *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
       * </pre>
       */
      public int getReadLine() {
        return readLine_;
      }
      /**
       * <code>optional int32 read_line = 6;</code>
       *
       * <pre>
       *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
       * </pre>
       */
      public Builder setReadLine(int value) {
        bitField0_ |= 0x00000020;
        readLine_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 read_line = 6;</code>
       *
       * <pre>
       *&#47; Line the RS274NGC interpreter is currently reading. TODO move to interp
       * </pre>
       */
      public Builder clearReadLine() {
        bitField0_ = (bitField0_ & ~0x00000020);
        readLine_ = 0;
        onChanged();
        return this;
      }

      private pb.Status.EmcTaskModeType taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
       *
       * <pre>
       *&#47; Current task mode.
       * </pre>
       */
      public boolean hasTaskMode() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
       *
       * <pre>
       *&#47; Current task mode.
       * </pre>
       */
      public pb.Status.EmcTaskModeType getTaskMode() {
        return taskMode_;
      }
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
       *
       * <pre>
       *&#47; Current task mode.
       * </pre>
       */
      public Builder setTaskMode(pb.Status.EmcTaskModeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        taskMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 7;</code>
       *
       * <pre>
       *&#47; Current task mode.
       * </pre>
       */
      public Builder clearTaskMode() {
        bitField0_ = (bitField0_ & ~0x00000040);
        taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
        onChanged();
        return this;
      }

      private int taskPaused_ ;
      /**
       * <code>optional int32 task_paused = 8;</code>
       *
       * <pre>
       *&#47; Task paused.
       * </pre>
       */
      public boolean hasTaskPaused() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 task_paused = 8;</code>
       *
       * <pre>
       *&#47; Task paused.
       * </pre>
       */
      public int getTaskPaused() {
        return taskPaused_;
      }
      /**
       * <code>optional int32 task_paused = 8;</code>
       *
       * <pre>
       *&#47; Task paused.
       * </pre>
       */
      public Builder setTaskPaused(int value) {
        bitField0_ |= 0x00000080;
        taskPaused_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 task_paused = 8;</code>
       *
       * <pre>
       *&#47; Task paused.
       * </pre>
       */
      public Builder clearTaskPaused() {
        bitField0_ = (bitField0_ & ~0x00000080);
        taskPaused_ = 0;
        onChanged();
        return this;
      }

      private pb.Status.EmcTaskStateType taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
       *
       * <pre>
       *&#47; Current task state.
       * </pre>
       */
      public boolean hasTaskState() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
       *
       * <pre>
       *&#47; Current task state.
       * </pre>
       */
      public pb.Status.EmcTaskStateType getTaskState() {
        return taskState_;
      }
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
       *
       * <pre>
       *&#47; Current task state.
       * </pre>
       */
      public Builder setTaskState(pb.Status.EmcTaskStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        taskState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 9;</code>
       *
       * <pre>
       *&#47; Current task state.
       * </pre>
       */
      public Builder clearTaskState() {
        bitField0_ = (bitField0_ & ~0x00000100);
        taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
        onChanged();
        return this;
      }

      private int totalLines_ ;
      /**
       * <code>optional int32 total_lines = 10;</code>
       *
       * <pre>
       *&#47; Total number of lines of currently active program file.
       * </pre>
       */
      public boolean hasTotalLines() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 total_lines = 10;</code>
       *
       * <pre>
       *&#47; Total number of lines of currently active program file.
       * </pre>
       */
      public int getTotalLines() {
        return totalLines_;
      }
      /**
       * <code>optional int32 total_lines = 10;</code>
       *
       * <pre>
       *&#47; Total number of lines of currently active program file.
       * </pre>
       */
      public Builder setTotalLines(int value) {
        bitField0_ |= 0x00000200;
        totalLines_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 total_lines = 10;</code>
       *
       * <pre>
       *&#47; Total number of lines of currently active program file.
       * </pre>
       */
      public Builder clearTotalLines() {
        bitField0_ = (bitField0_ & ~0x00000200);
        totalLines_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusTask)
    }

    static {
      defaultInstance = new EmcStatusTask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusTask)
  }

  public interface EmcStatusInterpOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusInterp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string command = 1;</code>
     *
     * <pre>
     *&#47; Currently executing command.
     * </pre>
     */
    boolean hasCommand();
    /**
     * <code>optional string command = 1;</code>
     *
     * <pre>
     *&#47; Currently executing command.
     * </pre>
     */
    java.lang.String getCommand();
    /**
     * <code>optional string command = 1;</code>
     *
     * <pre>
     *&#47; Currently executing command.
     * </pre>
     */
    com.google.protobuf.ByteString
        getCommandBytes();

    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusGCode> 
        getGcodesList();
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    pb.Status.EmcStatusGCode getGcodes(int index);
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    int getGcodesCount();
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusGCodeOrBuilder> 
        getGcodesOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    pb.Status.EmcStatusGCodeOrBuilder getGcodesOrBuilder(
        int index);

    /**
     * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
     *
     * <pre>
     *&#47; Current state of RS274NGC interpreter.
     * </pre>
     */
    boolean hasInterpState();
    /**
     * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
     *
     * <pre>
     *&#47; Current state of RS274NGC interpreter.
     * </pre>
     */
    pb.Status.EmcInterpStateType getInterpState();

    /**
     * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
     *
     * <pre>
     *&#47; Current RS274NGC interpreter return code.
     * </pre>
     */
    boolean hasInterpreterErrcode();
    /**
     * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
     *
     * <pre>
     *&#47; Current RS274NGC interpreter return code.
     * </pre>
     */
    pb.Status.EmcInterpExitCodeType getInterpreterErrcode();

    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusMCode> 
        getMcodesList();
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    pb.Status.EmcStatusMCode getMcodes(int index);
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    int getMcodesCount();
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusMCodeOrBuilder> 
        getMcodesOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    pb.Status.EmcStatusMCodeOrBuilder getMcodesOrBuilder(
        int index);

    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    java.util.List<pb.Status.EmcStatusSetting> 
        getSettingsList();
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    pb.Status.EmcStatusSetting getSettings(int index);
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    int getSettingsCount();
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    java.util.List<? extends pb.Status.EmcStatusSettingOrBuilder> 
        getSettingsOrBuilderList();
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    pb.Status.EmcStatusSettingOrBuilder getSettingsOrBuilder(
        int index);

    /**
     * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
     *
     * <pre>
     *&#47; Current interpreter program units.
     * </pre>
     */
    boolean hasProgramUnits();
    /**
     * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
     *
     * <pre>
     *&#47; Current interpreter program units.
     * </pre>
     */
    pb.Status.EmcCanonUnitsType getProgramUnits();
  }
  /**
   * Protobuf type {@code pb.EmcStatusInterp}
   *
   * <pre>
   **
   * EMC status interpreter message.
   * </pre>
   */
  public static final class EmcStatusInterp extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusInterp)
      EmcStatusInterpOrBuilder {
    // Use EmcStatusInterp.newBuilder() to construct.
    private EmcStatusInterp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusInterp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusInterp defaultInstance;
    public static EmcStatusInterp getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusInterp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusInterp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              command_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                gcodes_ = new java.util.ArrayList<pb.Status.EmcStatusGCode>();
                mutable_bitField0_ |= 0x00000002;
              }
              gcodes_.add(input.readMessage(pb.Status.EmcStatusGCode.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              pb.Status.EmcInterpStateType value = pb.Status.EmcInterpStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                interpState_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              pb.Status.EmcInterpExitCodeType value = pb.Status.EmcInterpExitCodeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                interpreterErrcode_ = value;
              }
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                mcodes_ = new java.util.ArrayList<pb.Status.EmcStatusMCode>();
                mutable_bitField0_ |= 0x00000010;
              }
              mcodes_.add(input.readMessage(pb.Status.EmcStatusMCode.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                settings_ = new java.util.ArrayList<pb.Status.EmcStatusSetting>();
                mutable_bitField0_ |= 0x00000020;
              }
              settings_.add(input.readMessage(pb.Status.EmcStatusSetting.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              pb.Status.EmcCanonUnitsType value = pb.Status.EmcCanonUnitsType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                programUnits_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          gcodes_ = java.util.Collections.unmodifiableList(gcodes_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          mcodes_ = java.util.Collections.unmodifiableList(mcodes_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          settings_ = java.util.Collections.unmodifiableList(settings_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusInterp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusInterp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusInterp.class, pb.Status.EmcStatusInterp.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusInterp> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusInterp>() {
      public EmcStatusInterp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusInterp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusInterp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int COMMAND_FIELD_NUMBER = 1;
    private java.lang.Object command_;
    /**
     * <code>optional string command = 1;</code>
     *
     * <pre>
     *&#47; Currently executing command.
     * </pre>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string command = 1;</code>
     *
     * <pre>
     *&#47; Currently executing command.
     * </pre>
     */
    public java.lang.String getCommand() {
      java.lang.Object ref = command_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          command_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string command = 1;</code>
     *
     * <pre>
     *&#47; Currently executing command.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCommandBytes() {
      java.lang.Object ref = command_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        command_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GCODES_FIELD_NUMBER = 2;
    private java.util.List<pb.Status.EmcStatusGCode> gcodes_;
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusGCode> getGcodesList() {
      return gcodes_;
    }
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusGCodeOrBuilder> 
        getGcodesOrBuilderList() {
      return gcodes_;
    }
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    public int getGcodesCount() {
      return gcodes_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    public pb.Status.EmcStatusGCode getGcodes(int index) {
      return gcodes_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
     *
     * <pre>
     *&#47; Currently active GCodes.
     * </pre>
     */
    public pb.Status.EmcStatusGCodeOrBuilder getGcodesOrBuilder(
        int index) {
      return gcodes_.get(index);
    }

    public static final int INTERP_STATE_FIELD_NUMBER = 3;
    private pb.Status.EmcInterpStateType interpState_;
    /**
     * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
     *
     * <pre>
     *&#47; Current state of RS274NGC interpreter.
     * </pre>
     */
    public boolean hasInterpState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
     *
     * <pre>
     *&#47; Current state of RS274NGC interpreter.
     * </pre>
     */
    public pb.Status.EmcInterpStateType getInterpState() {
      return interpState_;
    }

    public static final int INTERPRETER_ERRCODE_FIELD_NUMBER = 4;
    private pb.Status.EmcInterpExitCodeType interpreterErrcode_;
    /**
     * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
     *
     * <pre>
     *&#47; Current RS274NGC interpreter return code.
     * </pre>
     */
    public boolean hasInterpreterErrcode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
     *
     * <pre>
     *&#47; Current RS274NGC interpreter return code.
     * </pre>
     */
    public pb.Status.EmcInterpExitCodeType getInterpreterErrcode() {
      return interpreterErrcode_;
    }

    public static final int MCODES_FIELD_NUMBER = 5;
    private java.util.List<pb.Status.EmcStatusMCode> mcodes_;
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusMCode> getMcodesList() {
      return mcodes_;
    }
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusMCodeOrBuilder> 
        getMcodesOrBuilderList() {
      return mcodes_;
    }
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    public int getMcodesCount() {
      return mcodes_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    public pb.Status.EmcStatusMCode getMcodes(int index) {
      return mcodes_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
     *
     * <pre>
     *&#47; Currently active MCodes.
     * </pre>
     */
    public pb.Status.EmcStatusMCodeOrBuilder getMcodesOrBuilder(
        int index) {
      return mcodes_.get(index);
    }

    public static final int SETTINGS_FIELD_NUMBER = 6;
    private java.util.List<pb.Status.EmcStatusSetting> settings_;
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    public java.util.List<pb.Status.EmcStatusSetting> getSettingsList() {
      return settings_;
    }
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    public java.util.List<? extends pb.Status.EmcStatusSettingOrBuilder> 
        getSettingsOrBuilderList() {
      return settings_;
    }
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    public int getSettingsCount() {
      return settings_.size();
    }
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    public pb.Status.EmcStatusSetting getSettings(int index) {
      return settings_.get(index);
    }
    /**
     * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
     *
     * <pre>
     *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
     * </pre>
     */
    public pb.Status.EmcStatusSettingOrBuilder getSettingsOrBuilder(
        int index) {
      return settings_.get(index);
    }

    public static final int PROGRAM_UNITS_FIELD_NUMBER = 7;
    private pb.Status.EmcCanonUnitsType programUnits_;
    /**
     * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
     *
     * <pre>
     *&#47; Current interpreter program units.
     * </pre>
     */
    public boolean hasProgramUnits() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
     *
     * <pre>
     *&#47; Current interpreter program units.
     * </pre>
     */
    public pb.Status.EmcCanonUnitsType getProgramUnits() {
      return programUnits_;
    }

    private void initFields() {
      command_ = "";
      gcodes_ = java.util.Collections.emptyList();
      interpState_ = pb.Status.EmcInterpStateType.EMC_TASK_INTERP_IDLE;
      interpreterErrcode_ = pb.Status.EmcInterpExitCodeType.EMC_INTERP_EXIT_OK;
      mcodes_ = java.util.Collections.emptyList();
      settings_ = java.util.Collections.emptyList();
      programUnits_ = pb.Status.EmcCanonUnitsType.CANON_UNITS_INCHES;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getGcodesCount(); i++) {
        if (!getGcodes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMcodesCount(); i++) {
        if (!getMcodes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSettingsCount(); i++) {
        if (!getSettings(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getCommandBytes());
      }
      for (int i = 0; i < gcodes_.size(); i++) {
        output.writeMessage(2, gcodes_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, interpState_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(4, interpreterErrcode_.getNumber());
      }
      for (int i = 0; i < mcodes_.size(); i++) {
        output.writeMessage(5, mcodes_.get(i));
      }
      for (int i = 0; i < settings_.size(); i++) {
        output.writeMessage(6, settings_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(7, programUnits_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getCommandBytes());
      }
      for (int i = 0; i < gcodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, gcodes_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, interpState_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, interpreterErrcode_.getNumber());
      }
      for (int i = 0; i < mcodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, mcodes_.get(i));
      }
      for (int i = 0; i < settings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, settings_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, programUnits_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusInterp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusInterp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusInterp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusInterp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusInterp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusInterp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusInterp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusInterp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusInterp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusInterp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusInterp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusInterp}
     *
     * <pre>
     **
     * EMC status interpreter message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusInterp)
        pb.Status.EmcStatusInterpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusInterp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusInterp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusInterp.class, pb.Status.EmcStatusInterp.Builder.class);
      }

      // Construct using pb.Status.EmcStatusInterp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGcodesFieldBuilder();
          getMcodesFieldBuilder();
          getSettingsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        command_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (gcodesBuilder_ == null) {
          gcodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          gcodesBuilder_.clear();
        }
        interpState_ = pb.Status.EmcInterpStateType.EMC_TASK_INTERP_IDLE;
        bitField0_ = (bitField0_ & ~0x00000004);
        interpreterErrcode_ = pb.Status.EmcInterpExitCodeType.EMC_INTERP_EXIT_OK;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mcodesBuilder_ == null) {
          mcodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          mcodesBuilder_.clear();
        }
        if (settingsBuilder_ == null) {
          settings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          settingsBuilder_.clear();
        }
        programUnits_ = pb.Status.EmcCanonUnitsType.CANON_UNITS_INCHES;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusInterp_descriptor;
      }

      public pb.Status.EmcStatusInterp getDefaultInstanceForType() {
        return pb.Status.EmcStatusInterp.getDefaultInstance();
      }

      public pb.Status.EmcStatusInterp build() {
        pb.Status.EmcStatusInterp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusInterp buildPartial() {
        pb.Status.EmcStatusInterp result = new pb.Status.EmcStatusInterp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.command_ = command_;
        if (gcodesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            gcodes_ = java.util.Collections.unmodifiableList(gcodes_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.gcodes_ = gcodes_;
        } else {
          result.gcodes_ = gcodesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.interpState_ = interpState_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.interpreterErrcode_ = interpreterErrcode_;
        if (mcodesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            mcodes_ = java.util.Collections.unmodifiableList(mcodes_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.mcodes_ = mcodes_;
        } else {
          result.mcodes_ = mcodesBuilder_.build();
        }
        if (settingsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            settings_ = java.util.Collections.unmodifiableList(settings_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.settings_ = settings_;
        } else {
          result.settings_ = settingsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.programUnits_ = programUnits_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusInterp) {
          return mergeFrom((pb.Status.EmcStatusInterp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusInterp other) {
        if (other == pb.Status.EmcStatusInterp.getDefaultInstance()) return this;
        if (other.hasCommand()) {
          bitField0_ |= 0x00000001;
          command_ = other.command_;
          onChanged();
        }
        if (gcodesBuilder_ == null) {
          if (!other.gcodes_.isEmpty()) {
            if (gcodes_.isEmpty()) {
              gcodes_ = other.gcodes_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureGcodesIsMutable();
              gcodes_.addAll(other.gcodes_);
            }
            onChanged();
          }
        } else {
          if (!other.gcodes_.isEmpty()) {
            if (gcodesBuilder_.isEmpty()) {
              gcodesBuilder_.dispose();
              gcodesBuilder_ = null;
              gcodes_ = other.gcodes_;
              bitField0_ = (bitField0_ & ~0x00000002);
              gcodesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGcodesFieldBuilder() : null;
            } else {
              gcodesBuilder_.addAllMessages(other.gcodes_);
            }
          }
        }
        if (other.hasInterpState()) {
          setInterpState(other.getInterpState());
        }
        if (other.hasInterpreterErrcode()) {
          setInterpreterErrcode(other.getInterpreterErrcode());
        }
        if (mcodesBuilder_ == null) {
          if (!other.mcodes_.isEmpty()) {
            if (mcodes_.isEmpty()) {
              mcodes_ = other.mcodes_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureMcodesIsMutable();
              mcodes_.addAll(other.mcodes_);
            }
            onChanged();
          }
        } else {
          if (!other.mcodes_.isEmpty()) {
            if (mcodesBuilder_.isEmpty()) {
              mcodesBuilder_.dispose();
              mcodesBuilder_ = null;
              mcodes_ = other.mcodes_;
              bitField0_ = (bitField0_ & ~0x00000010);
              mcodesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMcodesFieldBuilder() : null;
            } else {
              mcodesBuilder_.addAllMessages(other.mcodes_);
            }
          }
        }
        if (settingsBuilder_ == null) {
          if (!other.settings_.isEmpty()) {
            if (settings_.isEmpty()) {
              settings_ = other.settings_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureSettingsIsMutable();
              settings_.addAll(other.settings_);
            }
            onChanged();
          }
        } else {
          if (!other.settings_.isEmpty()) {
            if (settingsBuilder_.isEmpty()) {
              settingsBuilder_.dispose();
              settingsBuilder_ = null;
              settings_ = other.settings_;
              bitField0_ = (bitField0_ & ~0x00000020);
              settingsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSettingsFieldBuilder() : null;
            } else {
              settingsBuilder_.addAllMessages(other.settings_);
            }
          }
        }
        if (other.hasProgramUnits()) {
          setProgramUnits(other.getProgramUnits());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getGcodesCount(); i++) {
          if (!getGcodes(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getMcodesCount(); i++) {
          if (!getMcodes(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSettingsCount(); i++) {
          if (!getSettings(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusInterp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusInterp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object command_ = "";
      /**
       * <code>optional string command = 1;</code>
       *
       * <pre>
       *&#47; Currently executing command.
       * </pre>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string command = 1;</code>
       *
       * <pre>
       *&#47; Currently executing command.
       * </pre>
       */
      public java.lang.String getCommand() {
        java.lang.Object ref = command_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            command_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string command = 1;</code>
       *
       * <pre>
       *&#47; Currently executing command.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCommandBytes() {
        java.lang.Object ref = command_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          command_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string command = 1;</code>
       *
       * <pre>
       *&#47; Currently executing command.
       * </pre>
       */
      public Builder setCommand(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string command = 1;</code>
       *
       * <pre>
       *&#47; Currently executing command.
       * </pre>
       */
      public Builder clearCommand() {
        bitField0_ = (bitField0_ & ~0x00000001);
        command_ = getDefaultInstance().getCommand();
        onChanged();
        return this;
      }
      /**
       * <code>optional string command = 1;</code>
       *
       * <pre>
       *&#47; Currently executing command.
       * </pre>
       */
      public Builder setCommandBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        command_ = value;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusGCode> gcodes_ =
        java.util.Collections.emptyList();
      private void ensureGcodesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          gcodes_ = new java.util.ArrayList<pb.Status.EmcStatusGCode>(gcodes_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusGCode, pb.Status.EmcStatusGCode.Builder, pb.Status.EmcStatusGCodeOrBuilder> gcodesBuilder_;

      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusGCode> getGcodesList() {
        if (gcodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(gcodes_);
        } else {
          return gcodesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public int getGcodesCount() {
        if (gcodesBuilder_ == null) {
          return gcodes_.size();
        } else {
          return gcodesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public pb.Status.EmcStatusGCode getGcodes(int index) {
        if (gcodesBuilder_ == null) {
          return gcodes_.get(index);
        } else {
          return gcodesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder setGcodes(
          int index, pb.Status.EmcStatusGCode value) {
        if (gcodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGcodesIsMutable();
          gcodes_.set(index, value);
          onChanged();
        } else {
          gcodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder setGcodes(
          int index, pb.Status.EmcStatusGCode.Builder builderForValue) {
        if (gcodesBuilder_ == null) {
          ensureGcodesIsMutable();
          gcodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          gcodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder addGcodes(pb.Status.EmcStatusGCode value) {
        if (gcodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGcodesIsMutable();
          gcodes_.add(value);
          onChanged();
        } else {
          gcodesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder addGcodes(
          int index, pb.Status.EmcStatusGCode value) {
        if (gcodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGcodesIsMutable();
          gcodes_.add(index, value);
          onChanged();
        } else {
          gcodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder addGcodes(
          pb.Status.EmcStatusGCode.Builder builderForValue) {
        if (gcodesBuilder_ == null) {
          ensureGcodesIsMutable();
          gcodes_.add(builderForValue.build());
          onChanged();
        } else {
          gcodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder addGcodes(
          int index, pb.Status.EmcStatusGCode.Builder builderForValue) {
        if (gcodesBuilder_ == null) {
          ensureGcodesIsMutable();
          gcodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          gcodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder addAllGcodes(
          java.lang.Iterable<? extends pb.Status.EmcStatusGCode> values) {
        if (gcodesBuilder_ == null) {
          ensureGcodesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, gcodes_);
          onChanged();
        } else {
          gcodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder clearGcodes() {
        if (gcodesBuilder_ == null) {
          gcodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          gcodesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public Builder removeGcodes(int index) {
        if (gcodesBuilder_ == null) {
          ensureGcodesIsMutable();
          gcodes_.remove(index);
          onChanged();
        } else {
          gcodesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public pb.Status.EmcStatusGCode.Builder getGcodesBuilder(
          int index) {
        return getGcodesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public pb.Status.EmcStatusGCodeOrBuilder getGcodesOrBuilder(
          int index) {
        if (gcodesBuilder_ == null) {
          return gcodes_.get(index);  } else {
          return gcodesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusGCodeOrBuilder> 
           getGcodesOrBuilderList() {
        if (gcodesBuilder_ != null) {
          return gcodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(gcodes_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public pb.Status.EmcStatusGCode.Builder addGcodesBuilder() {
        return getGcodesFieldBuilder().addBuilder(
            pb.Status.EmcStatusGCode.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public pb.Status.EmcStatusGCode.Builder addGcodesBuilder(
          int index) {
        return getGcodesFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusGCode.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusGCode gcodes = 2;</code>
       *
       * <pre>
       *&#47; Currently active GCodes.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusGCode.Builder> 
           getGcodesBuilderList() {
        return getGcodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusGCode, pb.Status.EmcStatusGCode.Builder, pb.Status.EmcStatusGCodeOrBuilder> 
          getGcodesFieldBuilder() {
        if (gcodesBuilder_ == null) {
          gcodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusGCode, pb.Status.EmcStatusGCode.Builder, pb.Status.EmcStatusGCodeOrBuilder>(
                  gcodes_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          gcodes_ = null;
        }
        return gcodesBuilder_;
      }

      private pb.Status.EmcInterpStateType interpState_ = pb.Status.EmcInterpStateType.EMC_TASK_INTERP_IDLE;
      /**
       * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
       *
       * <pre>
       *&#47; Current state of RS274NGC interpreter.
       * </pre>
       */
      public boolean hasInterpState() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
       *
       * <pre>
       *&#47; Current state of RS274NGC interpreter.
       * </pre>
       */
      public pb.Status.EmcInterpStateType getInterpState() {
        return interpState_;
      }
      /**
       * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
       *
       * <pre>
       *&#47; Current state of RS274NGC interpreter.
       * </pre>
       */
      public Builder setInterpState(pb.Status.EmcInterpStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        interpState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcInterpStateType interp_state = 3;</code>
       *
       * <pre>
       *&#47; Current state of RS274NGC interpreter.
       * </pre>
       */
      public Builder clearInterpState() {
        bitField0_ = (bitField0_ & ~0x00000004);
        interpState_ = pb.Status.EmcInterpStateType.EMC_TASK_INTERP_IDLE;
        onChanged();
        return this;
      }

      private pb.Status.EmcInterpExitCodeType interpreterErrcode_ = pb.Status.EmcInterpExitCodeType.EMC_INTERP_EXIT_OK;
      /**
       * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
       *
       * <pre>
       *&#47; Current RS274NGC interpreter return code.
       * </pre>
       */
      public boolean hasInterpreterErrcode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
       *
       * <pre>
       *&#47; Current RS274NGC interpreter return code.
       * </pre>
       */
      public pb.Status.EmcInterpExitCodeType getInterpreterErrcode() {
        return interpreterErrcode_;
      }
      /**
       * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
       *
       * <pre>
       *&#47; Current RS274NGC interpreter return code.
       * </pre>
       */
      public Builder setInterpreterErrcode(pb.Status.EmcInterpExitCodeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        interpreterErrcode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcInterpExitCodeType interpreter_errcode = 4;</code>
       *
       * <pre>
       *&#47; Current RS274NGC interpreter return code.
       * </pre>
       */
      public Builder clearInterpreterErrcode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        interpreterErrcode_ = pb.Status.EmcInterpExitCodeType.EMC_INTERP_EXIT_OK;
        onChanged();
        return this;
      }

      private java.util.List<pb.Status.EmcStatusMCode> mcodes_ =
        java.util.Collections.emptyList();
      private void ensureMcodesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          mcodes_ = new java.util.ArrayList<pb.Status.EmcStatusMCode>(mcodes_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusMCode, pb.Status.EmcStatusMCode.Builder, pb.Status.EmcStatusMCodeOrBuilder> mcodesBuilder_;

      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusMCode> getMcodesList() {
        if (mcodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mcodes_);
        } else {
          return mcodesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public int getMcodesCount() {
        if (mcodesBuilder_ == null) {
          return mcodes_.size();
        } else {
          return mcodesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public pb.Status.EmcStatusMCode getMcodes(int index) {
        if (mcodesBuilder_ == null) {
          return mcodes_.get(index);
        } else {
          return mcodesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder setMcodes(
          int index, pb.Status.EmcStatusMCode value) {
        if (mcodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMcodesIsMutable();
          mcodes_.set(index, value);
          onChanged();
        } else {
          mcodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder setMcodes(
          int index, pb.Status.EmcStatusMCode.Builder builderForValue) {
        if (mcodesBuilder_ == null) {
          ensureMcodesIsMutable();
          mcodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          mcodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder addMcodes(pb.Status.EmcStatusMCode value) {
        if (mcodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMcodesIsMutable();
          mcodes_.add(value);
          onChanged();
        } else {
          mcodesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder addMcodes(
          int index, pb.Status.EmcStatusMCode value) {
        if (mcodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMcodesIsMutable();
          mcodes_.add(index, value);
          onChanged();
        } else {
          mcodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder addMcodes(
          pb.Status.EmcStatusMCode.Builder builderForValue) {
        if (mcodesBuilder_ == null) {
          ensureMcodesIsMutable();
          mcodes_.add(builderForValue.build());
          onChanged();
        } else {
          mcodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder addMcodes(
          int index, pb.Status.EmcStatusMCode.Builder builderForValue) {
        if (mcodesBuilder_ == null) {
          ensureMcodesIsMutable();
          mcodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          mcodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder addAllMcodes(
          java.lang.Iterable<? extends pb.Status.EmcStatusMCode> values) {
        if (mcodesBuilder_ == null) {
          ensureMcodesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, mcodes_);
          onChanged();
        } else {
          mcodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder clearMcodes() {
        if (mcodesBuilder_ == null) {
          mcodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          mcodesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public Builder removeMcodes(int index) {
        if (mcodesBuilder_ == null) {
          ensureMcodesIsMutable();
          mcodes_.remove(index);
          onChanged();
        } else {
          mcodesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public pb.Status.EmcStatusMCode.Builder getMcodesBuilder(
          int index) {
        return getMcodesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public pb.Status.EmcStatusMCodeOrBuilder getMcodesOrBuilder(
          int index) {
        if (mcodesBuilder_ == null) {
          return mcodes_.get(index);  } else {
          return mcodesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusMCodeOrBuilder> 
           getMcodesOrBuilderList() {
        if (mcodesBuilder_ != null) {
          return mcodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mcodes_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public pb.Status.EmcStatusMCode.Builder addMcodesBuilder() {
        return getMcodesFieldBuilder().addBuilder(
            pb.Status.EmcStatusMCode.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public pb.Status.EmcStatusMCode.Builder addMcodesBuilder(
          int index) {
        return getMcodesFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusMCode.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusMCode mcodes = 5;</code>
       *
       * <pre>
       *&#47; Currently active MCodes.
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusMCode.Builder> 
           getMcodesBuilderList() {
        return getMcodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusMCode, pb.Status.EmcStatusMCode.Builder, pb.Status.EmcStatusMCodeOrBuilder> 
          getMcodesFieldBuilder() {
        if (mcodesBuilder_ == null) {
          mcodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusMCode, pb.Status.EmcStatusMCode.Builder, pb.Status.EmcStatusMCodeOrBuilder>(
                  mcodes_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          mcodes_ = null;
        }
        return mcodesBuilder_;
      }

      private java.util.List<pb.Status.EmcStatusSetting> settings_ =
        java.util.Collections.emptyList();
      private void ensureSettingsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          settings_ = new java.util.ArrayList<pb.Status.EmcStatusSetting>(settings_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusSetting, pb.Status.EmcStatusSetting.Builder, pb.Status.EmcStatusSettingOrBuilder> settingsBuilder_;

      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusSetting> getSettingsList() {
        if (settingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(settings_);
        } else {
          return settingsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public int getSettingsCount() {
        if (settingsBuilder_ == null) {
          return settings_.size();
        } else {
          return settingsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public pb.Status.EmcStatusSetting getSettings(int index) {
        if (settingsBuilder_ == null) {
          return settings_.get(index);
        } else {
          return settingsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder setSettings(
          int index, pb.Status.EmcStatusSetting value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSettingsIsMutable();
          settings_.set(index, value);
          onChanged();
        } else {
          settingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder setSettings(
          int index, pb.Status.EmcStatusSetting.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          ensureSettingsIsMutable();
          settings_.set(index, builderForValue.build());
          onChanged();
        } else {
          settingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder addSettings(pb.Status.EmcStatusSetting value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSettingsIsMutable();
          settings_.add(value);
          onChanged();
        } else {
          settingsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder addSettings(
          int index, pb.Status.EmcStatusSetting value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSettingsIsMutable();
          settings_.add(index, value);
          onChanged();
        } else {
          settingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder addSettings(
          pb.Status.EmcStatusSetting.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          ensureSettingsIsMutable();
          settings_.add(builderForValue.build());
          onChanged();
        } else {
          settingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder addSettings(
          int index, pb.Status.EmcStatusSetting.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          ensureSettingsIsMutable();
          settings_.add(index, builderForValue.build());
          onChanged();
        } else {
          settingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder addAllSettings(
          java.lang.Iterable<? extends pb.Status.EmcStatusSetting> values) {
        if (settingsBuilder_ == null) {
          ensureSettingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, settings_);
          onChanged();
        } else {
          settingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder clearSettings() {
        if (settingsBuilder_ == null) {
          settings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          settingsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public Builder removeSettings(int index) {
        if (settingsBuilder_ == null) {
          ensureSettingsIsMutable();
          settings_.remove(index);
          onChanged();
        } else {
          settingsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public pb.Status.EmcStatusSetting.Builder getSettingsBuilder(
          int index) {
        return getSettingsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public pb.Status.EmcStatusSettingOrBuilder getSettingsOrBuilder(
          int index) {
        if (settingsBuilder_ == null) {
          return settings_.get(index);  } else {
          return settingsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public java.util.List<? extends pb.Status.EmcStatusSettingOrBuilder> 
           getSettingsOrBuilderList() {
        if (settingsBuilder_ != null) {
          return settingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(settings_);
        }
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public pb.Status.EmcStatusSetting.Builder addSettingsBuilder() {
        return getSettingsFieldBuilder().addBuilder(
            pb.Status.EmcStatusSetting.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public pb.Status.EmcStatusSetting.Builder addSettingsBuilder(
          int index) {
        return getSettingsFieldBuilder().addBuilder(
            index, pb.Status.EmcStatusSetting.getDefaultInstance());
      }
      /**
       * <code>repeated .pb.EmcStatusSetting settings = 6;</code>
       *
       * <pre>
       *&#47; Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
       * </pre>
       */
      public java.util.List<pb.Status.EmcStatusSetting.Builder> 
           getSettingsBuilderList() {
        return getSettingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pb.Status.EmcStatusSetting, pb.Status.EmcStatusSetting.Builder, pb.Status.EmcStatusSettingOrBuilder> 
          getSettingsFieldBuilder() {
        if (settingsBuilder_ == null) {
          settingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pb.Status.EmcStatusSetting, pb.Status.EmcStatusSetting.Builder, pb.Status.EmcStatusSettingOrBuilder>(
                  settings_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          settings_ = null;
        }
        return settingsBuilder_;
      }

      private pb.Status.EmcCanonUnitsType programUnits_ = pb.Status.EmcCanonUnitsType.CANON_UNITS_INCHES;
      /**
       * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
       *
       * <pre>
       *&#47; Current interpreter program units.
       * </pre>
       */
      public boolean hasProgramUnits() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
       *
       * <pre>
       *&#47; Current interpreter program units.
       * </pre>
       */
      public pb.Status.EmcCanonUnitsType getProgramUnits() {
        return programUnits_;
      }
      /**
       * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
       *
       * <pre>
       *&#47; Current interpreter program units.
       * </pre>
       */
      public Builder setProgramUnits(pb.Status.EmcCanonUnitsType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        programUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcCanonUnitsType program_units = 7;</code>
       *
       * <pre>
       *&#47; Current interpreter program units.
       * </pre>
       */
      public Builder clearProgramUnits() {
        bitField0_ = (bitField0_ & ~0x00000040);
        programUnits_ = pb.Status.EmcCanonUnitsType.CANON_UNITS_INCHES;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusInterp)
    }

    static {
      defaultInstance = new EmcStatusInterp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusInterp)
  }

  public interface EmcCommandParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcCommandParameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 index = 1;</code>
     *
     * <pre>
     *&#47; General purpose index.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>optional uint32 index = 1;</code>
     *
     * <pre>
     *&#47; General purpose index.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional uint32 debug_level = 2;</code>
     *
     * <pre>
     *&#47; Debug level.
     * </pre>
     */
    boolean hasDebugLevel();
    /**
     * <code>optional uint32 debug_level = 2;</code>
     *
     * <pre>
     *&#47; Debug level.
     * </pre>
     */
    int getDebugLevel();

    /**
     * <code>optional int32 line_number = 3;</code>
     *
     * <pre>
     *&#47; General purpose line number.
     * </pre>
     */
    boolean hasLineNumber();
    /**
     * <code>optional int32 line_number = 3;</code>
     *
     * <pre>
     *&#47; General purpose line number.
     * </pre>
     */
    int getLineNumber();

    /**
     * <code>optional double scale = 4;</code>
     *
     * <pre>
     *&#47; General purpose scale value.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional double scale = 4;</code>
     *
     * <pre>
     *&#47; General purpose scale value.
     * </pre>
     */
    double getScale();

    /**
     * <code>optional double velocity = 5;</code>
     *
     * <pre>
     *&#47; General purpose velocity value.
     * </pre>
     */
    boolean hasVelocity();
    /**
     * <code>optional double velocity = 5;</code>
     *
     * <pre>
     *&#47; General purpose velocity value.
     * </pre>
     */
    double getVelocity();

    /**
     * <code>optional double distance = 6;</code>
     *
     * <pre>
     *&#47; General purpose distance value.
     * </pre>
     */
    boolean hasDistance();
    /**
     * <code>optional double distance = 6;</code>
     *
     * <pre>
     *&#47; General purpose distance value.
     * </pre>
     */
    double getDistance();

    /**
     * <code>optional double value = 7;</code>
     *
     * <pre>
     *&#47; General purpose value.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional double value = 7;</code>
     *
     * <pre>
     *&#47; General purpose value.
     * </pre>
     */
    double getValue();

    /**
     * <code>optional bool enable = 8;</code>
     *
     * <pre>
     *&#47; General purpose enable value.
     * </pre>
     */
    boolean hasEnable();
    /**
     * <code>optional bool enable = 8;</code>
     *
     * <pre>
     *&#47; General purpose enable value.
     * </pre>
     */
    boolean getEnable();

    /**
     * <code>optional string command = 9;</code>
     *
     * <pre>
     *&#47; General purpose command string.
     * </pre>
     */
    boolean hasCommand();
    /**
     * <code>optional string command = 9;</code>
     *
     * <pre>
     *&#47; General purpose command string.
     * </pre>
     */
    java.lang.String getCommand();
    /**
     * <code>optional string command = 9;</code>
     *
     * <pre>
     *&#47; General purpose command string.
     * </pre>
     */
    com.google.protobuf.ByteString
        getCommandBytes();

    /**
     * <code>optional string path = 10;</code>
     *
     * <pre>
     *&#47; General purpose path string.
     * </pre>
     */
    boolean hasPath();
    /**
     * <code>optional string path = 10;</code>
     *
     * <pre>
     *&#47; General purpose path string.
     * </pre>
     */
    java.lang.String getPath();
    /**
     * <code>optional string path = 10;</code>
     *
     * <pre>
     *&#47; General purpose path string.
     * </pre>
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
     *
     * <pre>
     *&#47; Task mode.
     * </pre>
     */
    boolean hasTaskMode();
    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
     *
     * <pre>
     *&#47; Task mode.
     * </pre>
     */
    pb.Status.EmcTaskModeType getTaskMode();

    /**
     * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
     *
     * <pre>
     *&#47; Task state.
     * </pre>
     */
    boolean hasTaskState();
    /**
     * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
     *
     * <pre>
     *&#47; Task state.
     * </pre>
     */
    pb.Status.EmcTaskStateType getTaskState();

    /**
     * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    boolean hasTrajMode();
    /**
     * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    pb.Status.EmcTrajectoryModeType getTrajMode();

    /**
     * <code>optional .pb.EmcPose pose = 103;</code>
     *
     * <pre>
     *&#47; General purpose pose.
     * </pre>
     */
    boolean hasPose();
    /**
     * <code>optional .pb.EmcPose pose = 103;</code>
     *
     * <pre>
     *&#47; General purpose pose.
     * </pre>
     */
    pb.Emcclass.EmcPose getPose();
    /**
     * <code>optional .pb.EmcPose pose = 103;</code>
     *
     * <pre>
     *&#47; General purpose pose.
     * </pre>
     */
    pb.Emcclass.EmcPoseOrBuilder getPoseOrBuilder();

    /**
     * <code>optional .pb.EmcToolData tool_data = 104;</code>
     *
     * <pre>
     *&#47; Tool data.
     * </pre>
     */
    boolean hasToolData();
    /**
     * <code>optional .pb.EmcToolData tool_data = 104;</code>
     *
     * <pre>
     *&#47; Tool data.
     * </pre>
     */
    pb.Status.EmcToolData getToolData();
    /**
     * <code>optional .pb.EmcToolData tool_data = 104;</code>
     *
     * <pre>
     *&#47; Tool data.
     * </pre>
     */
    pb.Status.EmcToolDataOrBuilder getToolDataOrBuilder();
  }
  /**
   * Protobuf type {@code pb.EmcCommandParameters}
   *
   * <pre>
   **
   * EMC command parameters.
   * </pre>
   */
  public static final class EmcCommandParameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcCommandParameters)
      EmcCommandParametersOrBuilder {
    // Use EmcCommandParameters.newBuilder() to construct.
    private EmcCommandParameters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcCommandParameters(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcCommandParameters defaultInstance;
    public static EmcCommandParameters getDefaultInstance() {
      return defaultInstance;
    }

    public EmcCommandParameters getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcCommandParameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              debugLevel_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lineNumber_ = input.readInt32();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              scale_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              velocity_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              distance_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              value_ = input.readDouble();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              enable_ = input.readBool();
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              command_ = bs;
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000200;
              path_ = bs;
              break;
            }
            case 800: {
              int rawValue = input.readEnum();
              pb.Status.EmcTaskModeType value = pb.Status.EmcTaskModeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(100, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                taskMode_ = value;
              }
              break;
            }
            case 808: {
              int rawValue = input.readEnum();
              pb.Status.EmcTaskStateType value = pb.Status.EmcTaskStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(101, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                taskState_ = value;
              }
              break;
            }
            case 816: {
              int rawValue = input.readEnum();
              pb.Status.EmcTrajectoryModeType value = pb.Status.EmcTrajectoryModeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(102, rawValue);
              } else {
                bitField0_ |= 0x00001000;
                trajMode_ = value;
              }
              break;
            }
            case 826: {
              pb.Emcclass.EmcPose.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = pose_.toBuilder();
              }
              pose_ = input.readMessage(pb.Emcclass.EmcPose.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pose_);
                pose_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 834: {
              pb.Status.EmcToolData.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = toolData_.toBuilder();
              }
              toolData_ = input.readMessage(pb.Status.EmcToolData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(toolData_);
                toolData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcCommandParameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcCommandParameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcCommandParameters.class, pb.Status.EmcCommandParameters.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcCommandParameters> PARSER =
        new com.google.protobuf.AbstractParser<EmcCommandParameters>() {
      public EmcCommandParameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcCommandParameters(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcCommandParameters> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>optional uint32 index = 1;</code>
     *
     * <pre>
     *&#47; General purpose index.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 index = 1;</code>
     *
     * <pre>
     *&#47; General purpose index.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int DEBUG_LEVEL_FIELD_NUMBER = 2;
    private int debugLevel_;
    /**
     * <code>optional uint32 debug_level = 2;</code>
     *
     * <pre>
     *&#47; Debug level.
     * </pre>
     */
    public boolean hasDebugLevel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 debug_level = 2;</code>
     *
     * <pre>
     *&#47; Debug level.
     * </pre>
     */
    public int getDebugLevel() {
      return debugLevel_;
    }

    public static final int LINE_NUMBER_FIELD_NUMBER = 3;
    private int lineNumber_;
    /**
     * <code>optional int32 line_number = 3;</code>
     *
     * <pre>
     *&#47; General purpose line number.
     * </pre>
     */
    public boolean hasLineNumber() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 line_number = 3;</code>
     *
     * <pre>
     *&#47; General purpose line number.
     * </pre>
     */
    public int getLineNumber() {
      return lineNumber_;
    }

    public static final int SCALE_FIELD_NUMBER = 4;
    private double scale_;
    /**
     * <code>optional double scale = 4;</code>
     *
     * <pre>
     *&#47; General purpose scale value.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double scale = 4;</code>
     *
     * <pre>
     *&#47; General purpose scale value.
     * </pre>
     */
    public double getScale() {
      return scale_;
    }

    public static final int VELOCITY_FIELD_NUMBER = 5;
    private double velocity_;
    /**
     * <code>optional double velocity = 5;</code>
     *
     * <pre>
     *&#47; General purpose velocity value.
     * </pre>
     */
    public boolean hasVelocity() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double velocity = 5;</code>
     *
     * <pre>
     *&#47; General purpose velocity value.
     * </pre>
     */
    public double getVelocity() {
      return velocity_;
    }

    public static final int DISTANCE_FIELD_NUMBER = 6;
    private double distance_;
    /**
     * <code>optional double distance = 6;</code>
     *
     * <pre>
     *&#47; General purpose distance value.
     * </pre>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double distance = 6;</code>
     *
     * <pre>
     *&#47; General purpose distance value.
     * </pre>
     */
    public double getDistance() {
      return distance_;
    }

    public static final int VALUE_FIELD_NUMBER = 7;
    private double value_;
    /**
     * <code>optional double value = 7;</code>
     *
     * <pre>
     *&#47; General purpose value.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double value = 7;</code>
     *
     * <pre>
     *&#47; General purpose value.
     * </pre>
     */
    public double getValue() {
      return value_;
    }

    public static final int ENABLE_FIELD_NUMBER = 8;
    private boolean enable_;
    /**
     * <code>optional bool enable = 8;</code>
     *
     * <pre>
     *&#47; General purpose enable value.
     * </pre>
     */
    public boolean hasEnable() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool enable = 8;</code>
     *
     * <pre>
     *&#47; General purpose enable value.
     * </pre>
     */
    public boolean getEnable() {
      return enable_;
    }

    public static final int COMMAND_FIELD_NUMBER = 9;
    private java.lang.Object command_;
    /**
     * <code>optional string command = 9;</code>
     *
     * <pre>
     *&#47; General purpose command string.
     * </pre>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string command = 9;</code>
     *
     * <pre>
     *&#47; General purpose command string.
     * </pre>
     */
    public java.lang.String getCommand() {
      java.lang.Object ref = command_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          command_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string command = 9;</code>
     *
     * <pre>
     *&#47; General purpose command string.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCommandBytes() {
      java.lang.Object ref = command_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        command_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATH_FIELD_NUMBER = 10;
    private java.lang.Object path_;
    /**
     * <code>optional string path = 10;</code>
     *
     * <pre>
     *&#47; General purpose path string.
     * </pre>
     */
    public boolean hasPath() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string path = 10;</code>
     *
     * <pre>
     *&#47; General purpose path string.
     * </pre>
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          path_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string path = 10;</code>
     *
     * <pre>
     *&#47; General purpose path string.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TASK_MODE_FIELD_NUMBER = 100;
    private pb.Status.EmcTaskModeType taskMode_;
    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
     *
     * <pre>
     *&#47; Task mode.
     * </pre>
     */
    public boolean hasTaskMode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
     *
     * <pre>
     *&#47; Task mode.
     * </pre>
     */
    public pb.Status.EmcTaskModeType getTaskMode() {
      return taskMode_;
    }

    public static final int TASK_STATE_FIELD_NUMBER = 101;
    private pb.Status.EmcTaskStateType taskState_;
    /**
     * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
     *
     * <pre>
     *&#47; Task state.
     * </pre>
     */
    public boolean hasTaskState() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
     *
     * <pre>
     *&#47; Task state.
     * </pre>
     */
    public pb.Status.EmcTaskStateType getTaskState() {
      return taskState_;
    }

    public static final int TRAJ_MODE_FIELD_NUMBER = 102;
    private pb.Status.EmcTrajectoryModeType trajMode_;
    /**
     * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    public boolean hasTrajMode() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
     *
     * <pre>
     *&#47; Trajectory mode.
     * </pre>
     */
    public pb.Status.EmcTrajectoryModeType getTrajMode() {
      return trajMode_;
    }

    public static final int POSE_FIELD_NUMBER = 103;
    private pb.Emcclass.EmcPose pose_;
    /**
     * <code>optional .pb.EmcPose pose = 103;</code>
     *
     * <pre>
     *&#47; General purpose pose.
     * </pre>
     */
    public boolean hasPose() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .pb.EmcPose pose = 103;</code>
     *
     * <pre>
     *&#47; General purpose pose.
     * </pre>
     */
    public pb.Emcclass.EmcPose getPose() {
      return pose_;
    }
    /**
     * <code>optional .pb.EmcPose pose = 103;</code>
     *
     * <pre>
     *&#47; General purpose pose.
     * </pre>
     */
    public pb.Emcclass.EmcPoseOrBuilder getPoseOrBuilder() {
      return pose_;
    }

    public static final int TOOL_DATA_FIELD_NUMBER = 104;
    private pb.Status.EmcToolData toolData_;
    /**
     * <code>optional .pb.EmcToolData tool_data = 104;</code>
     *
     * <pre>
     *&#47; Tool data.
     * </pre>
     */
    public boolean hasToolData() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .pb.EmcToolData tool_data = 104;</code>
     *
     * <pre>
     *&#47; Tool data.
     * </pre>
     */
    public pb.Status.EmcToolData getToolData() {
      return toolData_;
    }
    /**
     * <code>optional .pb.EmcToolData tool_data = 104;</code>
     *
     * <pre>
     *&#47; Tool data.
     * </pre>
     */
    public pb.Status.EmcToolDataOrBuilder getToolDataOrBuilder() {
      return toolData_;
    }

    private void initFields() {
      index_ = 0;
      debugLevel_ = 0;
      lineNumber_ = 0;
      scale_ = 0D;
      velocity_ = 0D;
      distance_ = 0D;
      value_ = 0D;
      enable_ = false;
      command_ = "";
      path_ = "";
      taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
      taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
      trajMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
      pose_ = pb.Emcclass.EmcPose.getDefaultInstance();
      toolData_ = pb.Status.EmcToolData.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasPose()) {
        if (!getPose().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasToolData()) {
        if (!getToolData().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, debugLevel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, lineNumber_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, scale_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, velocity_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, distance_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, value_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, enable_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, getCommandBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getPathBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(100, taskMode_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(101, taskState_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeEnum(102, trajMode_.getNumber());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(103, pose_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(104, toolData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, debugLevel_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, lineNumber_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, scale_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, velocity_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, distance_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, value_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, enable_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, getCommandBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getPathBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(100, taskMode_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(101, taskState_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(102, trajMode_.getNumber());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(103, pose_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(104, toolData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcCommandParameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcCommandParameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcCommandParameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcCommandParameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcCommandParameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcCommandParameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcCommandParameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcCommandParameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcCommandParameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcCommandParameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcCommandParameters prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcCommandParameters}
     *
     * <pre>
     **
     * EMC command parameters.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcCommandParameters)
        pb.Status.EmcCommandParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcCommandParameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcCommandParameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcCommandParameters.class, pb.Status.EmcCommandParameters.Builder.class);
      }

      // Construct using pb.Status.EmcCommandParameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPoseFieldBuilder();
          getToolDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        debugLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        lineNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        scale_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        velocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        distance_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        value_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        enable_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        command_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        path_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
        bitField0_ = (bitField0_ & ~0x00000400);
        taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
        bitField0_ = (bitField0_ & ~0x00000800);
        trajMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
        bitField0_ = (bitField0_ & ~0x00001000);
        if (poseBuilder_ == null) {
          pose_ = pb.Emcclass.EmcPose.getDefaultInstance();
        } else {
          poseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (toolDataBuilder_ == null) {
          toolData_ = pb.Status.EmcToolData.getDefaultInstance();
        } else {
          toolDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcCommandParameters_descriptor;
      }

      public pb.Status.EmcCommandParameters getDefaultInstanceForType() {
        return pb.Status.EmcCommandParameters.getDefaultInstance();
      }

      public pb.Status.EmcCommandParameters build() {
        pb.Status.EmcCommandParameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcCommandParameters buildPartial() {
        pb.Status.EmcCommandParameters result = new pb.Status.EmcCommandParameters(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.debugLevel_ = debugLevel_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lineNumber_ = lineNumber_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.velocity_ = velocity_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.distance_ = distance_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.enable_ = enable_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.command_ = command_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.path_ = path_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.taskMode_ = taskMode_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.taskState_ = taskState_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.trajMode_ = trajMode_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (poseBuilder_ == null) {
          result.pose_ = pose_;
        } else {
          result.pose_ = poseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (toolDataBuilder_ == null) {
          result.toolData_ = toolData_;
        } else {
          result.toolData_ = toolDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcCommandParameters) {
          return mergeFrom((pb.Status.EmcCommandParameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcCommandParameters other) {
        if (other == pb.Status.EmcCommandParameters.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasDebugLevel()) {
          setDebugLevel(other.getDebugLevel());
        }
        if (other.hasLineNumber()) {
          setLineNumber(other.getLineNumber());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasVelocity()) {
          setVelocity(other.getVelocity());
        }
        if (other.hasDistance()) {
          setDistance(other.getDistance());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasEnable()) {
          setEnable(other.getEnable());
        }
        if (other.hasCommand()) {
          bitField0_ |= 0x00000100;
          command_ = other.command_;
          onChanged();
        }
        if (other.hasPath()) {
          bitField0_ |= 0x00000200;
          path_ = other.path_;
          onChanged();
        }
        if (other.hasTaskMode()) {
          setTaskMode(other.getTaskMode());
        }
        if (other.hasTaskState()) {
          setTaskState(other.getTaskState());
        }
        if (other.hasTrajMode()) {
          setTrajMode(other.getTrajMode());
        }
        if (other.hasPose()) {
          mergePose(other.getPose());
        }
        if (other.hasToolData()) {
          mergeToolData(other.getToolData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasPose()) {
          if (!getPose().isInitialized()) {
            
            return false;
          }
        }
        if (hasToolData()) {
          if (!getToolData().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcCommandParameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcCommandParameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>optional uint32 index = 1;</code>
       *
       * <pre>
       *&#47; General purpose index.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 index = 1;</code>
       *
       * <pre>
       *&#47; General purpose index.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional uint32 index = 1;</code>
       *
       * <pre>
       *&#47; General purpose index.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 index = 1;</code>
       *
       * <pre>
       *&#47; General purpose index.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private int debugLevel_ ;
      /**
       * <code>optional uint32 debug_level = 2;</code>
       *
       * <pre>
       *&#47; Debug level.
       * </pre>
       */
      public boolean hasDebugLevel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 debug_level = 2;</code>
       *
       * <pre>
       *&#47; Debug level.
       * </pre>
       */
      public int getDebugLevel() {
        return debugLevel_;
      }
      /**
       * <code>optional uint32 debug_level = 2;</code>
       *
       * <pre>
       *&#47; Debug level.
       * </pre>
       */
      public Builder setDebugLevel(int value) {
        bitField0_ |= 0x00000002;
        debugLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 debug_level = 2;</code>
       *
       * <pre>
       *&#47; Debug level.
       * </pre>
       */
      public Builder clearDebugLevel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        debugLevel_ = 0;
        onChanged();
        return this;
      }

      private int lineNumber_ ;
      /**
       * <code>optional int32 line_number = 3;</code>
       *
       * <pre>
       *&#47; General purpose line number.
       * </pre>
       */
      public boolean hasLineNumber() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 line_number = 3;</code>
       *
       * <pre>
       *&#47; General purpose line number.
       * </pre>
       */
      public int getLineNumber() {
        return lineNumber_;
      }
      /**
       * <code>optional int32 line_number = 3;</code>
       *
       * <pre>
       *&#47; General purpose line number.
       * </pre>
       */
      public Builder setLineNumber(int value) {
        bitField0_ |= 0x00000004;
        lineNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 line_number = 3;</code>
       *
       * <pre>
       *&#47; General purpose line number.
       * </pre>
       */
      public Builder clearLineNumber() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lineNumber_ = 0;
        onChanged();
        return this;
      }

      private double scale_ ;
      /**
       * <code>optional double scale = 4;</code>
       *
       * <pre>
       *&#47; General purpose scale value.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double scale = 4;</code>
       *
       * <pre>
       *&#47; General purpose scale value.
       * </pre>
       */
      public double getScale() {
        return scale_;
      }
      /**
       * <code>optional double scale = 4;</code>
       *
       * <pre>
       *&#47; General purpose scale value.
       * </pre>
       */
      public Builder setScale(double value) {
        bitField0_ |= 0x00000008;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double scale = 4;</code>
       *
       * <pre>
       *&#47; General purpose scale value.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scale_ = 0D;
        onChanged();
        return this;
      }

      private double velocity_ ;
      /**
       * <code>optional double velocity = 5;</code>
       *
       * <pre>
       *&#47; General purpose velocity value.
       * </pre>
       */
      public boolean hasVelocity() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double velocity = 5;</code>
       *
       * <pre>
       *&#47; General purpose velocity value.
       * </pre>
       */
      public double getVelocity() {
        return velocity_;
      }
      /**
       * <code>optional double velocity = 5;</code>
       *
       * <pre>
       *&#47; General purpose velocity value.
       * </pre>
       */
      public Builder setVelocity(double value) {
        bitField0_ |= 0x00000010;
        velocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double velocity = 5;</code>
       *
       * <pre>
       *&#47; General purpose velocity value.
       * </pre>
       */
      public Builder clearVelocity() {
        bitField0_ = (bitField0_ & ~0x00000010);
        velocity_ = 0D;
        onChanged();
        return this;
      }

      private double distance_ ;
      /**
       * <code>optional double distance = 6;</code>
       *
       * <pre>
       *&#47; General purpose distance value.
       * </pre>
       */
      public boolean hasDistance() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double distance = 6;</code>
       *
       * <pre>
       *&#47; General purpose distance value.
       * </pre>
       */
      public double getDistance() {
        return distance_;
      }
      /**
       * <code>optional double distance = 6;</code>
       *
       * <pre>
       *&#47; General purpose distance value.
       * </pre>
       */
      public Builder setDistance(double value) {
        bitField0_ |= 0x00000020;
        distance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double distance = 6;</code>
       *
       * <pre>
       *&#47; General purpose distance value.
       * </pre>
       */
      public Builder clearDistance() {
        bitField0_ = (bitField0_ & ~0x00000020);
        distance_ = 0D;
        onChanged();
        return this;
      }

      private double value_ ;
      /**
       * <code>optional double value = 7;</code>
       *
       * <pre>
       *&#47; General purpose value.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double value = 7;</code>
       *
       * <pre>
       *&#47; General purpose value.
       * </pre>
       */
      public double getValue() {
        return value_;
      }
      /**
       * <code>optional double value = 7;</code>
       *
       * <pre>
       *&#47; General purpose value.
       * </pre>
       */
      public Builder setValue(double value) {
        bitField0_ |= 0x00000040;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double value = 7;</code>
       *
       * <pre>
       *&#47; General purpose value.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000040);
        value_ = 0D;
        onChanged();
        return this;
      }

      private boolean enable_ ;
      /**
       * <code>optional bool enable = 8;</code>
       *
       * <pre>
       *&#47; General purpose enable value.
       * </pre>
       */
      public boolean hasEnable() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool enable = 8;</code>
       *
       * <pre>
       *&#47; General purpose enable value.
       * </pre>
       */
      public boolean getEnable() {
        return enable_;
      }
      /**
       * <code>optional bool enable = 8;</code>
       *
       * <pre>
       *&#47; General purpose enable value.
       * </pre>
       */
      public Builder setEnable(boolean value) {
        bitField0_ |= 0x00000080;
        enable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable = 8;</code>
       *
       * <pre>
       *&#47; General purpose enable value.
       * </pre>
       */
      public Builder clearEnable() {
        bitField0_ = (bitField0_ & ~0x00000080);
        enable_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object command_ = "";
      /**
       * <code>optional string command = 9;</code>
       *
       * <pre>
       *&#47; General purpose command string.
       * </pre>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string command = 9;</code>
       *
       * <pre>
       *&#47; General purpose command string.
       * </pre>
       */
      public java.lang.String getCommand() {
        java.lang.Object ref = command_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            command_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string command = 9;</code>
       *
       * <pre>
       *&#47; General purpose command string.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCommandBytes() {
        java.lang.Object ref = command_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          command_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string command = 9;</code>
       *
       * <pre>
       *&#47; General purpose command string.
       * </pre>
       */
      public Builder setCommand(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string command = 9;</code>
       *
       * <pre>
       *&#47; General purpose command string.
       * </pre>
       */
      public Builder clearCommand() {
        bitField0_ = (bitField0_ & ~0x00000100);
        command_ = getDefaultInstance().getCommand();
        onChanged();
        return this;
      }
      /**
       * <code>optional string command = 9;</code>
       *
       * <pre>
       *&#47; General purpose command string.
       * </pre>
       */
      public Builder setCommandBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        command_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <code>optional string path = 10;</code>
       *
       * <pre>
       *&#47; General purpose path string.
       * </pre>
       */
      public boolean hasPath() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string path = 10;</code>
       *
       * <pre>
       *&#47; General purpose path string.
       * </pre>
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            path_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string path = 10;</code>
       *
       * <pre>
       *&#47; General purpose path string.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string path = 10;</code>
       *
       * <pre>
       *&#47; General purpose path string.
       * </pre>
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string path = 10;</code>
       *
       * <pre>
       *&#47; General purpose path string.
       * </pre>
       */
      public Builder clearPath() {
        bitField0_ = (bitField0_ & ~0x00000200);
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <code>optional string path = 10;</code>
       *
       * <pre>
       *&#47; General purpose path string.
       * </pre>
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        path_ = value;
        onChanged();
        return this;
      }

      private pb.Status.EmcTaskModeType taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
       *
       * <pre>
       *&#47; Task mode.
       * </pre>
       */
      public boolean hasTaskMode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
       *
       * <pre>
       *&#47; Task mode.
       * </pre>
       */
      public pb.Status.EmcTaskModeType getTaskMode() {
        return taskMode_;
      }
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
       *
       * <pre>
       *&#47; Task mode.
       * </pre>
       */
      public Builder setTaskMode(pb.Status.EmcTaskModeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        taskMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTaskModeType task_mode = 100;</code>
       *
       * <pre>
       *&#47; Task mode.
       * </pre>
       */
      public Builder clearTaskMode() {
        bitField0_ = (bitField0_ & ~0x00000400);
        taskMode_ = pb.Status.EmcTaskModeType.EMC_TASK_MODE_MANUAL;
        onChanged();
        return this;
      }

      private pb.Status.EmcTaskStateType taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
       *
       * <pre>
       *&#47; Task state.
       * </pre>
       */
      public boolean hasTaskState() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
       *
       * <pre>
       *&#47; Task state.
       * </pre>
       */
      public pb.Status.EmcTaskStateType getTaskState() {
        return taskState_;
      }
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
       *
       * <pre>
       *&#47; Task state.
       * </pre>
       */
      public Builder setTaskState(pb.Status.EmcTaskStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        taskState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTaskStateType task_state = 101;</code>
       *
       * <pre>
       *&#47; Task state.
       * </pre>
       */
      public Builder clearTaskState() {
        bitField0_ = (bitField0_ & ~0x00000800);
        taskState_ = pb.Status.EmcTaskStateType.EMC_TASK_STATE_ESTOP;
        onChanged();
        return this;
      }

      private pb.Status.EmcTrajectoryModeType trajMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
      /**
       * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public boolean hasTrajMode() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public pb.Status.EmcTrajectoryModeType getTrajMode() {
        return trajMode_;
      }
      /**
       * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public Builder setTrajMode(pb.Status.EmcTrajectoryModeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        trajMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .pb.EmcTrajectoryModeType traj_mode = 102;</code>
       *
       * <pre>
       *&#47; Trajectory mode.
       * </pre>
       */
      public Builder clearTrajMode() {
        bitField0_ = (bitField0_ & ~0x00001000);
        trajMode_ = pb.Status.EmcTrajectoryModeType.EMC_TRAJ_MODE_FREE;
        onChanged();
        return this;
      }

      private pb.Emcclass.EmcPose pose_ = pb.Emcclass.EmcPose.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.Emcclass.EmcPose, pb.Emcclass.EmcPose.Builder, pb.Emcclass.EmcPoseOrBuilder> poseBuilder_;
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public boolean hasPose() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public pb.Emcclass.EmcPose getPose() {
        if (poseBuilder_ == null) {
          return pose_;
        } else {
          return poseBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public Builder setPose(pb.Emcclass.EmcPose value) {
        if (poseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pose_ = value;
          onChanged();
        } else {
          poseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public Builder setPose(
          pb.Emcclass.EmcPose.Builder builderForValue) {
        if (poseBuilder_ == null) {
          pose_ = builderForValue.build();
          onChanged();
        } else {
          poseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public Builder mergePose(pb.Emcclass.EmcPose value) {
        if (poseBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              pose_ != pb.Emcclass.EmcPose.getDefaultInstance()) {
            pose_ =
              pb.Emcclass.EmcPose.newBuilder(pose_).mergeFrom(value).buildPartial();
          } else {
            pose_ = value;
          }
          onChanged();
        } else {
          poseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public Builder clearPose() {
        if (poseBuilder_ == null) {
          pose_ = pb.Emcclass.EmcPose.getDefaultInstance();
          onChanged();
        } else {
          poseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public pb.Emcclass.EmcPose.Builder getPoseBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getPoseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      public pb.Emcclass.EmcPoseOrBuilder getPoseOrBuilder() {
        if (poseBuilder_ != null) {
          return poseBuilder_.getMessageOrBuilder();
        } else {
          return pose_;
        }
      }
      /**
       * <code>optional .pb.EmcPose pose = 103;</code>
       *
       * <pre>
       *&#47; General purpose pose.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.Emcclass.EmcPose, pb.Emcclass.EmcPose.Builder, pb.Emcclass.EmcPoseOrBuilder> 
          getPoseFieldBuilder() {
        if (poseBuilder_ == null) {
          poseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.Emcclass.EmcPose, pb.Emcclass.EmcPose.Builder, pb.Emcclass.EmcPoseOrBuilder>(
                  getPose(),
                  getParentForChildren(),
                  isClean());
          pose_ = null;
        }
        return poseBuilder_;
      }

      private pb.Status.EmcToolData toolData_ = pb.Status.EmcToolData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pb.Status.EmcToolData, pb.Status.EmcToolData.Builder, pb.Status.EmcToolDataOrBuilder> toolDataBuilder_;
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public boolean hasToolData() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public pb.Status.EmcToolData getToolData() {
        if (toolDataBuilder_ == null) {
          return toolData_;
        } else {
          return toolDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public Builder setToolData(pb.Status.EmcToolData value) {
        if (toolDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          toolData_ = value;
          onChanged();
        } else {
          toolDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public Builder setToolData(
          pb.Status.EmcToolData.Builder builderForValue) {
        if (toolDataBuilder_ == null) {
          toolData_ = builderForValue.build();
          onChanged();
        } else {
          toolDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public Builder mergeToolData(pb.Status.EmcToolData value) {
        if (toolDataBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              toolData_ != pb.Status.EmcToolData.getDefaultInstance()) {
            toolData_ =
              pb.Status.EmcToolData.newBuilder(toolData_).mergeFrom(value).buildPartial();
          } else {
            toolData_ = value;
          }
          onChanged();
        } else {
          toolDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public Builder clearToolData() {
        if (toolDataBuilder_ == null) {
          toolData_ = pb.Status.EmcToolData.getDefaultInstance();
          onChanged();
        } else {
          toolDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public pb.Status.EmcToolData.Builder getToolDataBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getToolDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      public pb.Status.EmcToolDataOrBuilder getToolDataOrBuilder() {
        if (toolDataBuilder_ != null) {
          return toolDataBuilder_.getMessageOrBuilder();
        } else {
          return toolData_;
        }
      }
      /**
       * <code>optional .pb.EmcToolData tool_data = 104;</code>
       *
       * <pre>
       *&#47; Tool data.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pb.Status.EmcToolData, pb.Status.EmcToolData.Builder, pb.Status.EmcToolDataOrBuilder> 
          getToolDataFieldBuilder() {
        if (toolDataBuilder_ == null) {
          toolDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pb.Status.EmcToolData, pb.Status.EmcToolData.Builder, pb.Status.EmcToolDataOrBuilder>(
                  getToolData(),
                  getParentForChildren(),
                  isClean());
          toolData_ = null;
        }
        return toolDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcCommandParameters)
    }

    static {
      defaultInstance = new EmcCommandParameters(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcCommandParameters)
  }

  public interface EmcStatusUserCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.EmcStatusUserCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; User command index.
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; User command index.
     * </pre>
     */
    int getIndex();

    /**
     * <code>optional string command = 2;</code>
     *
     * <pre>
     *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
     * </pre>
     */
    boolean hasCommand();
    /**
     * <code>optional string command = 2;</code>
     *
     * <pre>
     *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
     * </pre>
     */
    java.lang.String getCommand();
    /**
     * <code>optional string command = 2;</code>
     *
     * <pre>
     *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
     * </pre>
     */
    com.google.protobuf.ByteString
        getCommandBytes();
  }
  /**
   * Protobuf type {@code pb.EmcStatusUserCommand}
   *
   * <pre>
   **
   * User command message.
   * </pre>
   */
  public static final class EmcStatusUserCommand extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pb.EmcStatusUserCommand)
      EmcStatusUserCommandOrBuilder {
    // Use EmcStatusUserCommand.newBuilder() to construct.
    private EmcStatusUserCommand(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmcStatusUserCommand(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmcStatusUserCommand defaultInstance;
    public static EmcStatusUserCommand getDefaultInstance() {
      return defaultInstance;
    }

    public EmcStatusUserCommand getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmcStatusUserCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              command_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb.Status.internal_static_pb_EmcStatusUserCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb.Status.internal_static_pb_EmcStatusUserCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb.Status.EmcStatusUserCommand.class, pb.Status.EmcStatusUserCommand.Builder.class);
    }

    public static com.google.protobuf.Parser<EmcStatusUserCommand> PARSER =
        new com.google.protobuf.AbstractParser<EmcStatusUserCommand>() {
      public EmcStatusUserCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmcStatusUserCommand(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmcStatusUserCommand> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; User command index.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     *
     * <pre>
     *&#47; User command index.
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    public static final int COMMAND_FIELD_NUMBER = 2;
    private java.lang.Object command_;
    /**
     * <code>optional string command = 2;</code>
     *
     * <pre>
     *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
     * </pre>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string command = 2;</code>
     *
     * <pre>
     *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
     * </pre>
     */
    public java.lang.String getCommand() {
      java.lang.Object ref = command_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          command_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string command = 2;</code>
     *
     * <pre>
     *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCommandBytes() {
      java.lang.Object ref = command_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        command_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      index_ = 0;
      command_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getCommandBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getCommandBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pb.Status.EmcStatusUserCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusUserCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pb.Status.EmcStatusUserCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pb.Status.EmcStatusUserCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pb.Status.EmcStatusUserCommand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pb.EmcStatusUserCommand}
     *
     * <pre>
     **
     * User command message.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.EmcStatusUserCommand)
        pb.Status.EmcStatusUserCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pb.Status.internal_static_pb_EmcStatusUserCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pb.Status.internal_static_pb_EmcStatusUserCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pb.Status.EmcStatusUserCommand.class, pb.Status.EmcStatusUserCommand.Builder.class);
      }

      // Construct using pb.Status.EmcStatusUserCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        command_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pb.Status.internal_static_pb_EmcStatusUserCommand_descriptor;
      }

      public pb.Status.EmcStatusUserCommand getDefaultInstanceForType() {
        return pb.Status.EmcStatusUserCommand.getDefaultInstance();
      }

      public pb.Status.EmcStatusUserCommand build() {
        pb.Status.EmcStatusUserCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pb.Status.EmcStatusUserCommand buildPartial() {
        pb.Status.EmcStatusUserCommand result = new pb.Status.EmcStatusUserCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.command_ = command_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pb.Status.EmcStatusUserCommand) {
          return mergeFrom((pb.Status.EmcStatusUserCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pb.Status.EmcStatusUserCommand other) {
        if (other == pb.Status.EmcStatusUserCommand.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasCommand()) {
          bitField0_ |= 0x00000002;
          command_ = other.command_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pb.Status.EmcStatusUserCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pb.Status.EmcStatusUserCommand) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; User command index.
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; User command index.
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; User command index.
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       *
       * <pre>
       *&#47; User command index.
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object command_ = "";
      /**
       * <code>optional string command = 2;</code>
       *
       * <pre>
       *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
       * </pre>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string command = 2;</code>
       *
       * <pre>
       *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
       * </pre>
       */
      public java.lang.String getCommand() {
        java.lang.Object ref = command_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            command_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string command = 2;</code>
       *
       * <pre>
       *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCommandBytes() {
        java.lang.Object ref = command_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          command_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string command = 2;</code>
       *
       * <pre>
       *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
       * </pre>
       */
      public Builder setCommand(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string command = 2;</code>
       *
       * <pre>
       *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
       * </pre>
       */
      public Builder clearCommand() {
        bitField0_ = (bitField0_ & ~0x00000002);
        command_ = getDefaultInstance().getCommand();
        onChanged();
        return this;
      }
      /**
       * <code>optional string command = 2;</code>
       *
       * <pre>
       *&#47; User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
       * </pre>
       */
      public Builder setCommandBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        command_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.EmcStatusUserCommand)
    }

    static {
      defaultInstance = new EmcStatusUserCommand(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pb.EmcStatusUserCommand)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcToolData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcToolData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusMotionAxis_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusMotionAxis_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusConfigAxis_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusConfigAxis_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcProgramExtension_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcProgramExtension_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusAnalogIO_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusAnalogIO_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusDigitalIO_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusDigitalIO_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusLimit_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusLimit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusGCode_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusGCode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusMCode_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusMCode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusSetting_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusSetting_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusMotion_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusMotion_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusIo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusIo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusTask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusTask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusInterp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusInterp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcCommandParameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcCommandParameters_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pb_EmcStatusUserCommand_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pb_EmcStatusUserCommand_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!machinetalk/protobuf/status.proto\022\002pb\032" +
      "!machinetalk/protobuf/nanopb.proto\032 mach" +
      "inetalk/protobuf/types.proto\032\"machinetal" +
      "k/protobuf/preview.proto\032#machinetalk/pr" +
      "otobuf/emcclass.proto\032\"machinetalk/proto" +
      "buf/motcmds.proto\"\234\001\n\013EmcToolData\022\r\n\005ind" +
      "ex\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022\020\n\010diameter\030\014 \001(\001\022\022" +
      "\n\nfrontangle\030\r \001(\001\022\021\n\tbackangle\030\016 \001(\001\022\023\n" +
      "\013orientation\030\017 \001(\005\022\034\n\006offset\030\020 \001(\0132\014.pb." +
      "Position:\006\222?\003H\314\010\"\325\002\n\023EmcStatusMotionAxis",
      "\022\r\n\005index\030\001 \002(\005\022\017\n\007enabled\030\002 \001(\010\022\r\n\005faul" +
      "t\030\003 \001(\010\022\026\n\016ferror_current\030\004 \001(\001\022\027\n\017ferro" +
      "r_highmark\030\005 \001(\001\022\r\n\005homed\030\006 \001(\010\022\016\n\006homin" +
      "g\030\007 \001(\010\022\r\n\005inpos\030\010 \001(\010\022\r\n\005input\030\t \001(\001\022\026\n" +
      "\016max_hard_limit\030\n \001(\010\022\026\n\016max_soft_limit\030" +
      "\013 \001(\010\022\026\n\016min_hard_limit\030\014 \001(\010\022\026\n\016min_sof" +
      "t_limit\030\r \001(\010\022\016\n\006output\030\016 \001(\001\022\027\n\017overrid" +
      "e_limits\030\017 \001(\010\022\020\n\010velocity\030\020 \001(\001:\006\222?\003H\315\010" +
      "\"\234\002\n\023EmcStatusConfigAxis\022\r\n\005index\030\001 \002(\005\022" +
      "!\n\010axisType\030\002 \001(\0162\017.pb.EmcAxisType\022\020\n\010ba",
      "cklash\030\003 \001(\001\022\022\n\nmax_ferror\030\004 \001(\001\022\032\n\022max_" +
      "position_limit\030\005 \001(\001\022\022\n\nmin_ferror\030\006 \001(\001" +
      "\022\032\n\022min_position_limit\030\007 \001(\001\022\025\n\rhome_seq" +
      "uence\030\t \001(\005\022\030\n\020max_acceleration\030\n \001(\001\022\024\n" +
      "\014max_velocity\030\013 \001(\001\022\022\n\nincrements\030\014 \001(\t:" +
      "\006\222?\003H\316\010\"?\n\023EmcProgramExtension\022\r\n\005index\030" +
      "\001 \002(\005\022\021\n\textension\030\002 \001(\t:\006\222?\003H\317\010\"9\n\021EmcS" +
      "tatusAnalogIO\022\r\n\005index\030\001 \002(\005\022\r\n\005value\030\002 " +
      "\001(\001:\006\222?\003H\320\010\":\n\022EmcStatusDigitalIO\022\r\n\005ind" +
      "ex\030\001 \002(\005\022\r\n\005value\030\002 \001(\010:\006\222?\003H\321\010\"6\n\016EmcSt",
      "atusLimit\022\r\n\005index\030\001 \002(\005\022\r\n\005value\030\002 \001(\005:" +
      "\006\222?\003H\322\010\"6\n\016EmcStatusGCode\022\r\n\005index\030\001 \002(\005" +
      "\022\r\n\005value\030\002 \001(\005:\006\222?\003H\323\010\"6\n\016EmcStatusMCod" +
      "e\022\r\n\005index\030\001 \002(\005\022\r\n\005value\030\002 \001(\005:\006\222?\003H\324\010\"" +
      "8\n\020EmcStatusSetting\022\r\n\005index\030\001 \002(\005\022\r\n\005va" +
      "lue\030\002 \001(\001:\006\222?\003H\325\010\"\351\010\n\017EmcStatusConfig\022\034\n" +
      "\024default_acceleration\030\001 \001(\001\022\014\n\004axes\030\003 \001(" +
      "\005\022%\n\004axis\030\004 \003(\0132\027.pb.EmcStatusConfigAxis" +
      "\022\021\n\taxis_mask\030\005 \001(\005\022\022\n\ncycle_time\030\006 \001(\001\022" +
      "\r\n\005debug\030\007 \001(\005\022.\n\017kinematics_type\030\010 \001(\0162",
      "\025.pb.EmcKinematicsType\022\030\n\020max_accelerati" +
      "on\030\n \001(\001\022\024\n\014max_velocity\030\013 \001(\001\022,\n\014linear" +
      "_units\030\014 \001(\0162\026.pb.EmcLinearUnitsType\022\030\n\020" +
      "default_velocity\030\r \001(\001\0222\n\021program_extens" +
      "ion\030\016 \003(\0132\027.pb.EmcProgramExtension\0222\n\017po" +
      "sition_offset\030\017 \001(\0162\031.pb.EmcPositionOffs" +
      "etType\0226\n\021position_feedback\030\020 \001(\0162\033.pb.E" +
      "mcPositionFeedbackType\022\031\n\021max_feed_overr" +
      "ide\030\021 \001(\001\022\031\n\021min_feed_override\030\022 \001(\001\022\034\n\024" +
      "max_spindle_override\030\023 \001(\001\022\034\n\024min_spindl",
      "e_override\030\024 \001(\001\022\035\n\025default_spindle_spee" +
      "d\030\025 \001(\001\022\037\n\027default_linear_velocity\030\026 \001(\001" +
      "\022\024\n\014min_velocity\030\027 \001(\001\022\033\n\023max_linear_vel" +
      "ocity\030\030 \001(\001\022\033\n\023min_linear_velocity\030\031 \001(\001" +
      "\022 \n\030default_angular_velocity\030\032 \001(\001\022\034\n\024ma" +
      "x_angular_velocity\030\033 \001(\001\022\034\n\024min_angular_" +
      "velocity\030\034 \001(\001\022\022\n\nincrements\030\035 \001(\t\022\r\n\005gr" +
      "ids\030\036 \001(\t\022\r\n\005lathe\030\037 \001(\010\022\020\n\010geometry\030  \001" +
      "(\t\022\023\n\013arcdivision\030! \001(\r\022\027\n\017no_force_homi" +
      "ng\030\" \001(\010\022\023\n\013remote_path\030# \001(\t\022(\n\ntime_un",
      "its\030$ \001(\0162\024.pb.EmcTimeUnitsType\022\014\n\004name\030" +
      "% \001(\t\022.\n\014user_command\030& \003(\0132\030.pb.EmcStat" +
      "usUserCommand\022.\n\rangular_units\030\' \001(\0162\027.p" +
      "b.EmcAngularUnitsType:\006\222?\003H\326\010\"\306\n\n\017EmcSta" +
      "tusMotion\022\024\n\014active_queue\030\001 \001(\005\022%\n\017actua" +
      "l_position\030\002 \001(\0132\014.pb.Position\022\035\n\025adapti" +
      "ve_feed_enabled\030\003 \001(\010\022\"\n\003ain\030\004 \003(\0132\025.pb." +
      "EmcStatusAnalogIO\022#\n\004aout\030\005 \003(\0132\025.pb.Emc" +
      "StatusAnalogIO\022%\n\004axis\030\006 \003(\0132\027.pb.EmcSta" +
      "tusMotionAxis\022\024\n\014block_delete\030\007 \001(\010\022\024\n\014c",
      "urrent_line\030\010 \001(\005\022\023\n\013current_vel\030\t \001(\001\022\022" +
      "\n\ndelay_left\030\n \001(\001\022#\n\003din\030\013 \003(\0132\026.pb.Emc" +
      "StatusDigitalIO\022\026\n\016distance_to_go\030\014 \001(\001\022" +
      "$\n\004dout\030\r \003(\0132\026.pb.EmcStatusDigitalIO\022\031\n" +
      "\003dtg\030\016 \001(\0132\014.pb.Position\022\017\n\007enabled\030\017 \001(" +
      "\010\022\031\n\021feed_hold_enabled\030\020 \001(\010\022\035\n\025feed_ove" +
      "rride_enabled\030\021 \001(\010\022\020\n\010feedrate\030\022 \001(\001\022\"\n" +
      "\tg5x_index\030\023 \001(\0162\017.pb.OriginIndex\022 \n\ng5x" +
      "_offset\030\024 \001(\0132\014.pb.Position\022 \n\ng92_offse" +
      "t\030\025 \001(\0132\014.pb.Position\022\n\n\002id\030\027 \001(\005\022\r\n\005inp",
      "os\030\030 \001(\010\022+\n\025joint_actual_position\030\031 \001(\0132" +
      "\014.pb.Position\022$\n\016joint_position\030\032 \001(\0132\014." +
      "pb.Position\022!\n\005limit\030\033 \003(\0132\022.pb.EmcStatu" +
      "sLimit\022\023\n\013motion_line\030\034 \001(\005\022#\n\013motion_ty" +
      "pe\030\035 \001(\0162\016.pb.MotionType\022.\n\013motion_mode\030" +
      "\036 \001(\0162\031.pb.EmcTrajectoryModeType\022\016\n\006paus" +
      "ed\030\037 \001(\010\022\036\n\010position\030  \001(\0132\014.pb.Position" +
      "\022\025\n\rprobe_tripped\030! \001(\010\022\021\n\tprobe_val\030\" \001" +
      "(\005\022%\n\017probed_position\030# \001(\0132\014.pb.Positio" +
      "n\022\017\n\007probing\030$ \001(\010\022\r\n\005queue\030% \001(\005\022\022\n\nque",
      "ue_full\030& \001(\010\022\023\n\013rotation_xy\030\' \001(\001\022\025\n\rsp" +
      "indle_brake\030( \001(\010\022\031\n\021spindle_direction\030)" +
      " \001(\005\022\027\n\017spindle_enabled\030* \001(\010\022\032\n\022spindle" +
      "_increasing\030+ \001(\005\022 \n\030spindle_override_en" +
      "abled\030, \001(\010\022\025\n\rspindle_speed\030- \001(\001\022\023\n\013sp" +
      "indlerate\030. \001(\001\022\035\n\005state\030/ \001(\0162\016.pb.RCS_" +
      "STATUS\022\024\n\014max_velocity\0300 \001(\001\022\030\n\020max_acce" +
      "leration\0301 \001(\001:\006\222?\003H\327\010\"\334\001\n\013EmcStatusIo\022\r" +
      "\n\005estop\030\001 \001(\010\022\r\n\005flood\030\002 \001(\010\022\014\n\004lube\030\003 \001" +
      "(\010\022\022\n\nlube_level\030\004 \001(\010\022\014\n\004mist\030\005 \001(\010\022\026\n\016",
      "pocket_prepped\030\006 \001(\010\022\027\n\017tool_in_spindle\030" +
      "\007 \001(\010\022!\n\013tool_offset\030\010 \001(\0132\014.pb.Position" +
      "\022#\n\ntool_table\030\t \003(\0132\017.pb.EmcToolData:\006\222" +
      "?\003H\330\010\"\254\002\n\rEmcStatusTask\022\032\n\022echo_serial_n" +
      "umber\030\001 \001(\005\022,\n\nexec_state\030\002 \001(\0162\030.pb.Emc" +
      "TaskExecStateType\022\014\n\004file\030\003 \001(\t\022\025\n\rinput" +
      "_timeout\030\004 \001(\010\022\025\n\roptional_stop\030\005 \001(\010\022\021\n" +
      "\tread_line\030\006 \001(\005\022&\n\ttask_mode\030\007 \001(\0162\023.pb" +
      ".EmcTaskModeType\022\023\n\013task_paused\030\010 \001(\005\022(\n" +
      "\ntask_state\030\t \001(\0162\024.pb.EmcTaskStateType\022",
      "\023\n\013total_lines\030\n \001(\005:\006\222?\003H\331\010\"\256\002\n\017EmcStat" +
      "usInterp\022\017\n\007command\030\001 \001(\t\022\"\n\006gcodes\030\002 \003(" +
      "\0132\022.pb.EmcStatusGCode\022,\n\014interp_state\030\003 " +
      "\001(\0162\026.pb.EmcInterpStateType\0226\n\023interpret" +
      "er_errcode\030\004 \001(\0162\031.pb.EmcInterpExitCodeT" +
      "ype\022\"\n\006mcodes\030\005 \003(\0132\022.pb.EmcStatusMCode\022" +
      "&\n\010settings\030\006 \003(\0132\024.pb.EmcStatusSetting\022" +
      ",\n\rprogram_units\030\007 \001(\0162\025.pb.EmcCanonUnit" +
      "sType:\006\222?\003H\332\010\"\207\003\n\024EmcCommandParameters\022\r" +
      "\n\005index\030\001 \001(\r\022\023\n\013debug_level\030\002 \001(\r\022\023\n\013li",
      "ne_number\030\003 \001(\005\022\r\n\005scale\030\004 \001(\001\022\020\n\010veloci" +
      "ty\030\005 \001(\001\022\020\n\010distance\030\006 \001(\001\022\r\n\005value\030\007 \001(" +
      "\001\022\016\n\006enable\030\010 \001(\010\022\017\n\007command\030\t \001(\t\022\014\n\004pa" +
      "th\030\n \001(\t\022&\n\ttask_mode\030d \001(\0162\023.pb.EmcTask" +
      "ModeType\022(\n\ntask_state\030e \001(\0162\024.pb.EmcTas" +
      "kStateType\022,\n\ttraj_mode\030f \001(\0162\031.pb.EmcTr" +
      "ajectoryModeType\022\031\n\004pose\030g \001(\0132\013.pb.EmcP" +
      "ose\022\"\n\ttool_data\030h \001(\0132\017.pb.EmcToolData:" +
      "\006\222?\003H\333\010\">\n\024EmcStatusUserCommand\022\r\n\005index" +
      "\030\001 \002(\005\022\017\n\007command\030\002 \001(\t:\006\222?\003H\334\010*\347\002\n\024EmcT",
      "askExecStateType\022\027\n\023EMC_TASK_EXEC_ERROR\020" +
      "\001\022\026\n\022EMC_TASK_EXEC_DONE\020\002\022$\n EMC_TASK_EX" +
      "EC_WAITING_FOR_MOTION\020\003\022*\n&EMC_TASK_EXEC" +
      "_WAITING_FOR_MOTION_QUEUE\020\004\022 \n\034EMC_TASK_" +
      "EXEC_WAITING_FOR_IO\020\005\022+\n\'EMC_TASK_EXEC_W" +
      "AITING_FOR_MOTION_AND_IO\020\007\022#\n\037EMC_TASK_E" +
      "XEC_WAITING_FOR_DELAY\020\010\022(\n$EMC_TASK_EXEC" +
      "_WAITING_FOR_SYSTEM_CMD\020\t\022.\n*EMC_TASK_EX" +
      "EC_WAITING_FOR_SPINDLE_ORIENTED\020\n*\204\001\n\022Em" +
      "cInterpStateType\022\030\n\024EMC_TASK_INTERP_IDLE",
      "\020\001\022\033\n\027EMC_TASK_INTERP_READING\020\002\022\032\n\026EMC_T" +
      "ASK_INTERP_PAUSED\020\003\022\033\n\027EMC_TASK_INTERP_W" +
      "AITING\020\004*\310\001\n\025EmcInterpExitCodeType\022\026\n\022EM" +
      "C_INTERP_EXIT_OK\020\000\022\030\n\024EMC_INTERP_EXIT_EX" +
      "IT\020\001\022\"\n\036EMC_INTERP_EXIT_EXECUTE_FINISH\020\002" +
      "\022\033\n\027EMC_INTERP_EXIT_ENDFILE\020\003\022!\n\035EMC_INT" +
      "ERP_EXIT_FILE_NOT_OPEN\020\004\022\031\n\025EMC_INTERP_E" +
      "XIT_ERROR\020\005*{\n\021EmcKinematicsType\022\027\n\023KINE" +
      "MATICS_IDENTITY\020\001\022\033\n\027KINEMATICS_FORWARD_" +
      "ONLY\020\002\022\033\n\027KINEMATICS_INVERSE_ONLY\020\003\022\023\n\017K",
      "INEMATICS_BOTH\020\004*b\n\025EmcTrajectoryModeTyp" +
      "e\022\026\n\022EMC_TRAJ_MODE_FREE\020\001\022\027\n\023EMC_TRAJ_MO" +
      "DE_COORD\020\002\022\030\n\024EMC_TRAJ_MODE_TELEOP\020\003*S\n\021" +
      "EmcCanonUnitsType\022\026\n\022CANON_UNITS_INCHES\020" +
      "\001\022\022\n\016CANON_UNITS_MM\020\002\022\022\n\016CANON_UNITS_CM\020" +
      "\003*W\n\022EmcLinearUnitsType\022\027\n\023LINEAR_UNITS_" +
      "INCHES\020\001\022\023\n\017LINEAR_UNITS_MM\020\002\022\023\n\017LINEAR_" +
      "UNITS_CM\020\003*b\n\023EmcAngularUnitsType\022\031\n\025ANG" +
      "ULAR_UNITS_DEGREES\020\001\022\030\n\024ANGULAR_UNITS_RA" +
      "DIAN\020\002\022\026\n\022ANGULAR_UNITS_GRAD\020\003*@\n\020EmcTim",
      "eUnitsType\022\025\n\021TIME_UNITS_MINUTE\020\001\022\025\n\021TIM" +
      "E_UNITS_SECOND\020\002*Z\n\017EmcTaskModeType\022\030\n\024E" +
      "MC_TASK_MODE_MANUAL\020\001\022\026\n\022EMC_TASK_MODE_A" +
      "UTO\020\002\022\025\n\021EMC_TASK_MODE_MDI\020\003*{\n\020EmcTaskS" +
      "tateType\022\030\n\024EMC_TASK_STATE_ESTOP\020\001\022\036\n\032EM" +
      "C_TASK_STATE_ESTOP_RESET\020\002\022\026\n\022EMC_TASK_S" +
      "TATE_OFF\020\003\022\025\n\021EMC_TASK_STATE_ON\020\004*8\n\013Emc" +
      "AxisType\022\023\n\017EMC_AXIS_LINEAR\020\001\022\024\n\020EMC_AXI" +
      "S_ANGULAR\020\002*V\n\025EmcPositionOffsetType\022\036\n\032" +
      "EMC_CONFIG_RELATIVE_OFFSET\020\001\022\035\n\031EMC_CONF",
      "IG_MACHINE_OFFSET\020\002*\\\n\027EmcPositionFeedba" +
      "ckType\022\036\n\032EMC_CONFIG_ACTUAL_FEEDBACK\020\001\022!" +
      "\n\035EMC_CONFIG_COMMANDED_FEEDBACK\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          fi.kapsi.koti.jpa.nanopb.Nanopb.getDescriptor(),
          pb.Types.getDescriptor(),
          pb.PreviewOuterClass.getDescriptor(),
          pb.Emcclass.getDescriptor(),
          pb.Motcmds.getDescriptor(),
        }, assigner);
    internal_static_pb_EmcToolData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_pb_EmcToolData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcToolData_descriptor,
        new java.lang.String[] { "Index", "Id", "Diameter", "Frontangle", "Backangle", "Orientation", "Offset", });
    internal_static_pb_EmcStatusMotionAxis_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_pb_EmcStatusMotionAxis_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusMotionAxis_descriptor,
        new java.lang.String[] { "Index", "Enabled", "Fault", "FerrorCurrent", "FerrorHighmark", "Homed", "Homing", "Inpos", "Input", "MaxHardLimit", "MaxSoftLimit", "MinHardLimit", "MinSoftLimit", "Output", "OverrideLimits", "Velocity", });
    internal_static_pb_EmcStatusConfigAxis_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_pb_EmcStatusConfigAxis_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusConfigAxis_descriptor,
        new java.lang.String[] { "Index", "AxisType", "Backlash", "MaxFerror", "MaxPositionLimit", "MinFerror", "MinPositionLimit", "HomeSequence", "MaxAcceleration", "MaxVelocity", "Increments", });
    internal_static_pb_EmcProgramExtension_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_pb_EmcProgramExtension_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcProgramExtension_descriptor,
        new java.lang.String[] { "Index", "Extension", });
    internal_static_pb_EmcStatusAnalogIO_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_pb_EmcStatusAnalogIO_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusAnalogIO_descriptor,
        new java.lang.String[] { "Index", "Value", });
    internal_static_pb_EmcStatusDigitalIO_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_pb_EmcStatusDigitalIO_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusDigitalIO_descriptor,
        new java.lang.String[] { "Index", "Value", });
    internal_static_pb_EmcStatusLimit_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_pb_EmcStatusLimit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusLimit_descriptor,
        new java.lang.String[] { "Index", "Value", });
    internal_static_pb_EmcStatusGCode_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_pb_EmcStatusGCode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusGCode_descriptor,
        new java.lang.String[] { "Index", "Value", });
    internal_static_pb_EmcStatusMCode_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_pb_EmcStatusMCode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusMCode_descriptor,
        new java.lang.String[] { "Index", "Value", });
    internal_static_pb_EmcStatusSetting_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_pb_EmcStatusSetting_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusSetting_descriptor,
        new java.lang.String[] { "Index", "Value", });
    internal_static_pb_EmcStatusConfig_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_pb_EmcStatusConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusConfig_descriptor,
        new java.lang.String[] { "DefaultAcceleration", "Axes", "Axis", "AxisMask", "CycleTime", "Debug", "KinematicsType", "MaxAcceleration", "MaxVelocity", "LinearUnits", "DefaultVelocity", "ProgramExtension", "PositionOffset", "PositionFeedback", "MaxFeedOverride", "MinFeedOverride", "MaxSpindleOverride", "MinSpindleOverride", "DefaultSpindleSpeed", "DefaultLinearVelocity", "MinVelocity", "MaxLinearVelocity", "MinLinearVelocity", "DefaultAngularVelocity", "MaxAngularVelocity", "MinAngularVelocity", "Increments", "Grids", "Lathe", "Geometry", "Arcdivision", "NoForceHoming", "RemotePath", "TimeUnits", "Name", "UserCommand", "AngularUnits", });
    internal_static_pb_EmcStatusMotion_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_pb_EmcStatusMotion_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusMotion_descriptor,
        new java.lang.String[] { "ActiveQueue", "ActualPosition", "AdaptiveFeedEnabled", "Ain", "Aout", "Axis", "BlockDelete", "CurrentLine", "CurrentVel", "DelayLeft", "Din", "DistanceToGo", "Dout", "Dtg", "Enabled", "FeedHoldEnabled", "FeedOverrideEnabled", "Feedrate", "G5XIndex", "G5XOffset", "G92Offset", "Id", "Inpos", "JointActualPosition", "JointPosition", "Limit", "MotionLine", "MotionType", "MotionMode", "Paused", "Position", "ProbeTripped", "ProbeVal", "ProbedPosition", "Probing", "Queue", "QueueFull", "RotationXy", "SpindleBrake", "SpindleDirection", "SpindleEnabled", "SpindleIncreasing", "SpindleOverrideEnabled", "SpindleSpeed", "Spindlerate", "State", "MaxVelocity", "MaxAcceleration", });
    internal_static_pb_EmcStatusIo_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_pb_EmcStatusIo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusIo_descriptor,
        new java.lang.String[] { "Estop", "Flood", "Lube", "LubeLevel", "Mist", "PocketPrepped", "ToolInSpindle", "ToolOffset", "ToolTable", });
    internal_static_pb_EmcStatusTask_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_pb_EmcStatusTask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusTask_descriptor,
        new java.lang.String[] { "EchoSerialNumber", "ExecState", "File", "InputTimeout", "OptionalStop", "ReadLine", "TaskMode", "TaskPaused", "TaskState", "TotalLines", });
    internal_static_pb_EmcStatusInterp_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_pb_EmcStatusInterp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusInterp_descriptor,
        new java.lang.String[] { "Command", "Gcodes", "InterpState", "InterpreterErrcode", "Mcodes", "Settings", "ProgramUnits", });
    internal_static_pb_EmcCommandParameters_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_pb_EmcCommandParameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcCommandParameters_descriptor,
        new java.lang.String[] { "Index", "DebugLevel", "LineNumber", "Scale", "Velocity", "Distance", "Value", "Enable", "Command", "Path", "TaskMode", "TaskState", "TrajMode", "Pose", "ToolData", });
    internal_static_pb_EmcStatusUserCommand_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_pb_EmcStatusUserCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pb_EmcStatusUserCommand_descriptor,
        new java.lang.String[] { "Index", "Command", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    registry.add(fi.kapsi.koti.jpa.nanopb.Nanopb.nanopbMsgopt);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    fi.kapsi.koti.jpa.nanopb.Nanopb.getDescriptor();
    pb.Types.getDescriptor();
    pb.PreviewOuterClass.getDescriptor();
    pb.Emcclass.getDescriptor();
    pb.Motcmds.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
